Start time is 2021-03-01 22:39:27.623246
dataset path is  data-2.npy
dataset size is 1000
multi-process log-likelihood, use small batch-size and small learning rate
----- start search_algorithm -----
-----key model information----
num_formula=0
Time_tolerance=0.1
integral_resolution=0.1
decay_rate=1
batch_size=4
num_batch_check_for_feature=1
num_batch_check_for_gradient=20
num_batch_no_update_limit_opt=300
num_batch_no_update_limit_ucb=4
num_iter=5
epsilon=0.003
gain_threshold=0.02
low_grad_threshold=0.01
low_grad_tolerance=2
weight_threshold=0.01
strict_weight_threshold=0.1
learning_rate=0.0003125
max_rule_body_length=3
max_num_rule=30
batch_size_cp=1000
batch_size_grad=1000
batch_size_init_ucb=5
explore_rule_num_ucb=8
explore_batch_size_ucb=500
use_cp=False
worker_num=16
best_N=2
----
----- start initialize_rule_set -----
start enumerating candicate rules
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = -0.2000
Rule0: A --> F , A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 4.4454 sec.
[1 th iter] Elapsed: 4.3623 sec.
[2 th iter] Elapsed: 4.3758 sec.
3 th iter
grad norm=1.8635169917226928. num_batch_no_update =45
Head = F, base = -0.1936
Rule0: A --> F , A BEFORE F, weight=0.2421
[3 th iter] Elapsed: 4.4797 sec.
[4 th iter] Elapsed: 4.4088 sec.
Run 1250 batches
reach max iter num.
grad norm=1.6218051890604075. num_batch_no_update =72
Finish optimize_log_likelihood, the log likelihood is -8.005518066748152
Params  [tensor([-0.1439], dtype=torch.float64, requires_grad=True), tensor([0.3963], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 22.0766 sec.
Current rule is: A --> F , A BEFORE F
log-likelihood is  -8.005518066748152
weight = 0.3962906002998352
base = -0.14393000304698944
----
NOTE: Random initialization for fast result.
------Select best rule-------
Best initial rule is: A --> F , A BEFORE F
Best log-likelihood = -8.005518066748152
NOTE: Random initialization for fast result.
----- exit initialize_rule_set -----
Initialize with this rule:
Head = F, base(torch) = -0.1439,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3963.
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 22.5543 sec.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 39 candidate rules.
[multiprocess log-grad] Elapsed: 1.6190 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 4.25933, std=1.74642, Rule = C --> F , C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 4.19123, std=1.68335, Rule = Not C --> F , Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.54970, std=1.78342, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.52819, std=1.83181, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.41409, std=1.73000, Rule = Not E --> F , Not E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.39179, std=1.73724, Rule = Not B --> F , Not B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.35386, std=1.84750, Rule = B --> F , B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.34026, std=1.71080, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.20513, std=1.53624, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.65882, std=0.75708, Rule = B --> F , B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.60277, std=0.71465, Rule = C --> F , C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.41700, std=0.74791, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.40550, std=0.67874, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.39135, std=0.72381, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.38160, std=0.73592, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.37929, std=0.69274, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.37508, std=0.74081, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.36434, std=0.70221, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.35692, std=0.67901, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.35692, std=0.67901, Rule = Not A --> Not F , Not A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.36434, std=0.70221, Rule = Not D --> Not F , Not D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.37508, std=0.74081, Rule = A --> Not F , A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.37929, std=0.69274, Rule = D --> Not F , D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.38160, std=0.73592, Rule = Not B --> Not F , Not B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.39135, std=0.72381, Rule = Not E --> Not F , Not E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.40550, std=0.67874, Rule = Not C --> Not F , Not C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.41700, std=0.74791, Rule = E --> Not F , E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.60277, std=0.71465, Rule = C --> Not F , C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.65882, std=0.75708, Rule = B --> Not F , B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -3.20513, std=1.53624, Rule = Not A --> Not F , Not A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.34026, std=1.71080, Rule = Not D --> Not F , Not D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.35068, std=1.64237, Rule = A --> Not F , A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.35386, std=1.84750, Rule = B --> Not F , B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.39179, std=1.73724, Rule = Not B --> Not F , Not B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.41409, std=1.73000, Rule = Not E --> Not F , Not E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.52819, std=1.83181, Rule = E --> Not F , E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.54970, std=1.78342, Rule = D --> Not F , D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -4.19123, std=1.68335, Rule = Not C --> Not F , Not C BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -4.25933, std=1.74642, Rule = C --> Not F , C BEFORE Not F
-------------
Best rule is: C --> F , C BEFORE F
Best log-likelihood-grad(all-data) = 4.259328628732114
new rule added.
Best rule is: Not C --> F , Not C BEFORE F
Best log-likelihood-grad(all-data) = 4.191231265774374
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = -0.1439
Rule0: A --> F , A BEFORE F, weight=0.3963
Rule1: C --> F , C BEFORE F, weight=0.0100
Rule2: Not C --> F , Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 11.4006 sec.
[1 th iter] Elapsed: 9.9016 sec.
[2 th iter] Elapsed: 10.2497 sec.
3 th iter
grad norm=0.6093654898967678. num_batch_no_update =14
Head = F, base = -0.0089
Rule0: A --> F , A BEFORE F, weight=0.5918
Rule1: C --> F , C BEFORE F, weight=0.2370
Rule2: Not C --> F , Not C BEFORE F, weight=0.2388
[3 th iter] Elapsed: 9.2440 sec.
[4 th iter] Elapsed: 10.8180 sec.
Run 1250 batches
reach max iter num.
grad norm=0.16307630087102143. num_batch_no_update =90
Finish optimize_log_likelihood, the log likelihood is -5.841136471603706
Params  [tensor([0.0354], dtype=torch.float64, requires_grad=True), tensor([0.6138], dtype=torch.float64, requires_grad=True), tensor([0.3436], dtype=torch.float64, requires_grad=True), tensor([0.3598], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 51.6185 sec.
Update Log-likelihood (torch)=  -5.841136471603706
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0354,
Rule0: A --> F , A BEFORE F, weight(torch)=0.6138.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3436.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3598.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 47.6772 sec.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 37 candidate rules.
[multiprocess log-grad] Elapsed: 1.3442 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.29798, std=0.75765, Rule = B --> F , B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.29306, std=2.12163, Rule = Not B --> F , Not B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.26900, std=2.10370, Rule = Not E --> F , Not E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.23248, std=0.71830, Rule = C --> F , C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23001, std=2.23125, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.21753, std=2.13824, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.18099, std=2.23338, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08108, std=2.40750, Rule = A --> Not F , A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= 0.07366, std=2.29759, Rule = B --> F , B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06167, std=2.20153, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03868, std=0.69804, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03190, std=0.71472, Rule = Not A --> Not F , Not A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= 0.02010, std=0.78699, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01206, std=0.76291, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00987, std=0.73393, Rule = D --> Not F , D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= 0.00919, std=0.76527, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00604, std=0.74091, Rule = Not D --> Not F , Not D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= 0.00447, std=0.77936, Rule = A --> Not F , A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.00447, std=0.77936, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00604, std=0.74091, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00919, std=0.76527, Rule = Not E --> Not F , Not E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.00987, std=0.73393, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01206, std=0.76291, Rule = Not B --> Not F , Not B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.02010, std=0.78699, Rule = E --> Not F , E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.03190, std=0.71472, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03868, std=0.69804, Rule = Not C --> Not F , Not C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.06167, std=2.20153, Rule = Not A --> Not F , Not A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.07366, std=2.29759, Rule = B --> Not F , B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.18099, std=2.23338, Rule = E --> Not F , E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.21753, std=2.13824, Rule = Not D --> Not F , Not D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.23001, std=2.23125, Rule = D --> Not F , D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.23248, std=0.71830, Rule = C --> Not F , C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.26900, std=2.10370, Rule = Not E --> Not F , Not E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.29306, std=2.12163, Rule = Not B --> Not F , Not B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.29798, std=0.75765, Rule = B --> Not F , B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.62911, std=1.77699, Rule = C --> Not F , C BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.76421, std=1.62616, Rule = Not C --> Not F , Not C BEFORE Not F
-------------
Best rule is: B --> F , B EQUAL F
Best log-likelihood-grad(all-data) = 0.29797834620119884
new rule added.
Best rule is: Not B --> F , Not B BEFORE F
Best log-likelihood-grad(all-data) = 0.29306041672736094
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0354
Rule0: A --> F , A BEFORE F, weight=0.6138
Rule1: C --> F , C BEFORE F, weight=0.3436
Rule2: Not C --> F , Not C BEFORE F, weight=0.3598
Rule3: B --> F , B EQUAL F, weight=0.0100
Rule4: Not B --> F , Not B BEFORE F, weight=0.0100
[0 th iter] Elapsed: 10.7802 sec.
[1 th iter] Elapsed: 9.7171 sec.
[2 th iter] Elapsed: 11.1617 sec.
Run 564 batches
grad norm 0.08124395437541763 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.58955622826572
Params  [tensor([0.0736], dtype=torch.float64, requires_grad=True), tensor([0.5459], dtype=torch.float64, requires_grad=True), tensor([0.3941], dtype=torch.float64, requires_grad=True), tensor([0.4410], dtype=torch.float64, requires_grad=True), tensor([0.0117], dtype=torch.float64, requires_grad=True), tensor([0.0039], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 31.6638 sec.
Update Log-likelihood (torch)=  -5.58955622826572
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0736,
Rule0: A --> F , A BEFORE F, weight(torch)=0.5459.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3941.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4410.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0117.
Rule4: Not B --> F , Not B BEFORE F, weight(torch)=0.0039.
delete these rules: [4]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0736
Rule0: A --> F , A BEFORE F, weight=0.5459
Rule1: C --> F , C BEFORE F, weight=0.3941
Rule2: Not C --> F , Not C BEFORE F, weight=0.4410
Rule3: B --> F , B EQUAL F, weight=0.0117
[0 th iter] Elapsed: 9.9836 sec.
[1 th iter] Elapsed: 9.8035 sec.
Run 373 batches
grad norm 0.1500093533117423 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.607503162866262
Params  [tensor([0.0802], dtype=torch.float64, requires_grad=True), tensor([0.5078], dtype=torch.float64, requires_grad=True), tensor([0.4120], dtype=torch.float64, requires_grad=True), tensor([0.4774], dtype=torch.float64, requires_grad=True), tensor([0.0174], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 19.7915 sec.
update Log-likelihood (torch)=  -5.607503162866262
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.0802,
Rule0: A --> F , A BEFORE F, weight(torch)=0.5078.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4120.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4774.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0174.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 1.0130 min.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 17 candidate rules.
[multiprocess log-grad] Elapsed: 47.9971 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.20340, std=0.72512, Rule = C --> F , C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.13804, std=2.38498, Rule = A --> Not F , A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= 0.04746, std=0.72124, Rule = Not A --> Not F , Not A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= 0.04429, std=2.19858, Rule = Not E --> F , Not E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01472, std=0.70612, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00096, std=2.22036, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00257, std=2.31333, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01049, std=0.79484, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01625, std=0.76987, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01888, std=0.77571, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03383, std=0.75284, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03830, std=2.20374, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04106, std=0.74634, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.04549, std=0.78867, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.04746, std=0.72124, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.06173, std=2.33675, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.15671, std=2.40904, Rule = B --> F , B BEFORE F
-------------
Best rule is: C --> F , C EQUAL F
Best log-likelihood-grad(all-data) = 0.20340223738110297
new rule added.
Best rule is: A --> Not F , A BEFORE Not F
Best log-likelihood-grad(all-data) = 0.13804063614635076
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0802
Rule0: A --> F , A BEFORE F, weight=0.5078
Rule1: C --> F , C BEFORE F, weight=0.4120
Rule2: Not C --> F , Not C BEFORE F, weight=0.4774
Rule3: B --> F , B EQUAL F, weight=0.0174
Rule4: C --> F , C EQUAL F, weight=0.0100
Rule5: A --> Not F , A BEFORE Not F, weight=0.0100
[0 th iter] Elapsed: 13.2352 sec.
[1 th iter] Elapsed: 11.5684 sec.
Run 367 batches
grad norm 0.07690606014654157 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.494033961934553
Params  [tensor([0.0801], dtype=torch.float64, requires_grad=True), tensor([0.4761], dtype=torch.float64, requires_grad=True), tensor([0.4178], dtype=torch.float64, requires_grad=True), tensor([0.5051], dtype=torch.float64, requires_grad=True), tensor([0.0211], dtype=torch.float64, requires_grad=True), tensor([0.0026], dtype=torch.float64, requires_grad=True), tensor([0.0017], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 24.8090 sec.
Update Log-likelihood (torch)=  -5.494033961934553
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0801,
Rule0: A --> F , A BEFORE F, weight(torch)=0.4761.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4178.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5051.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0211.
Rule4: C --> F , C EQUAL F, weight(torch)=0.0026.
Rule5: A --> Not F , A BEFORE Not F, weight(torch)=0.0017.
delete these rules: [4, 5]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0801
Rule0: A --> F , A BEFORE F, weight=0.4761
Rule1: C --> F , C BEFORE F, weight=0.4178
Rule2: Not C --> F , Not C BEFORE F, weight=0.5051
Rule3: B --> F , B EQUAL F, weight=0.0211
[0 th iter] Elapsed: 8.7783 sec.
[1 th iter] Elapsed: 9.5262 sec.
Run 301 batches
grad norm 0.07569681822922301 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.4234163274379386
Params  [tensor([0.0938], dtype=torch.float64, requires_grad=True), tensor([0.4524], dtype=torch.float64, requires_grad=True), tensor([0.4240], dtype=torch.float64, requires_grad=True), tensor([0.5241], dtype=torch.float64, requires_grad=True), tensor([0.0243], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 18.3188 sec.
update Log-likelihood (torch)=  -5.4234163274379386
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.0938,
Rule0: A --> F , A BEFORE F, weight(torch)=0.4524.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4240.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5241.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0243.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 1.0082 min.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 10 workers, process 10 candidate rules.
[multiprocess log-grad] Elapsed: 27.6098 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05817, std=2.21171, Rule = Not E --> F , Not E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03943, std=0.72112, Rule = Not A --> Not F , Not A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= 0.03335, std=2.16549, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01899, std=0.70734, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01568, std=2.31700, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01483, std=2.22349, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00899, std=0.79551, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01518, std=0.77085, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.04671, std=2.35210, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.13933, std=2.42674, Rule = B --> F , B BEFORE F
-------------
Best rule is: Not E --> F , Not E BEFORE F
Best log-likelihood-grad(all-data) = 0.05817340391200413
new rule added.
Best rule is: Not A --> Not F , Not A EQUAL Not F
Best log-likelihood-grad(all-data) = 0.039429208473286195
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0938
Rule0: A --> F , A BEFORE F, weight=0.4524
Rule1: C --> F , C BEFORE F, weight=0.4240
Rule2: Not C --> F , Not C BEFORE F, weight=0.5241
Rule3: B --> F , B EQUAL F, weight=0.0243
Rule4: Not E --> F , Not E BEFORE F, weight=0.0100
Rule5: Not A --> Not F , Not A EQUAL Not F, weight=0.0100
[0 th iter] Elapsed: 13.1076 sec.
[1 th iter] Elapsed: 11.3425 sec.
Run 461 batches
grad norm 0.05007068792532241 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.49140318846911
Params  [tensor([0.0890], dtype=torch.float64, requires_grad=True), tensor([0.4245], dtype=torch.float64, requires_grad=True), tensor([0.4341], dtype=torch.float64, requires_grad=True), tensor([0.5443], dtype=torch.float64, requires_grad=True), tensor([0.0252], dtype=torch.float64, requires_grad=True), tensor([0.0015], dtype=torch.float64, requires_grad=True), tensor([0.0006], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 24.4551 sec.
Update Log-likelihood (torch)=  -5.49140318846911
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0890,
Rule0: A --> F , A BEFORE F, weight(torch)=0.4245.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4341.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5443.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0252.
Rule4: Not E --> F , Not E BEFORE F, weight(torch)=0.0015.
Rule5: Not A --> Not F , Not A EQUAL Not F, weight(torch)=0.0006.
delete these rules: [4, 5]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0890
Rule0: A --> F , A BEFORE F, weight=0.4245
Rule1: C --> F , C BEFORE F, weight=0.4341
Rule2: Not C --> F , Not C BEFORE F, weight=0.5443
Rule3: B --> F , B EQUAL F, weight=0.0252
[0 th iter] Elapsed: 8.7850 sec.
[1 th iter] Elapsed: 8.9402 sec.
Run 302 batches
grad norm 0.05652201136335663 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.449475093110868
Params  [tensor([0.0939], dtype=torch.float64, requires_grad=True), tensor([0.4120], dtype=torch.float64, requires_grad=True), tensor([0.4393], dtype=torch.float64, requires_grad=True), tensor([0.5623], dtype=torch.float64, requires_grad=True), tensor([0.0299], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 17.7312 sec.
update Log-likelihood (torch)=  -5.449475093110868
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.0939,
Rule0: A --> F , A BEFORE F, weight(torch)=0.4120.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4393.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5623.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0299.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 1.1916 min.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 4 workers, process 4 candidate rules.
[multiprocess log-grad] Elapsed: 18.6039 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05296, std=2.13577, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01786, std=0.70820, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00765, std=2.31655, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00963, std=2.22282, Rule = Not D --> F , Not D BEFORE F
-------------
Best rule is: Not A --> F , Not A BEFORE F
Best log-likelihood-grad(all-data) = 0.05296085892543277
new rule added.
best gain 0.01786307108232582 does not meet thershold 0.02.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0939
Rule0: A --> F , A BEFORE F, weight=0.4120
Rule1: C --> F , C BEFORE F, weight=0.4393
Rule2: Not C --> F , Not C BEFORE F, weight=0.5623
Rule3: B --> F , B EQUAL F, weight=0.0299
Rule4: Not A --> F , Not A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 10.7820 sec.
[1 th iter] Elapsed: 9.3449 sec.
Run 303 batches
grad norm 0.06554650368913874 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.374502129686766
Params  [tensor([0.0887], dtype=torch.float64, requires_grad=True), tensor([0.3925], dtype=torch.float64, requires_grad=True), tensor([0.4354], dtype=torch.float64, requires_grad=True), tensor([0.5736], dtype=torch.float64, requires_grad=True), tensor([0.0292], dtype=torch.float64, requires_grad=True), tensor([-1.0380e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 20.1350 sec.
Update Log-likelihood (torch)=  -5.374502129686766
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0887,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3925.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4354.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5736.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0292.
Rule4: Not A --> F , Not A BEFORE F, weight(torch)=-0.0000.
delete these rules: [4]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0887
Rule0: A --> F , A BEFORE F, weight=0.3925
Rule1: C --> F , C BEFORE F, weight=0.4354
Rule2: Not C --> F , Not C BEFORE F, weight=0.5736
Rule3: B --> F , B EQUAL F, weight=0.0292
[0 th iter] Elapsed: 8.8298 sec.
[1 th iter] Elapsed: 9.4190 sec.
Run 302 batches
grad norm 0.09473688233859534 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.818502125512621
Params  [tensor([0.0940], dtype=torch.float64, requires_grad=True), tensor([0.3886], dtype=torch.float64, requires_grad=True), tensor([0.4386], dtype=torch.float64, requires_grad=True), tensor([0.5877], dtype=torch.float64, requires_grad=True), tensor([0.0401], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 18.2534 sec.
update Log-likelihood (torch)=  -5.818502125512621
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.0940,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3886.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4386.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5877.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0401.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 1.0106 min.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 1 workers, process 1 candidate rules.
[multiprocess log-grad] Elapsed: 14.1838 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02089, std=0.70799, Rule = Not C --> F , Not C EQUAL F
-------------
Best rule is: Not C --> F , Not C EQUAL F
Best log-likelihood-grad(all-data) = 0.020891009326061746
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0940
Rule0: A --> F , A BEFORE F, weight=0.3886
Rule1: C --> F , C BEFORE F, weight=0.4386
Rule2: Not C --> F , Not C BEFORE F, weight=0.5877
Rule3: B --> F , B EQUAL F, weight=0.0401
Rule4: Not C --> F , Not C EQUAL F, weight=0.0100
[0 th iter] Elapsed: 9.7690 sec.
[1 th iter] Elapsed: 9.8770 sec.
Run 379 batches
grad norm 0.1085717411362863 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.314393189560877
Params  [tensor([0.0988], dtype=torch.float64, requires_grad=True), tensor([0.3864], dtype=torch.float64, requires_grad=True), tensor([0.4318], dtype=torch.float64, requires_grad=True), tensor([0.5865], dtype=torch.float64, requires_grad=True), tensor([0.0351], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 19.6507 sec.
Update Log-likelihood (torch)=  -5.314393189560877
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0988,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3864.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4318.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5865.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0351.
Rule4: Not C --> F , Not C EQUAL F, weight(torch)=-0.0003.
delete these rules: [4]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0988
Rule0: A --> F , A BEFORE F, weight=0.3864
Rule1: C --> F , C BEFORE F, weight=0.4318
Rule2: Not C --> F , Not C BEFORE F, weight=0.5865
Rule3: B --> F , B EQUAL F, weight=0.0351
[0 th iter] Elapsed: 8.6289 sec.
[1 th iter] Elapsed: 8.9432 sec.
Run 301 batches
grad norm 0.03950153308503114 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3798605835157405
Params  [tensor([0.1010], dtype=torch.float64, requires_grad=True), tensor([0.3760], dtype=torch.float64, requires_grad=True), tensor([0.4331], dtype=torch.float64, requires_grad=True), tensor([0.5967], dtype=torch.float64, requires_grad=True), tensor([0.0367], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 17.5768 sec.
update Log-likelihood (torch)=  -5.3798605835157405
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1010,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3760.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4331.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5967.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0367.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 1.0313 min.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
No candidate rule generated.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
start to extend this rule: Not C --> F , Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 32 candidate rules.
[multiprocess log-grad] Elapsed: 1.2980 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.45566, std=1.57649, Rule = A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.38159, std=1.58083, Rule = Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.30896, std=1.82241, Rule = Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.30126, std=1.79492, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.29208, std=1.86567, Rule = E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.27780, std=1.87751, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.27310, std=1.74356, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.24201, std=0.57021, Rule = B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.19252, std=0.84295, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.18453, std=0.81051, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.15887, std=1.95213, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14793, std=0.96789, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13341, std=1.02452, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13265, std=0.95398, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13157, std=0.91520, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13008, std=0.94299, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12750, std=1.01301, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06083, std=0.41254, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05032, std=0.42920, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04856, std=0.60188, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04822, std=0.41285, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04805, std=0.44605, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03745, std=0.43477, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03232, std=0.57498, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03225, std=0.46391, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02468, std=0.45471, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01755, std=0.46605, Rule = B ^ Not C --> F , B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01675, std=0.56576, Rule = D ^ Not C --> F , D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00766, std=0.60683, Rule = Not B ^ Not C --> F , Not B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00365, std=0.61534, Rule = Not E ^ Not C --> F , Not E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00237, std=0.59396, Rule = A ^ Not C --> F , A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00179, std=0.63059, Rule = Not D ^ Not C --> F , Not D EQUAL F ^ Not C BEFORE F
-------------
Best rule is: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.45565876548326295
new rule added.
Best rule is: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.3815929426962337
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1010
Rule0: A --> F , A BEFORE F, weight=0.3760
Rule1: C --> F , C BEFORE F, weight=0.4331
Rule2: Not C --> F , Not C BEFORE F, weight=0.5967
Rule3: B --> F , B EQUAL F, weight=0.0367
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 12.2907 sec.
[1 th iter] Elapsed: 13.7003 sec.
Run 369 batches
grad norm 0.08231599534431008 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.58587498749027
Params  [tensor([0.0988], dtype=torch.float64, requires_grad=True), tensor([0.3599], dtype=torch.float64, requires_grad=True), tensor([0.4237], dtype=torch.float64, requires_grad=True), tensor([0.5983], dtype=torch.float64, requires_grad=True), tensor([0.0336], dtype=torch.float64, requires_grad=True), tensor([0.0405], dtype=torch.float64, requires_grad=True), tensor([0.0285], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 25.9986 sec.
Update Log-likelihood (torch)=  -5.58587498749027
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0988,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3599.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4237.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5983.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0336.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0405.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0285.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 1.2319 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.23315, std=0.57076, Rule = B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.20053, std=1.86800, Rule = Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.18969, std=1.83784, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.18148, std=1.90872, Rule = E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17059, std=1.91734, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16368, std=1.78532, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12577, std=0.87268, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12047, std=0.84074, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08854, std=0.99134, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07599, std=0.97905, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07468, std=0.96522, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07436, std=0.93923, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07359, std=1.05131, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06884, std=1.03683, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04997, std=1.99570, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04836, std=0.41675, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03525, std=0.60763, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03410, std=0.45387, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03172, std=0.44006, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02879, std=0.42530, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02421, std=0.44129, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02129, std=0.57970, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01893, std=0.46973, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01036, std=0.46406, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00462, std=0.47432, Rule = B ^ Not C --> F , B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00461, std=0.57212, Rule = D ^ Not C --> F , D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00446, std=0.61358, Rule = Not B ^ Not C --> F , Not B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00899, std=0.62258, Rule = Not E ^ Not C --> F , Not E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01051, std=0.63696, Rule = Not D ^ Not C --> F , Not D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01086, std=0.59966, Rule = A ^ Not C --> F , A EQUAL F ^ Not C BEFORE F
-------------
Best rule is: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.23314763191221521
new rule added.
Best rule is: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.20052610516288316
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.0988
Rule0: A --> F , A BEFORE F, weight=0.3599
Rule1: C --> F , C BEFORE F, weight=0.4237
Rule2: Not C --> F , Not C BEFORE F, weight=0.5983
Rule3: B --> F , B EQUAL F, weight=0.0336
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0405
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0285
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0100
Rule7: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 16.8319 sec.
[1 th iter] Elapsed: 17.1746 sec.
Run 302 batches
grad norm 0.11803244650233136 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.847860268185165
Params  [tensor([0.1100], dtype=torch.float64, requires_grad=True), tensor([0.3458], dtype=torch.float64, requires_grad=True), tensor([0.4120], dtype=torch.float64, requires_grad=True), tensor([0.5868], dtype=torch.float64, requires_grad=True), tensor([0.0354], dtype=torch.float64, requires_grad=True), tensor([0.0686], dtype=torch.float64, requires_grad=True), tensor([0.0383], dtype=torch.float64, requires_grad=True), tensor([0.0031], dtype=torch.float64, requires_grad=True), tensor([0.0156], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.0123 sec.
Update Log-likelihood (torch)=  -5.847860268185165
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1100,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3458.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4120.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5868.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0354.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0686.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0383.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.0031.
Rule7: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0156.
delete these rules: [6]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1100
Rule0: A --> F , A BEFORE F, weight=0.3458
Rule1: C --> F , C BEFORE F, weight=0.4120
Rule2: Not C --> F , Not C BEFORE F, weight=0.5868
Rule3: B --> F , B EQUAL F, weight=0.0354
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0686
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0383
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0156
[0 th iter] Elapsed: 14.9900 sec.
[1 th iter] Elapsed: 14.0105 sec.
Run 488 batches
grad norm 0.0738310334846566 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.635114505827502
Params  [tensor([0.1034], dtype=torch.float64, requires_grad=True), tensor([0.3332], dtype=torch.float64, requires_grad=True), tensor([0.4060], dtype=torch.float64, requires_grad=True), tensor([0.5747], dtype=torch.float64, requires_grad=True), tensor([0.0306], dtype=torch.float64, requires_grad=True), tensor([0.0829], dtype=torch.float64, requires_grad=True), tensor([0.0411], dtype=torch.float64, requires_grad=True), tensor([0.0210], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 29.0060 sec.
update Log-likelihood (torch)=  -5.635114505827502
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1034,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3332.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4060.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5747.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0306.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0829.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0411.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0210.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 24 candidate rules.
[multiprocess log-grad] Elapsed: 1.2909 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.19592, std=1.84358, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17509, std=1.92824, Rule = E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17469, std=1.92341, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16732, std=1.79140, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11566, std=0.88573, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10905, std=0.85477, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08520, std=0.99629, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07032, std=0.97130, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06953, std=0.94424, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06573, std=1.04300, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06543, std=0.99314, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06467, std=1.06690, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05582, std=2.00409, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04854, std=0.41670, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03490, std=0.60987, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03067, std=0.46006, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02853, std=0.44346, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02495, std=0.44112, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02494, std=0.42998, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02225, std=0.58082, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01758, std=0.47166, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00973, std=0.46802, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00584, std=0.57358, Rule = D ^ Not C --> F , D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00505, std=0.47499, Rule = B ^ Not C --> F , B EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.19592182785760162
new rule added.
Best rule is: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.17509488313681676
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1034
Rule0: A --> F , A BEFORE F, weight=0.3332
Rule1: C --> F , C BEFORE F, weight=0.4060
Rule2: Not C --> F , Not C BEFORE F, weight=0.5747
Rule3: B --> F , B EQUAL F, weight=0.0306
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0829
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0411
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0210
Rule7: D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule8: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 17.7595 sec.
[1 th iter] Elapsed: 17.8258 sec.
[2 th iter] Elapsed: 17.8809 sec.
Run 571 batches
grad norm 0.048553149088601984 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.449841071224567
Params  [tensor([0.1114], dtype=torch.float64, requires_grad=True), tensor([0.3051], dtype=torch.float64, requires_grad=True), tensor([0.3962], dtype=torch.float64, requires_grad=True), tensor([0.5687], dtype=torch.float64, requires_grad=True), tensor([0.0340], dtype=torch.float64, requires_grad=True), tensor([0.1062], dtype=torch.float64, requires_grad=True), tensor([0.0436], dtype=torch.float64, requires_grad=True), tensor([0.0232], dtype=torch.float64, requires_grad=True), tensor([0.0009], dtype=torch.float64, requires_grad=True), tensor([0.0056], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.4722 sec.
Update Log-likelihood (torch)=  -5.449841071224567
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1114,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3051.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3962.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5687.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0340.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1062.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0436.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0232.
Rule7: D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F, weight(torch)=0.0009.
Rule8: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0056.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1114
Rule0: A --> F , A BEFORE F, weight=0.3051
Rule1: C --> F , C BEFORE F, weight=0.3962
Rule2: Not C --> F , Not C BEFORE F, weight=0.5687
Rule3: B --> F , B EQUAL F, weight=0.0340
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1062
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0436
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0232
[0 th iter] Elapsed: 14.4825 sec.
[1 th iter] Elapsed: 15.6604 sec.
[2 th iter] Elapsed: 15.4936 sec.
Run 588 batches
grad norm 0.1534920780255137 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -4.959324016964023
Params  [tensor([0.1095], dtype=torch.float64, requires_grad=True), tensor([0.2945], dtype=torch.float64, requires_grad=True), tensor([0.3918], dtype=torch.float64, requires_grad=True), tensor([0.5570], dtype=torch.float64, requires_grad=True), tensor([0.0415], dtype=torch.float64, requires_grad=True), tensor([0.1363], dtype=torch.float64, requires_grad=True), tensor([0.0523], dtype=torch.float64, requires_grad=True), tensor([0.0244], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 45.6413 sec.
update Log-likelihood (torch)=  -4.959324016964023
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1095,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2945.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3918.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5570.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0415.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1363.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0523.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0244.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 20 candidate rules.
[multiprocess log-grad] Elapsed: 1.1647 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.20158, std=1.92396, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.19428, std=1.79268, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11549, std=0.89680, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10785, std=0.86518, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09223, std=0.99880, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08604, std=2.00508, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07601, std=0.97430, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07511, std=0.94629, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07323, std=1.04610, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07150, std=1.06980, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07054, std=0.99640, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05081, std=0.41647, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03781, std=0.61132, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03261, std=0.45989, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02787, std=0.44061, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02752, std=0.44627, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02561, std=0.58138, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02369, std=0.43393, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02009, std=0.47078, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01161, std=0.46894, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.20157527558325863
new rule added.
Best rule is: Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.19427628241574152
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1095
Rule0: A --> F , A BEFORE F, weight=0.2945
Rule1: C --> F , C BEFORE F, weight=0.3918
Rule2: Not C --> F , Not C BEFORE F, weight=0.5570
Rule3: B --> F , B EQUAL F, weight=0.0415
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1363
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0523
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0244
Rule7: Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule8: Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 21.9669 sec.
[1 th iter] Elapsed: 18.4952 sec.
Run 301 batches
grad norm 0.03689265765667387 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.216578005699783
Params  [tensor([0.1077], dtype=torch.float64, requires_grad=True), tensor([0.2824], dtype=torch.float64, requires_grad=True), tensor([0.3870], dtype=torch.float64, requires_grad=True), tensor([0.5421], dtype=torch.float64, requires_grad=True), tensor([0.0481], dtype=torch.float64, requires_grad=True), tensor([0.1488], dtype=torch.float64, requires_grad=True), tensor([0.0546], dtype=torch.float64, requires_grad=True), tensor([0.0230], dtype=torch.float64, requires_grad=True), tensor([0.0059], dtype=torch.float64, requires_grad=True), tensor([0.0087], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 40.4700 sec.
Update Log-likelihood (torch)=  -5.216578005699783
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1077,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2824.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3870.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5421.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0481.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1488.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0546.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0230.
Rule7: Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F, weight(torch)=0.0059.
Rule8: Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F, weight(torch)=0.0087.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1077
Rule0: A --> F , A BEFORE F, weight=0.2824
Rule1: C --> F , C BEFORE F, weight=0.3870
Rule2: Not C --> F , Not C BEFORE F, weight=0.5421
Rule3: B --> F , B EQUAL F, weight=0.0481
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1488
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0546
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0230
[0 th iter] Elapsed: 14.9123 sec.
[1 th iter] Elapsed: 13.8302 sec.
[2 th iter] Elapsed: 14.3053 sec.
Run 569 batches
grad norm 0.04570240024816146 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.683424567778242
Params  [tensor([0.1031], dtype=torch.float64, requires_grad=True), tensor([0.2761], dtype=torch.float64, requires_grad=True), tensor([0.3921], dtype=torch.float64, requires_grad=True), tensor([0.5345], dtype=torch.float64, requires_grad=True), tensor([0.0463], dtype=torch.float64, requires_grad=True), tensor([0.1811], dtype=torch.float64, requires_grad=True), tensor([0.0664], dtype=torch.float64, requires_grad=True), tensor([0.0410], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 43.0539 sec.
update Log-likelihood (torch)=  -5.683424567778242
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1031,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2761.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3921.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5345.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0463.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1811.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0664.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0410.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 18 candidate rules.
[multiprocess log-grad] Elapsed: 1.0912 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06934, std=0.92473, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06325, std=0.89413, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05280, std=1.01562, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04280, std=0.41849, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03845, std=0.99163, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03664, std=0.96337, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03409, std=1.06433, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02825, std=0.61686, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02723, std=1.02378, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02694, std=1.09969, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02080, std=0.47048, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01961, std=0.44438, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01765, std=0.58525, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01448, std=0.45618, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01269, std=2.03568, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01072, std=0.44463, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01020, std=0.47612, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00187, std=0.47823, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.06934427056198277
new rule added.
Best rule is: Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.0632483239009884
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1031
Rule0: A --> F , A BEFORE F, weight=0.2761
Rule1: C --> F , C BEFORE F, weight=0.3921
Rule2: Not C --> F , Not C BEFORE F, weight=0.5345
Rule3: B --> F , B EQUAL F, weight=0.0463
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1811
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0664
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0410
Rule7: A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F, weight=0.0100
Rule8: Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 19.6703 sec.
[1 th iter] Elapsed: 17.1664 sec.
Run 322 batches
grad norm 0.0740963653718657 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.81183215218428
Params  [tensor([0.1034], dtype=torch.float64, requires_grad=True), tensor([0.2624], dtype=torch.float64, requires_grad=True), tensor([0.3921], dtype=torch.float64, requires_grad=True), tensor([0.5267], dtype=torch.float64, requires_grad=True), tensor([0.0529], dtype=torch.float64, requires_grad=True), tensor([0.1942], dtype=torch.float64, requires_grad=True), tensor([0.0716], dtype=torch.float64, requires_grad=True), tensor([0.0386], dtype=torch.float64, requires_grad=True), tensor([-0.0001], dtype=torch.float64, requires_grad=True), tensor([-0.0004], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 36.8661 sec.
Update Log-likelihood (torch)=  -5.81183215218428
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1034,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2624.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3921.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5267.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0529.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1942.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0716.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0386.
Rule7: A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F, weight(torch)=-0.0001.
Rule8: Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F, weight(torch)=-0.0004.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1034
Rule0: A --> F , A BEFORE F, weight=0.2624
Rule1: C --> F , C BEFORE F, weight=0.3921
Rule2: Not C --> F , Not C BEFORE F, weight=0.5267
Rule3: B --> F , B EQUAL F, weight=0.0529
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1942
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0716
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0386
[0 th iter] Elapsed: 15.9306 sec.
[1 th iter] Elapsed: 14.1577 sec.
Run 303 batches
grad norm 0.0662548630512718 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.247356207063421
Params  [tensor([0.1036], dtype=torch.float64, requires_grad=True), tensor([0.2506], dtype=torch.float64, requires_grad=True), tensor([0.3857], dtype=torch.float64, requires_grad=True), tensor([0.5105], dtype=torch.float64, requires_grad=True), tensor([0.0623], dtype=torch.float64, requires_grad=True), tensor([0.2034], dtype=torch.float64, requires_grad=True), tensor([0.0694], dtype=torch.float64, requires_grad=True), tensor([0.0380], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 30.0937 sec.
update Log-likelihood (torch)=  -5.247356207063421
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1036,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2506.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3857.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5105.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0623.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2034.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0694.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0380.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 15 workers, process 15 candidate rules.
[multiprocess log-grad] Elapsed: 40.3466 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.12262, std=1.98453, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10440, std=0.99147, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08618, std=1.03914, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08549, std=0.96846, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08484, std=0.93865, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08120, std=1.06619, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07693, std=0.99363, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05430, std=0.41255, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04139, std=0.61157, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03447, std=0.45761, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03278, std=0.43584, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02978, std=0.57970, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02687, std=0.44681, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02359, std=0.46640, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02237, std=0.43615, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.12262359683438435
new rule added.
Best rule is: D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.10440477930895531
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1036
Rule0: A --> F , A BEFORE F, weight=0.2506
Rule1: C --> F , C BEFORE F, weight=0.3857
Rule2: Not C --> F , Not C BEFORE F, weight=0.5105
Rule3: B --> F , B EQUAL F, weight=0.0623
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2034
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0694
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0380
Rule7: B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule8: D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 16.9531 sec.
[1 th iter] Elapsed: 17.9759 sec.
Run 398 batches
grad norm 0.11364206065019047 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.631431179969974
Params  [tensor([0.1077], dtype=torch.float64, requires_grad=True), tensor([0.2506], dtype=torch.float64, requires_grad=True), tensor([0.3915], dtype=torch.float64, requires_grad=True), tensor([0.5064], dtype=torch.float64, requires_grad=True), tensor([0.0651], dtype=torch.float64, requires_grad=True), tensor([0.2180], dtype=torch.float64, requires_grad=True), tensor([0.0726], dtype=torch.float64, requires_grad=True), tensor([0.0437], dtype=torch.float64, requires_grad=True), tensor([0.0023], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.9348 sec.
Update Log-likelihood (torch)=  -5.631431179969974
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1077,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2506.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3915.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5064.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0651.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2180.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0726.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0437.
Rule7: B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F, weight(torch)=0.0023.
Rule8: D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F, weight(torch)=-0.0003.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1077
Rule0: A --> F , A BEFORE F, weight=0.2506
Rule1: C --> F , C BEFORE F, weight=0.3915
Rule2: Not C --> F , Not C BEFORE F, weight=0.5064
Rule3: B --> F , B EQUAL F, weight=0.0651
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2180
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0726
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0437
[0 th iter] Elapsed: 14.3178 sec.
[1 th iter] Elapsed: 14.7338 sec.
[2 th iter] Elapsed: 13.6232 sec.
Run 665 batches
grad norm 0.07417371178792441 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.575371923381597
Params  [tensor([0.1081], dtype=torch.float64, requires_grad=True), tensor([0.2449], dtype=torch.float64, requires_grad=True), tensor([0.3904], dtype=torch.float64, requires_grad=True), tensor([0.4957], dtype=torch.float64, requires_grad=True), tensor([0.0601], dtype=torch.float64, requires_grad=True), tensor([0.2370], dtype=torch.float64, requires_grad=True), tensor([0.0796], dtype=torch.float64, requires_grad=True), tensor([0.0414], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 42.6801 sec.
update Log-likelihood (torch)=  -5.575371923381597
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1081,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2449.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3904.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4957.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0601.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2370.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0796.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0414.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 13 workers, process 13 candidate rules.
[multiprocess log-grad] Elapsed: 38.2014 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05051, std=0.99175, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04898, std=0.96188, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04864, std=1.06381, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04659, std=0.41735, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04192, std=1.09444, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04009, std=1.02048, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03225, std=0.61806, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02495, std=0.46656, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02438, std=0.44267, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02137, std=0.58515, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01464, std=0.47346, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01335, std=0.46051, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00992, std=0.44975, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.050505059371215535
new rule added.
Best rule is: Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.048978538987793314
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1081
Rule0: A --> F , A BEFORE F, weight=0.2449
Rule1: C --> F , C BEFORE F, weight=0.3904
Rule2: Not C --> F , Not C BEFORE F, weight=0.4957
Rule3: B --> F , B EQUAL F, weight=0.0601
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2370
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0796
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0414
Rule7: Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F, weight=0.0100
Rule8: Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 18.9179 sec.
[1 th iter] Elapsed: 16.5986 sec.
[2 th iter] Elapsed: 17.8575 sec.
Run 667 batches
grad norm 0.027783240398428152 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.541919021609598
Params  [tensor([0.1131], dtype=torch.float64, requires_grad=True), tensor([0.2344], dtype=torch.float64, requires_grad=True), tensor([0.3908], dtype=torch.float64, requires_grad=True), tensor([0.4856], dtype=torch.float64, requires_grad=True), tensor([0.0672], dtype=torch.float64, requires_grad=True), tensor([0.2518], dtype=torch.float64, requires_grad=True), tensor([0.0778], dtype=torch.float64, requires_grad=True), tensor([0.0427], dtype=torch.float64, requires_grad=True), tensor([0.0001], dtype=torch.float64, requires_grad=True), tensor([0.0006], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.3815 sec.
Update Log-likelihood (torch)=  -5.541919021609598
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1131,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2344.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3908.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4856.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0672.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2518.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0778.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0427.
Rule7: Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F, weight(torch)=0.0001.
Rule8: Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F, weight(torch)=0.0006.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1131
Rule0: A --> F , A BEFORE F, weight=0.2344
Rule1: C --> F , C BEFORE F, weight=0.3908
Rule2: Not C --> F , Not C BEFORE F, weight=0.4856
Rule3: B --> F , B EQUAL F, weight=0.0672
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2518
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0778
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0427
[0 th iter] Elapsed: 14.2814 sec.
[1 th iter] Elapsed: 14.0153 sec.
Run 374 batches
grad norm 0.04522100002021468 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.4683815033674374
Params  [tensor([0.1078], dtype=torch.float64, requires_grad=True), tensor([0.2343], dtype=torch.float64, requires_grad=True), tensor([0.3929], dtype=torch.float64, requires_grad=True), tensor([0.4773], dtype=torch.float64, requires_grad=True), tensor([0.0653], dtype=torch.float64, requires_grad=True), tensor([0.2673], dtype=torch.float64, requires_grad=True), tensor([0.0862], dtype=torch.float64, requires_grad=True), tensor([0.0454], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 28.3019 sec.
update Log-likelihood (torch)=  -5.4683815033674374
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1078,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2343.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3929.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4773.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0653.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2673.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0862.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0454.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 11 workers, process 11 candidate rules.
[multiprocess log-grad] Elapsed: 37.3294 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04394, std=0.41862, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03493, std=1.07362, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02891, std=0.62123, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02689, std=1.10605, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02545, std=1.03189, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02176, std=0.44471, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02123, std=0.46985, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01826, std=0.58739, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01147, std=0.47564, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00698, std=0.46756, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00416, std=0.45688, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.04393574098357479
new rule added.
Best rule is: B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.03492639156960506
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1078
Rule0: A --> F , A BEFORE F, weight=0.2343
Rule1: C --> F , C BEFORE F, weight=0.3929
Rule2: Not C --> F , Not C BEFORE F, weight=0.4773
Rule3: B --> F , B EQUAL F, weight=0.0653
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2673
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0862
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0454
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0100
Rule8: B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 19.6071 sec.
[1 th iter] Elapsed: 17.4371 sec.
[2 th iter] Elapsed: 19.0949 sec.
3 th iter
grad norm=0.036471914069221824. num_batch_no_update =257
Head = F, base = 0.1024
Rule0: A --> F , A BEFORE F, weight=0.2239
Rule1: C --> F , C BEFORE F, weight=0.3912
Rule2: Not C --> F , Not C BEFORE F, weight=0.4626
Rule3: B --> F , B EQUAL F, weight=0.0684
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2896
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0800
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0476
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0002
Rule8: B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F, weight=0.0007
[3 th iter] Elapsed: 21.9913 sec.
Run 793 batches
grad norm 0.03939202878929034 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.327698474415723
Params  [tensor([0.1058], dtype=torch.float64, requires_grad=True), tensor([0.2268], dtype=torch.float64, requires_grad=True), tensor([0.3921], dtype=torch.float64, requires_grad=True), tensor([0.4642], dtype=torch.float64, requires_grad=True), tensor([0.0688], dtype=torch.float64, requires_grad=True), tensor([0.2912], dtype=torch.float64, requires_grad=True), tensor([0.0796], dtype=torch.float64, requires_grad=True), tensor([0.0477], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0010], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3023 min.
Update Log-likelihood (torch)=  -5.327698474415723
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1058,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2268.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3921.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4642.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0688.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2912.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0796.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0477.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0002.
Rule8: B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F, weight(torch)=0.0010.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1058
Rule0: A --> F , A BEFORE F, weight=0.2268
Rule1: C --> F , C BEFORE F, weight=0.3921
Rule2: Not C --> F , Not C BEFORE F, weight=0.4642
Rule3: B --> F , B EQUAL F, weight=0.0688
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2912
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0796
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0477
[0 th iter] Elapsed: 17.3471 sec.
[1 th iter] Elapsed: 17.3899 sec.
Run 301 batches
grad norm 0.07636884097245382 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.196499427712944
Params  [tensor([0.1042], dtype=torch.float64, requires_grad=True), tensor([0.2262], dtype=torch.float64, requires_grad=True), tensor([0.3929], dtype=torch.float64, requires_grad=True), tensor([0.4580], dtype=torch.float64, requires_grad=True), tensor([0.0600], dtype=torch.float64, requires_grad=True), tensor([0.2952], dtype=torch.float64, requires_grad=True), tensor([0.0773], dtype=torch.float64, requires_grad=True), tensor([0.0508], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.7418 sec.
update Log-likelihood (torch)=  -5.196499427712944
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1042,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2262.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3929.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4580.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0600.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2952.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0773.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0508.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 8 workers, process 8 candidate rules.
[multiprocess log-grad] Elapsed: 34.4856 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03838, std=1.09750, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03542, std=1.02459, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03176, std=0.61982, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02533, std=0.44146, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02374, std=0.46660, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01961, std=0.58658, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01433, std=0.47280, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00789, std=0.46679, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.03837649962164974
new rule added.
Best rule is: Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.035416076399340406
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1042
Rule0: A --> F , A BEFORE F, weight=0.2262
Rule1: C --> F , C BEFORE F, weight=0.3929
Rule2: Not C --> F , Not C BEFORE F, weight=0.4580
Rule3: B --> F , B EQUAL F, weight=0.0600
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2952
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0773
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0508
Rule7: E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F, weight=0.0100
Rule8: Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 19.0952 sec.
[1 th iter] Elapsed: 15.6857 sec.
[2 th iter] Elapsed: 16.5783 sec.
Run 634 batches
grad norm 0.07631365431824036 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.573721462814037
Params  [tensor([0.1153], dtype=torch.float64, requires_grad=True), tensor([0.2187], dtype=torch.float64, requires_grad=True), tensor([0.3983], dtype=torch.float64, requires_grad=True), tensor([0.4511], dtype=torch.float64, requires_grad=True), tensor([0.0656], dtype=torch.float64, requires_grad=True), tensor([0.3074], dtype=torch.float64, requires_grad=True), tensor([0.0703], dtype=torch.float64, requires_grad=True), tensor([0.0421], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 51.3649 sec.
Update Log-likelihood (torch)=  -5.573721462814037
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1153,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2187.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3983.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4511.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0656.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3074.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0703.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0421.
Rule7: E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F, weight(torch)=-0.0003.
Rule8: Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F, weight(torch)=-0.0002.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1153
Rule0: A --> F , A BEFORE F, weight=0.2187
Rule1: C --> F , C BEFORE F, weight=0.3983
Rule2: Not C --> F , Not C BEFORE F, weight=0.4511
Rule3: B --> F , B EQUAL F, weight=0.0656
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3074
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0703
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0421
[0 th iter] Elapsed: 13.0867 sec.
[1 th iter] Elapsed: 13.8165 sec.
[2 th iter] Elapsed: 13.5563 sec.
Run 621 batches
grad norm 0.05667756631034964 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.524573933255659
Params  [tensor([0.1126], dtype=torch.float64, requires_grad=True), tensor([0.2152], dtype=torch.float64, requires_grad=True), tensor([0.4063], dtype=torch.float64, requires_grad=True), tensor([0.4383], dtype=torch.float64, requires_grad=True), tensor([0.0607], dtype=torch.float64, requires_grad=True), tensor([0.3221], dtype=torch.float64, requires_grad=True), tensor([0.0715], dtype=torch.float64, requires_grad=True), tensor([0.0521], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 40.4676 sec.
update Log-likelihood (torch)=  -5.524573933255659
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1126,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2152.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4063.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4383.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0607.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3221.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0715.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0521.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 5 workers, process 5 candidate rules.
[multiprocess log-grad] Elapsed: 26.8807 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03071, std=0.62237, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02454, std=0.44461, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02268, std=0.46980, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01797, std=0.58933, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01325, std=0.47603, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.030713272540114644
new rule added.
Best rule is: D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.02454125707007198
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1126
Rule0: A --> F , A BEFORE F, weight=0.2152
Rule1: C --> F , C BEFORE F, weight=0.4063
Rule2: Not C --> F , Not C BEFORE F, weight=0.4383
Rule3: B --> F , B EQUAL F, weight=0.0607
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3221
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0715
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0521
Rule7: E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F, weight=0.0100
Rule8: D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 20.4658 sec.
[1 th iter] Elapsed: 17.5056 sec.
[2 th iter] Elapsed: 17.2220 sec.
Run 738 batches
grad norm 0.05177476025723817 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.680548234710712
Params  [tensor([0.1112], dtype=torch.float64, requires_grad=True), tensor([0.2151], dtype=torch.float64, requires_grad=True), tensor([0.4159], dtype=torch.float64, requires_grad=True), tensor([0.4352], dtype=torch.float64, requires_grad=True), tensor([0.0673], dtype=torch.float64, requires_grad=True), tensor([0.3296], dtype=torch.float64, requires_grad=True), tensor([0.0649], dtype=torch.float64, requires_grad=True), tensor([0.0576], dtype=torch.float64, requires_grad=True), tensor([-0.0001], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 55.1996 sec.
Update Log-likelihood (torch)=  -5.680548234710712
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1112,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2151.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4159.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4352.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0673.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3296.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0649.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0576.
Rule7: E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F, weight(torch)=-0.0001.
Rule8: D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F, weight(torch)=-0.0003.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1112
Rule0: A --> F , A BEFORE F, weight=0.2151
Rule1: C --> F , C BEFORE F, weight=0.4159
Rule2: Not C --> F , Not C BEFORE F, weight=0.4352
Rule3: B --> F , B EQUAL F, weight=0.0673
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3296
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0649
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0576
[0 th iter] Elapsed: 14.5925 sec.
[1 th iter] Elapsed: 14.5071 sec.
Run 303 batches
grad norm 0.04516323801082631 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.246902670461454
Params  [tensor([0.1134], dtype=torch.float64, requires_grad=True), tensor([0.2092], dtype=torch.float64, requires_grad=True), tensor([0.4185], dtype=torch.float64, requires_grad=True), tensor([0.4229], dtype=torch.float64, requires_grad=True), tensor([0.0744], dtype=torch.float64, requires_grad=True), tensor([0.3273], dtype=torch.float64, requires_grad=True), tensor([0.0609], dtype=torch.float64, requires_grad=True), tensor([0.0526], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 29.1049 sec.
update Log-likelihood (torch)=  -5.246902670461454
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1134,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2092.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4185.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4229.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0744.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3273.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0609.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0526.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 3 workers, process 3 candidate rules.
[multiprocess log-grad] Elapsed: 44.5911 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02763, std=0.46543, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02166, std=0.58705, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01796, std=0.47293, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.027627627340800723
new rule added.
Best rule is: Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.021657190757531957
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1134
Rule0: A --> F , A BEFORE F, weight=0.2092
Rule1: C --> F , C BEFORE F, weight=0.4185
Rule2: Not C --> F , Not C BEFORE F, weight=0.4229
Rule3: B --> F , B EQUAL F, weight=0.0744
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3273
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0609
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0526
Rule7: Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F, weight=0.0100
Rule8: Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 25.7847 sec.
[1 th iter] Elapsed: 28.1184 sec.
Run 301 batches
grad norm 0.08214393579284897 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.637213314773577
Params  [tensor([0.1082], dtype=torch.float64, requires_grad=True), tensor([0.2068], dtype=torch.float64, requires_grad=True), tensor([0.4176], dtype=torch.float64, requires_grad=True), tensor([0.4162], dtype=torch.float64, requires_grad=True), tensor([0.0804], dtype=torch.float64, requires_grad=True), tensor([0.3392], dtype=torch.float64, requires_grad=True), tensor([0.0615], dtype=torch.float64, requires_grad=True), tensor([0.0541], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0007], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.9176 sec.
Update Log-likelihood (torch)=  -5.637213314773577
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1082,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2068.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4176.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4162.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0804.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3392.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0615.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0541.
Rule7: Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0002.
Rule8: Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F, weight(torch)=0.0007.
delete these rules: [7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1082
Rule0: A --> F , A BEFORE F, weight=0.2068
Rule1: C --> F , C BEFORE F, weight=0.4176
Rule2: Not C --> F , Not C BEFORE F, weight=0.4162
Rule3: B --> F , B EQUAL F, weight=0.0804
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3392
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0615
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0541
[0 th iter] Elapsed: 23.4484 sec.
[1 th iter] Elapsed: 23.8219 sec.
[2 th iter] Elapsed: 23.8083 sec.
3 th iter
grad norm=0.054021967494750765. num_batch_no_update =290
Head = F, base = 0.1077
Rule0: A --> F , A BEFORE F, weight=0.2042
Rule1: C --> F , C BEFORE F, weight=0.4287
Rule2: Not C --> F , Not C BEFORE F, weight=0.4162
Rule3: B --> F , B EQUAL F, weight=0.0764
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3486
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0554
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0673
[3 th iter] Elapsed: 21.2339 sec.
Run 760 batches
grad norm 0.10361397670720315 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.464053624697821
Params  [tensor([0.1078], dtype=torch.float64, requires_grad=True), tensor([0.2009], dtype=torch.float64, requires_grad=True), tensor([0.4322], dtype=torch.float64, requires_grad=True), tensor([0.4105], dtype=torch.float64, requires_grad=True), tensor([0.0729], dtype=torch.float64, requires_grad=True), tensor([0.3493], dtype=torch.float64, requires_grad=True), tensor([0.0510], dtype=torch.float64, requires_grad=True), tensor([0.0651], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.5389 min.
update Log-likelihood (torch)=  -5.464053624697821
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1077,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2026.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4304.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4133.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0747.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3489.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0532.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0662.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 1 workers, process 1 candidate rules.
[multiprocess log-grad] Elapsed: 32.7324 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.00970, std=0.47862, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
best gain 0.009698210197762378 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: C --> F , C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 32 candidate rules.
[multiprocess log-grad] Elapsed: 2.2121 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.35782, std=1.80959, Rule = A ^ C --> F , A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.26021, std=0.62373, Rule = B ^ C --> F , B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.25599, std=1.76103, Rule = Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.21517, std=1.97679, Rule = D ^ C --> F , D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.20791, std=1.90944, Rule = Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.18866, std=1.89005, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17958, std=1.95760, Rule = Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.15915, std=2.01214, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.15150, std=0.95872, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13724, std=0.89627, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11152, std=1.01106, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09628, std=0.95941, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08656, std=0.98361, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07566, std=1.02234, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07356, std=2.03663, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07212, std=0.42315, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07185, std=0.99612, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06791, std=1.04221, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05708, std=0.40209, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04428, std=0.65899, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03876, std=0.46051, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03458, std=0.49387, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03150, std=0.46393, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03074, std=0.46157, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02825, std=0.49188, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02496, std=0.61192, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01478, std=0.63256, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01214, std=0.46144, Rule = Not E ^ C --> F , Not E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00440, std=0.57502, Rule = D ^ C --> F , D EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00274, std=0.62757, Rule = Not B ^ C --> F , Not B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00775, std=0.64437, Rule = A ^ C --> F , A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00808, std=0.65439, Rule = Not D ^ C --> F , Not D EQUAL F ^ C BEFORE F
-------------
Best rule is: A ^ C --> F , A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.3578171588366576
new rule added.
Best rule is: B ^ C --> F , B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.2602085983570536
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1077
Rule0: A --> F , A BEFORE F, weight=0.2026
Rule1: C --> F , C BEFORE F, weight=0.4304
Rule2: Not C --> F , Not C BEFORE F, weight=0.4133
Rule3: B --> F , B EQUAL F, weight=0.0747
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3489
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0532
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0662
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.0100
Rule8: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 26.9727 sec.
[1 th iter] Elapsed: 27.9076 sec.
Run 301 batches
grad norm 0.11209763101651182 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.6189010367969825
Params  [tensor([0.1145], dtype=torch.float64, requires_grad=True), tensor([0.1933], dtype=torch.float64, requires_grad=True), tensor([0.4288], dtype=torch.float64, requires_grad=True), tensor([0.4027], dtype=torch.float64, requires_grad=True), tensor([0.0726], dtype=torch.float64, requires_grad=True), tensor([0.3485], dtype=torch.float64, requires_grad=True), tensor([0.0464], dtype=torch.float64, requires_grad=True), tensor([0.0640], dtype=torch.float64, requires_grad=True), tensor([0.0364], dtype=torch.float64, requires_grad=True), tensor([0.0108], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 54.8866 sec.
Update Log-likelihood (torch)=  -5.6189010367969825
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1145,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1933.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4288.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4027.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0726.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3485.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0464.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0640.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.0364.
Rule8: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.0108.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 2.1060 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.23499, std=1.78295, Rule = Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.19949, std=1.99540, Rule = D ^ C --> F , D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.19513, std=1.92292, Rule = Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17565, std=1.90878, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16811, std=1.96710, Rule = Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14444, std=2.02499, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13519, std=0.97251, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12401, std=0.90843, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10057, std=1.01988, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08687, std=0.96765, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07692, std=0.98990, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06488, std=0.43046, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06443, std=1.03133, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06177, std=1.00503, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05995, std=2.05045, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05650, std=1.04935, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05274, std=0.40534, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04184, std=0.66189, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03623, std=0.46204, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03153, std=0.49634, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02837, std=0.46700, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02769, std=0.46724, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02458, std=0.49697, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02127, std=0.61519, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01269, std=0.63372, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00957, std=0.46348, Rule = Not E ^ C --> F , Not E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00253, std=0.57700, Rule = D ^ C --> F , D EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00082, std=0.62911, Rule = Not B ^ C --> F , Not B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00769, std=0.64575, Rule = A ^ C --> F , A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01011, std=0.65859, Rule = Not D ^ C --> F , Not D EQUAL F ^ C BEFORE F
-------------
Best rule is: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.234988370240367
new rule added.
Best rule is: D ^ C --> F , D BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.1994917610419655
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1145
Rule0: A --> F , A BEFORE F, weight=0.1933
Rule1: C --> F , C BEFORE F, weight=0.4288
Rule2: Not C --> F , Not C BEFORE F, weight=0.4027
Rule3: B --> F , B EQUAL F, weight=0.0726
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3485
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0464
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0640
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.0364
Rule8: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0108
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0100
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 32.9661 sec.
[1 th iter] Elapsed: 31.9923 sec.
Run 303 batches
grad norm 0.053228995885432596 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.143127908067733
Params  [tensor([0.1086], dtype=torch.float64, requires_grad=True), tensor([0.1855], dtype=torch.float64, requires_grad=True), tensor([0.4218], dtype=torch.float64, requires_grad=True), tensor([0.3880], dtype=torch.float64, requires_grad=True), tensor([0.0664], dtype=torch.float64, requires_grad=True), tensor([0.3460], dtype=torch.float64, requires_grad=True), tensor([0.0372], dtype=torch.float64, requires_grad=True), tensor([0.0572], dtype=torch.float64, requires_grad=True), tensor([0.0581], dtype=torch.float64, requires_grad=True), tensor([0.0059], dtype=torch.float64, requires_grad=True), tensor([0.0222], dtype=torch.float64, requires_grad=True), tensor([0.0110], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0831 min.
Update Log-likelihood (torch)=  -5.143127908067733
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1086,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1855.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4218.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3880.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0664.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3460.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0372.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0572.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.0581.
Rule8: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.0059.
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0222.
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0110.
delete these rules: [8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1086
Rule0: A --> F , A BEFORE F, weight=0.1855
Rule1: C --> F , C BEFORE F, weight=0.4218
Rule2: Not C --> F , Not C BEFORE F, weight=0.3880
Rule3: B --> F , B EQUAL F, weight=0.0664
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3460
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0372
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0572
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.0581
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0222
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0110
[0 th iter] Elapsed: 28.9255 sec.
[1 th iter] Elapsed: 28.3717 sec.
[2 th iter] Elapsed: 31.6554 sec.
3 th iter
grad norm=0.09710600325880435. num_batch_no_update =238
Head = F, base = 0.1057
Rule0: A --> F , A BEFORE F, weight=0.1660
Rule1: C --> F , C BEFORE F, weight=0.4145
Rule2: Not C --> F , Not C BEFORE F, weight=0.3793
Rule3: B --> F , B EQUAL F, weight=0.0715
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3468
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0306
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0553
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.0812
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0331
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0191
[3 th iter] Elapsed: 30.3918 sec.
Run 812 batches
grad norm 0.0590543152921027 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.292896370820467
Params  [tensor([0.1089], dtype=torch.float64, requires_grad=True), tensor([0.1658], dtype=torch.float64, requires_grad=True), tensor([0.4104], dtype=torch.float64, requires_grad=True), tensor([0.3807], dtype=torch.float64, requires_grad=True), tensor([0.0769], dtype=torch.float64, requires_grad=True), tensor([0.3515], dtype=torch.float64, requires_grad=True), tensor([0.0292], dtype=torch.float64, requires_grad=True), tensor([0.0598], dtype=torch.float64, requires_grad=True), tensor([0.0908], dtype=torch.float64, requires_grad=True), tensor([0.0346], dtype=torch.float64, requires_grad=True), tensor([0.0185], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.9894 min.
update Log-likelihood (torch)=  -5.292896370820467
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1089,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1658.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4104.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3807.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0769.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3515.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0292.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0598.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.0908.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0346.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0185.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 24 candidate rules.
[multiprocess log-grad] Elapsed: 1.9026 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.16195, std=1.92537, Rule = Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13855, std=1.96295, Rule = Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12787, std=1.93727, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11270, std=2.02544, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09837, std=0.99593, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08947, std=0.93131, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07019, std=1.03267, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05804, std=0.97948, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05322, std=0.44148, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05309, std=0.99420, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04154, std=0.40929, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03930, std=1.03832, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03740, std=0.66772, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03710, std=1.01266, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03223, std=1.05226, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03173, std=0.46046, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02722, std=0.49577, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02672, std=2.05207, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02438, std=0.46659, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01938, std=0.47959, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01769, std=0.61672, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01533, std=0.50448, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00904, std=0.63420, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00507, std=0.46223, Rule = Not E ^ C --> F , Not E EQUAL C ^ C BEFORE F
-------------
Best rule is: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.161949004601426
new rule added.
Best rule is: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.13854523316158218
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1089
Rule0: A --> F , A BEFORE F, weight=0.1658
Rule1: C --> F , C BEFORE F, weight=0.4104
Rule2: Not C --> F , Not C BEFORE F, weight=0.3807
Rule3: B --> F , B EQUAL F, weight=0.0769
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3515
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0292
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0598
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.0908
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0346
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0185
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 34.4178 sec.
[1 th iter] Elapsed: 37.9242 sec.
Run 490 batches
grad norm 0.05817881433488882 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.560922793248447
Params  [tensor([0.1150], dtype=torch.float64, requires_grad=True), tensor([0.1569], dtype=torch.float64, requires_grad=True), tensor([0.3941], dtype=torch.float64, requires_grad=True), tensor([0.3692], dtype=torch.float64, requires_grad=True), tensor([0.0759], dtype=torch.float64, requires_grad=True), tensor([0.3488], dtype=torch.float64, requires_grad=True), tensor([0.0185], dtype=torch.float64, requires_grad=True), tensor([0.0550], dtype=torch.float64, requires_grad=True), tensor([0.1060], dtype=torch.float64, requires_grad=True), tensor([0.0347], dtype=torch.float64, requires_grad=True), tensor([0.0209], dtype=torch.float64, requires_grad=True), tensor([0.0031], dtype=torch.float64, requires_grad=True), tensor([0.0108], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2059 min.
Update Log-likelihood (torch)=  -5.560922793248447
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1150,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1569.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3941.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3692.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0759.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3488.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0185.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0550.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1060.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0347.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0209.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0031.
Rule11: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight(torch)=0.0108.
delete these rules: [10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1150
Rule0: A --> F , A BEFORE F, weight=0.1569
Rule1: C --> F , C BEFORE F, weight=0.3941
Rule2: Not C --> F , Not C BEFORE F, weight=0.3692
Rule3: B --> F , B EQUAL F, weight=0.0759
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3488
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0185
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0550
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1060
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0347
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0209
Rule10: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0108
[0 th iter] Elapsed: 27.1351 sec.
[1 th iter] Elapsed: 20.2099 sec.
Run 301 batches
grad norm 0.03592263260686611 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.356568764491998
Params  [tensor([0.1162], dtype=torch.float64, requires_grad=True), tensor([0.1549], dtype=torch.float64, requires_grad=True), tensor([0.3862], dtype=torch.float64, requires_grad=True), tensor([0.3605], dtype=torch.float64, requires_grad=True), tensor([0.0785], dtype=torch.float64, requires_grad=True), tensor([0.3479], dtype=torch.float64, requires_grad=True), tensor([0.0141], dtype=torch.float64, requires_grad=True), tensor([0.0570], dtype=torch.float64, requires_grad=True), tensor([0.1252], dtype=torch.float64, requires_grad=True), tensor([0.0411], dtype=torch.float64, requires_grad=True), tensor([0.0244], dtype=torch.float64, requires_grad=True), tensor([0.0138], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 47.4304 sec.
update Log-likelihood (torch)=  -5.356568764491998
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1162,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1549.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3862.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3605.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0785.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3479.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0141.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0570.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1252.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0411.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0244.
Rule10: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight(torch)=0.0138.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 21 candidate rules.
[multiprocess log-grad] Elapsed: 1.1913 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.18178, std=1.92682, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16616, std=2.01069, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11413, std=0.99541, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10434, std=0.93023, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09109, std=1.02633, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08796, std=2.03140, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07798, std=0.97263, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07090, std=0.98861, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06229, std=1.03084, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05771, std=1.00579, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05523, std=0.44329, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05230, std=1.04626, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04503, std=0.40755, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04387, std=0.66667, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03794, std=0.45641, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03265, std=0.49353, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03085, std=0.46415, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02400, std=0.47971, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02267, std=0.61549, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02086, std=0.50242, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01692, std=0.63101, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
Best rule is: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.18178250398829343
new rule added.
Best rule is: E ^ C --> F , E BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.166160397635888
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1162
Rule0: A --> F , A BEFORE F, weight=0.1549
Rule1: C --> F , C BEFORE F, weight=0.3862
Rule2: Not C --> F , Not C BEFORE F, weight=0.3605
Rule3: B --> F , B EQUAL F, weight=0.0785
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3479
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0141
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0570
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1252
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0411
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0244
Rule10: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0138
Rule11: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F, weight=0.0100
Rule12: E ^ C --> F , E BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 24.7758 sec.
[1 th iter] Elapsed: 26.3359 sec.
[2 th iter] Elapsed: 23.7281 sec.
Run 562 batches
grad norm 0.033747504743416916 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.190792149728662
Params  [tensor([0.1152], dtype=torch.float64, requires_grad=True), tensor([0.1460], dtype=torch.float64, requires_grad=True), tensor([0.3633], dtype=torch.float64, requires_grad=True), tensor([0.3575], dtype=torch.float64, requires_grad=True), tensor([0.0845], dtype=torch.float64, requires_grad=True), tensor([0.3495], dtype=torch.float64, requires_grad=True), tensor([0.0141], dtype=torch.float64, requires_grad=True), tensor([0.0626], dtype=torch.float64, requires_grad=True), tensor([0.1381], dtype=torch.float64, requires_grad=True), tensor([0.0424], dtype=torch.float64, requires_grad=True), tensor([0.0180], dtype=torch.float64, requires_grad=True), tensor([0.0099], dtype=torch.float64, requires_grad=True), tensor([0.0006], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2479 min.
Update Log-likelihood (torch)=  -5.190792149728662
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1152,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1460.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3633.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3575.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0845.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3495.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0141.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0626.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1381.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0424.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0180.
Rule10: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight(torch)=0.0099.
Rule11: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F, weight(torch)=0.0006.
Rule12: E ^ C --> F , E BEFORE F ^ C BEFORE F, weight(torch)=0.0002.
delete these rules: [10, 11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1152
Rule0: A --> F , A BEFORE F, weight=0.1460
Rule1: C --> F , C BEFORE F, weight=0.3633
Rule2: Not C --> F , Not C BEFORE F, weight=0.3575
Rule3: B --> F , B EQUAL F, weight=0.0845
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3495
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0141
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0626
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1381
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0424
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0180
[0 th iter] Elapsed: 21.1502 sec.
[1 th iter] Elapsed: 21.5608 sec.
Run 455 batches
grad norm 0.04746773757010032 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.142933751479417
Params  [tensor([0.1177], dtype=torch.float64, requires_grad=True), tensor([0.1434], dtype=torch.float64, requires_grad=True), tensor([0.3678], dtype=torch.float64, requires_grad=True), tensor([0.3647], dtype=torch.float64, requires_grad=True), tensor([0.0889], dtype=torch.float64, requires_grad=True), tensor([0.3619], dtype=torch.float64, requires_grad=True), tensor([0.0197], dtype=torch.float64, requires_grad=True), tensor([0.0697], dtype=torch.float64, requires_grad=True), tensor([0.1630], dtype=torch.float64, requires_grad=True), tensor([0.0560], dtype=torch.float64, requires_grad=True), tensor([0.0336], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 42.7172 sec.
update Log-likelihood (torch)=  -5.142933751479417
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1177,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1434.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3678.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3647.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0889.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3619.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0197.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0697.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1630.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0560.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0336.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 19 candidate rules.
[multiprocess log-grad] Elapsed: 1.1443 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04616, std=1.05205, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04154, std=0.98655, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03492, std=0.46962, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02985, std=1.06808, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02837, std=0.68043, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02708, std=0.42215, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02458, std=0.46681, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02002, std=1.01295, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01885, std=0.50552, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01845, std=0.47200, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01512, std=1.02761, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00892, std=0.62493, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00886, std=0.50481, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00354, std=0.52326, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00285, std=0.63874, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00280, std=1.06908, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00172, std=1.04417, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00736, std=1.08721, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03322, std=2.10024, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
Best rule is: A ^ C --> F , A BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.046160583615510335
new rule added.
Best rule is: Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.04154283791603686
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1177
Rule0: A --> F , A BEFORE F, weight=0.1434
Rule1: C --> F , C BEFORE F, weight=0.3678
Rule2: Not C --> F , Not C BEFORE F, weight=0.3647
Rule3: B --> F , B EQUAL F, weight=0.0889
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3619
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0197
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0697
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1630
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0560
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0336
Rule10: A ^ C --> F , A BEFORE C ^ C BEFORE F, weight=0.0100
Rule11: Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 28.9395 sec.
[1 th iter] Elapsed: 28.6425 sec.
Run 306 batches
grad norm 0.09536406645071661 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.448821626818271
Params  [tensor([0.1206], dtype=torch.float64, requires_grad=True), tensor([0.1376], dtype=torch.float64, requires_grad=True), tensor([0.3534], dtype=torch.float64, requires_grad=True), tensor([0.3514], dtype=torch.float64, requires_grad=True), tensor([0.0902], dtype=torch.float64, requires_grad=True), tensor([0.3532], dtype=torch.float64, requires_grad=True), tensor([0.0129], dtype=torch.float64, requires_grad=True), tensor([0.0632], dtype=torch.float64, requires_grad=True), tensor([0.1679], dtype=torch.float64, requires_grad=True), tensor([0.0551], dtype=torch.float64, requires_grad=True), tensor([0.0251], dtype=torch.float64, requires_grad=True), tensor([0.0001], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 57.6075 sec.
Update Log-likelihood (torch)=  -5.448821626818271
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1206,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1376.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3534.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3514.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0902.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3532.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0129.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0632.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1679.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0551.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0251.
Rule10: A ^ C --> F , A BEFORE C ^ C BEFORE F, weight(torch)=0.0001.
Rule11: Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F, weight(torch)=0.0002.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1206
Rule0: A --> F , A BEFORE F, weight=0.1376
Rule1: C --> F , C BEFORE F, weight=0.3534
Rule2: Not C --> F , Not C BEFORE F, weight=0.3514
Rule3: B --> F , B EQUAL F, weight=0.0902
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3532
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0129
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0632
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1679
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0551
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0251
[0 th iter] Elapsed: 25.3654 sec.
[1 th iter] Elapsed: 25.7405 sec.
[2 th iter] Elapsed: 24.7278 sec.
3 th iter
grad norm=0.05273914459822139. num_batch_no_update =28
Head = F, base = 0.1111
Rule0: A --> F , A BEFORE F, weight=0.1312
Rule1: C --> F , C BEFORE F, weight=0.3460
Rule2: Not C --> F , Not C BEFORE F, weight=0.3550
Rule3: B --> F , B EQUAL F, weight=0.1041
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3590
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0115
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0777
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1830
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0585
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0334
[3 th iter] Elapsed: 23.0922 sec.
[4 th iter] Elapsed: 22.2501 sec.
Run 1022 batches
grad norm 0.05087997133821877 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.441527326555399
Params  [tensor([0.1143], dtype=torch.float64, requires_grad=True), tensor([0.1265], dtype=torch.float64, requires_grad=True), tensor([0.3405], dtype=torch.float64, requires_grad=True), tensor([0.3549], dtype=torch.float64, requires_grad=True), tensor([0.1047], dtype=torch.float64, requires_grad=True), tensor([0.3627], dtype=torch.float64, requires_grad=True), tensor([0.0056], dtype=torch.float64, requires_grad=True), tensor([0.0781], dtype=torch.float64, requires_grad=True), tensor([0.1932], dtype=torch.float64, requires_grad=True), tensor([0.0580], dtype=torch.float64, requires_grad=True), tensor([0.0285], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.0204 min.
update Log-likelihood (torch)=  -5.441527326555399
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1143,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1265.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3405.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3549.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1047.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3627.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0056.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0781.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1932.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0580.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0285.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 16 candidate rules.
[multiprocess log-grad] Elapsed: 55.9392 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.08184, std=1.03814, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08009, std=2.04168, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06811, std=0.98395, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06136, std=1.00129, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05464, std=1.04074, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04858, std=1.01705, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04590, std=0.46172, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04388, std=1.06041, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04233, std=0.67193, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03849, std=0.41300, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03701, std=0.45704, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03270, std=0.49536, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03181, std=0.46302, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02196, std=0.49168, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02019, std=0.61910, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01916, std=0.50851, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
Best rule is: D ^ C --> F , D BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.08184161988654885
new rule added.
Best rule is: B ^ C --> F , B BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.08009350541319464
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1143
Rule0: A --> F , A BEFORE F, weight=0.1265
Rule1: C --> F , C BEFORE F, weight=0.3405
Rule2: Not C --> F , Not C BEFORE F, weight=0.3549
Rule3: B --> F , B EQUAL F, weight=0.1047
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3627
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0056
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0781
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1932
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0580
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0285
Rule10: D ^ C --> F , D BEFORE C ^ C BEFORE F, weight=0.0100
Rule11: B ^ C --> F , B BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 29.9103 sec.
[1 th iter] Elapsed: 30.2524 sec.
Run 343 batches
grad norm 0.051459325482528295 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.275765273991132
Params  [tensor([0.1087], dtype=torch.float64, requires_grad=True), tensor([0.1222], dtype=torch.float64, requires_grad=True), tensor([0.3367], dtype=torch.float64, requires_grad=True), tensor([0.3551], dtype=torch.float64, requires_grad=True), tensor([0.1073], dtype=torch.float64, requires_grad=True), tensor([0.3641], dtype=torch.float64, requires_grad=True), tensor([0.0044], dtype=torch.float64, requires_grad=True), tensor([0.0849], dtype=torch.float64, requires_grad=True), tensor([0.2070], dtype=torch.float64, requires_grad=True), tensor([0.0663], dtype=torch.float64, requires_grad=True), tensor([0.0292], dtype=torch.float64, requires_grad=True), tensor([0.0004], dtype=torch.float64, requires_grad=True), tensor([7.0020e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0028 min.
Update Log-likelihood (torch)=  -5.275765273991132
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1087,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1222.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3367.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3551.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1073.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3641.
Rule5: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0044.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0849.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2070.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0663.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0292.
Rule10: D ^ C --> F , D BEFORE C ^ C BEFORE F, weight(torch)=0.0004.
Rule11: B ^ C --> F , B BEFORE F ^ C BEFORE F, weight(torch)=0.0001.
delete these rules: [5, 10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1087
Rule0: A --> F , A BEFORE F, weight=0.1222
Rule1: C --> F , C BEFORE F, weight=0.3367
Rule2: Not C --> F , Not C BEFORE F, weight=0.3551
Rule3: B --> F , B EQUAL F, weight=0.1073
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3641
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0849
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2070
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0663
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0292
[0 th iter] Elapsed: 24.2365 sec.
[1 th iter] Elapsed: 19.1460 sec.
[2 th iter] Elapsed: 18.1411 sec.
Run 574 batches
grad norm 0.15947043858247753 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.818551684721825
Params  [tensor([0.1164], dtype=torch.float64, requires_grad=True), tensor([0.1067], dtype=torch.float64, requires_grad=True), tensor([0.3317], dtype=torch.float64, requires_grad=True), tensor([0.3585], dtype=torch.float64, requires_grad=True), tensor([0.1054], dtype=torch.float64, requires_grad=True), tensor([0.3590], dtype=torch.float64, requires_grad=True), tensor([0.0877], dtype=torch.float64, requires_grad=True), tensor([0.2243], dtype=torch.float64, requires_grad=True), tensor([0.0650], dtype=torch.float64, requires_grad=True), tensor([0.0308], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0255 min.
update Log-likelihood (torch)=  -5.818551684721825
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1164,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1067.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3317.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3585.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1054.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3590.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0877.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2243.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0650.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0308.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 14 workers, process 14 candidate rules.
[multiprocess log-grad] Elapsed: 40.2145 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04814, std=1.00060, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03958, std=0.47265, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03864, std=1.02328, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03728, std=0.67781, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03376, std=1.05717, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03311, std=0.41852, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03240, std=0.46203, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02886, std=1.03379, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02776, std=0.46635, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02683, std=0.50256, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01996, std=1.08406, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01674, std=0.50182, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01632, std=0.62308, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01345, std=0.51757, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
Best rule is: Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.04814028229322829
new rule added.
Best rule is: A ^ C --> F , A EQUAL C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.039576749923710165
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1164
Rule0: A --> F , A BEFORE F, weight=0.1067
Rule1: C --> F , C BEFORE F, weight=0.3317
Rule2: Not C --> F , Not C BEFORE F, weight=0.3585
Rule3: B --> F , B EQUAL F, weight=0.1054
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3590
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0877
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2243
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0650
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0308
Rule9: Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F, weight=0.0100
Rule10: A ^ C --> F , A EQUAL C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 21.8222 sec.
[1 th iter] Elapsed: 21.3129 sec.
Run 303 batches
grad norm 0.02745858248137359 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.08976759706713
Params  [tensor([0.1184], dtype=torch.float64, requires_grad=True), tensor([0.1069], dtype=torch.float64, requires_grad=True), tensor([0.3169], dtype=torch.float64, requires_grad=True), tensor([0.3575], dtype=torch.float64, requires_grad=True), tensor([0.1057], dtype=torch.float64, requires_grad=True), tensor([0.3582], dtype=torch.float64, requires_grad=True), tensor([0.0910], dtype=torch.float64, requires_grad=True), tensor([0.2344], dtype=torch.float64, requires_grad=True), tensor([0.0654], dtype=torch.float64, requires_grad=True), tensor([0.0311], dtype=torch.float64, requires_grad=True), tensor([-0.0005], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 43.1501 sec.
Update Log-likelihood (torch)=  -5.08976759706713
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1184,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1069.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3169.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3575.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1057.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3582.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0910.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2344.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0654.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0311.
Rule9: Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F, weight(torch)=-0.0005.
Rule10: A ^ C --> F , A EQUAL C ^ C BEFORE F, weight(torch)=0.0003.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1184
Rule0: A --> F , A BEFORE F, weight=0.1069
Rule1: C --> F , C BEFORE F, weight=0.3169
Rule2: Not C --> F , Not C BEFORE F, weight=0.3575
Rule3: B --> F , B EQUAL F, weight=0.1057
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3582
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0910
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2344
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0654
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0311
[0 th iter] Elapsed: 17.4852 sec.
[1 th iter] Elapsed: 18.1326 sec.
Run 301 batches
grad norm 0.06366485242149711 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.511180824519252
Params  [tensor([0.1243], dtype=torch.float64, requires_grad=True), tensor([0.1008], dtype=torch.float64, requires_grad=True), tensor([0.3103], dtype=torch.float64, requires_grad=True), tensor([0.3493], dtype=torch.float64, requires_grad=True), tensor([0.1115], dtype=torch.float64, requires_grad=True), tensor([0.3526], dtype=torch.float64, requires_grad=True), tensor([0.0849], dtype=torch.float64, requires_grad=True), tensor([0.2398], dtype=torch.float64, requires_grad=True), tensor([0.0631], dtype=torch.float64, requires_grad=True), tensor([0.0302], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 35.6566 sec.
update Log-likelihood (torch)=  -5.511180824519252
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1243,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1008.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3103.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3493.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1115.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3526.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0849.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2398.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0631.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0302.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 12 workers, process 12 candidate rules.
[multiprocess log-grad] Elapsed: 36.3313 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.08604, std=1.00045, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08340, std=1.03742, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07450, std=1.01446, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07128, std=1.05999, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05036, std=0.67171, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04431, std=0.45518, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04354, std=0.41268, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04035, std=0.49448, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03996, std=0.46167, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02856, std=0.49357, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02742, std=0.61851, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02687, std=0.50770, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
Best rule is: Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.08604480096557421
new rule added.
Best rule is: B ^ C --> F , B BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.08340297128844601
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1243
Rule0: A --> F , A BEFORE F, weight=0.1008
Rule1: C --> F , C BEFORE F, weight=0.3103
Rule2: Not C --> F , Not C BEFORE F, weight=0.3493
Rule3: B --> F , B EQUAL F, weight=0.1115
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3526
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0849
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2398
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0631
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0302
Rule9: Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F, weight=0.0100
Rule10: B ^ C --> F , B BEFORE C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 20.4832 sec.
[1 th iter] Elapsed: 20.6931 sec.
Run 301 batches
grad norm 0.026882942867033358 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.565102463597155
Params  [tensor([0.1128], dtype=torch.float64, requires_grad=True), tensor([0.1010], dtype=torch.float64, requires_grad=True), tensor([0.3100], dtype=torch.float64, requires_grad=True), tensor([0.3548], dtype=torch.float64, requires_grad=True), tensor([0.1176], dtype=torch.float64, requires_grad=True), tensor([0.3543], dtype=torch.float64, requires_grad=True), tensor([0.0880], dtype=torch.float64, requires_grad=True), tensor([0.2544], dtype=torch.float64, requires_grad=True), tensor([0.0673], dtype=torch.float64, requires_grad=True), tensor([0.0368], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([-0.0004], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 41.1826 sec.
Update Log-likelihood (torch)=  -5.565102463597155
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1128,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1010.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3100.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3548.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1176.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3543.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0880.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2544.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0673.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0368.
Rule9: Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F, weight(torch)=0.0002.
Rule10: B ^ C --> F , B BEFORE C ^ C BEFORE F, weight(torch)=-0.0004.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1128
Rule0: A --> F , A BEFORE F, weight=0.1010
Rule1: C --> F , C BEFORE F, weight=0.3100
Rule2: Not C --> F , Not C BEFORE F, weight=0.3548
Rule3: B --> F , B EQUAL F, weight=0.1176
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3543
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0880
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2544
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0673
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0368
[0 th iter] Elapsed: 17.8595 sec.
[1 th iter] Elapsed: 19.5749 sec.
Run 301 batches
grad norm 0.0471624664254004 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.4244044745630955
Params  [tensor([0.1114], dtype=torch.float64, requires_grad=True), tensor([0.1025], dtype=torch.float64, requires_grad=True), tensor([0.3007], dtype=torch.float64, requires_grad=True), tensor([0.3552], dtype=torch.float64, requires_grad=True), tensor([0.1188], dtype=torch.float64, requires_grad=True), tensor([0.3591], dtype=torch.float64, requires_grad=True), tensor([0.0886], dtype=torch.float64, requires_grad=True), tensor([0.2634], dtype=torch.float64, requires_grad=True), tensor([0.0623], dtype=torch.float64, requires_grad=True), tensor([0.0361], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 37.4398 sec.
update Log-likelihood (torch)=  -5.4244044745630955
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1114,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1025.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3007.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3552.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1188.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3591.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0886.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2634.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0623.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0361.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 10 workers, process 10 candidate rules.
[multiprocess log-grad] Elapsed: 44.8741 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03911, std=0.67804, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03453, std=0.45879, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03371, std=1.03166, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03213, std=0.41863, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03065, std=0.46337, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02975, std=0.49997, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02663, std=1.08125, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01772, std=0.50602, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01613, std=0.62336, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01478, std=0.51799, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
Best rule is: E ^ C --> F , E EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.039105910609508715
new rule added.
Best rule is: Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03453160690565252
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1114
Rule0: A --> F , A BEFORE F, weight=0.1025
Rule1: C --> F , C BEFORE F, weight=0.3007
Rule2: Not C --> F , Not C BEFORE F, weight=0.3552
Rule3: B --> F , B EQUAL F, weight=0.1188
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3591
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0886
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2634
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0623
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0361
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0100
Rule10: Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 26.8649 sec.
[1 th iter] Elapsed: 25.4512 sec.
Run 305 batches
grad norm 0.1051772647743952 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.620086504077227
Params  [tensor([0.1078], dtype=torch.float64, requires_grad=True), tensor([0.0995], dtype=torch.float64, requires_grad=True), tensor([0.2984], dtype=torch.float64, requires_grad=True), tensor([0.3620], dtype=torch.float64, requires_grad=True), tensor([0.1171], dtype=torch.float64, requires_grad=True), tensor([0.3565], dtype=torch.float64, requires_grad=True), tensor([0.0954], dtype=torch.float64, requires_grad=True), tensor([0.2737], dtype=torch.float64, requires_grad=True), tensor([0.0569], dtype=torch.float64, requires_grad=True), tensor([0.0409], dtype=torch.float64, requires_grad=True), tensor([0.0006], dtype=torch.float64, requires_grad=True), tensor([-8.2213e-06], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 52.3232 sec.
Update Log-likelihood (torch)=  -5.620086504077227
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1078,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0995.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2984.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3620.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1171.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3565.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0954.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2737.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0569.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0409.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0006.
Rule10: Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F, weight(torch)=-0.0000.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1078
Rule0: A --> F , A BEFORE F, weight=0.0995
Rule1: C --> F , C BEFORE F, weight=0.2984
Rule2: Not C --> F , Not C BEFORE F, weight=0.3620
Rule3: B --> F , B EQUAL F, weight=0.1171
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3565
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0954
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2737
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0569
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0409
[0 th iter] Elapsed: 16.5533 sec.
[1 th iter] Elapsed: 17.9263 sec.
Run 310 batches
grad norm 0.034362090795287806 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.297185538721363
Params  [tensor([0.1124], dtype=torch.float64, requires_grad=True), tensor([0.0942], dtype=torch.float64, requires_grad=True), tensor([0.2922], dtype=torch.float64, requires_grad=True), tensor([0.3595], dtype=torch.float64, requires_grad=True), tensor([0.1168], dtype=torch.float64, requires_grad=True), tensor([0.3542], dtype=torch.float64, requires_grad=True), tensor([0.0924], dtype=torch.float64, requires_grad=True), tensor([0.2836], dtype=torch.float64, requires_grad=True), tensor([0.0510], dtype=torch.float64, requires_grad=True), tensor([0.0432], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.4860 sec.
update Log-likelihood (torch)=  -5.297185538721363
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1124,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0942.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2922.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3595.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1168.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3542.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0924.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2836.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0510.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0432.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 8 workers, process 8 candidate rules.
[multiprocess log-grad] Elapsed: 31.1884 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03258, std=0.41869, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03140, std=1.03497, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03035, std=0.46418, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02879, std=0.50223, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02300, std=1.08662, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01626, std=0.50994, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01472, std=0.62496, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01276, std=0.52258, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
Best rule is: Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03258323364279607
new rule added.
Best rule is: Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03140352214191611
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1124
Rule0: A --> F , A BEFORE F, weight=0.0942
Rule1: C --> F , C BEFORE F, weight=0.2922
Rule2: Not C --> F , Not C BEFORE F, weight=0.3595
Rule3: B --> F , B EQUAL F, weight=0.1168
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3542
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0924
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2836
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0510
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0432
Rule9: Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F, weight=0.0100
Rule10: Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 20.6500 sec.
[1 th iter] Elapsed: 20.1797 sec.
[2 th iter] Elapsed: 20.1473 sec.
3 th iter
grad norm=0.05728182156894856. num_batch_no_update =219
Head = F, base = 0.1068
Rule0: A --> F , A BEFORE F, weight=0.0854
Rule1: C --> F , C BEFORE F, weight=0.2877
Rule2: Not C --> F , Not C BEFORE F, weight=0.3570
Rule3: B --> F , B EQUAL F, weight=0.1208
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3465
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0912
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2923
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0517
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0461
Rule9: Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F, weight=-0.0001
Rule10: Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F, weight=0.0001
[3 th iter] Elapsed: 19.1796 sec.
Run 831 batches
grad norm 0.0970144450175267 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.762880091394232
Params  [tensor([0.1037], dtype=torch.float64, requires_grad=True), tensor([0.0800], dtype=torch.float64, requires_grad=True), tensor([0.2841], dtype=torch.float64, requires_grad=True), tensor([0.3572], dtype=torch.float64, requires_grad=True), tensor([0.1119], dtype=torch.float64, requires_grad=True), tensor([0.3420], dtype=torch.float64, requires_grad=True), tensor([0.0870], dtype=torch.float64, requires_grad=True), tensor([0.2945], dtype=torch.float64, requires_grad=True), tensor([0.0479], dtype=torch.float64, requires_grad=True), tensor([0.0512], dtype=torch.float64, requires_grad=True), tensor([-6.2442e-05], dtype=torch.float64, requires_grad=True), tensor([-5.0529e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3370 min.
Update Log-likelihood (torch)=  -5.762880091394232
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1037,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0800.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2841.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3572.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1119.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3420.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0870.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2945.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0479.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0512.
Rule9: Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F, weight(torch)=-0.0001.
Rule10: Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F, weight(torch)=-0.0001.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1037
Rule0: A --> F , A BEFORE F, weight=0.0800
Rule1: C --> F , C BEFORE F, weight=0.2841
Rule2: Not C --> F , Not C BEFORE F, weight=0.3572
Rule3: B --> F , B EQUAL F, weight=0.1119
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3420
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0870
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2945
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0479
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0512
[0 th iter] Elapsed: 18.7754 sec.
[1 th iter] Elapsed: 17.2931 sec.
Run 307 batches
grad norm 0.030161465719922988 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.51970607483876
Params  [tensor([0.1102], dtype=torch.float64, requires_grad=True), tensor([0.0775], dtype=torch.float64, requires_grad=True), tensor([0.2856], dtype=torch.float64, requires_grad=True), tensor([0.3663], dtype=torch.float64, requires_grad=True), tensor([0.1134], dtype=torch.float64, requires_grad=True), tensor([0.3432], dtype=torch.float64, requires_grad=True), tensor([0.0914], dtype=torch.float64, requires_grad=True), tensor([0.3053], dtype=torch.float64, requires_grad=True), tensor([0.0559], dtype=torch.float64, requires_grad=True), tensor([0.0512], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 36.0757 sec.
update Log-likelihood (torch)=  -5.51970607483876
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1102,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0775.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2856.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3663.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1134.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3432.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0914.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3053.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0559.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0512.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 6 workers, process 6 candidate rules.
[multiprocess log-grad] Elapsed: 28.5999 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02842, std=0.46513, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02649, std=0.50440, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01383, std=0.62595, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01271, std=0.51765, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01225, std=1.09354, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00865, std=0.52905, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
Best rule is: B ^ C --> F , B EQUAL C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.028415662627880846
new rule added.
Best rule is: E ^ C --> F , E EQUAL C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.026488042587567023
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1102
Rule0: A --> F , A BEFORE F, weight=0.0775
Rule1: C --> F , C BEFORE F, weight=0.2856
Rule2: Not C --> F , Not C BEFORE F, weight=0.3663
Rule3: B --> F , B EQUAL F, weight=0.1134
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3432
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0914
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3053
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0559
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0512
Rule9: B ^ C --> F , B EQUAL C ^ C BEFORE F, weight=0.0100
Rule10: E ^ C --> F , E EQUAL C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 25.3431 sec.
[1 th iter] Elapsed: 24.1565 sec.
Run 301 batches
grad norm 0.0584872045608848 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.356602171759151
Params  [tensor([0.1089], dtype=torch.float64, requires_grad=True), tensor([0.0716], dtype=torch.float64, requires_grad=True), tensor([0.2788], dtype=torch.float64, requires_grad=True), tensor([0.3712], dtype=torch.float64, requires_grad=True), tensor([0.1111], dtype=torch.float64, requires_grad=True), tensor([0.3375], dtype=torch.float64, requires_grad=True), tensor([0.0926], dtype=torch.float64, requires_grad=True), tensor([0.3047], dtype=torch.float64, requires_grad=True), tensor([0.0484], dtype=torch.float64, requires_grad=True), tensor([0.0525], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0005], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 49.5092 sec.
Update Log-likelihood (torch)=  -5.356602171759151
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1089,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0716.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2788.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3712.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1111.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3375.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0926.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3047.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0484.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0525.
Rule9: B ^ C --> F , B EQUAL C ^ C BEFORE F, weight(torch)=-0.0002.
Rule10: E ^ C --> F , E EQUAL C ^ C BEFORE F, weight(torch)=0.0005.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1089
Rule0: A --> F , A BEFORE F, weight=0.0716
Rule1: C --> F , C BEFORE F, weight=0.2788
Rule2: Not C --> F , Not C BEFORE F, weight=0.3712
Rule3: B --> F , B EQUAL F, weight=0.1111
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3375
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0926
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3047
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0484
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0525
[0 th iter] Elapsed: 19.6173 sec.
[1 th iter] Elapsed: 17.6008 sec.
[2 th iter] Elapsed: 16.7373 sec.
3 th iter
grad norm=0.07110140844173127. num_batch_no_update =246
Head = F, base = 0.1125
Rule0: A --> F , A BEFORE F, weight=0.0703
Rule1: C --> F , C BEFORE F, weight=0.2736
Rule2: Not C --> F , Not C BEFORE F, weight=0.3674
Rule3: B --> F , B EQUAL F, weight=0.1159
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3393
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0865
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3188
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0493
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0499
[3 th iter] Elapsed: 16.9874 sec.
Run 804 batches
grad norm 0.05649044943956454 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.487939928553404
Params  [tensor([0.1106], dtype=torch.float64, requires_grad=True), tensor([0.0685], dtype=torch.float64, requires_grad=True), tensor([0.2737], dtype=torch.float64, requires_grad=True), tensor([0.3701], dtype=torch.float64, requires_grad=True), tensor([0.1168], dtype=torch.float64, requires_grad=True), tensor([0.3400], dtype=torch.float64, requires_grad=True), tensor([0.0915], dtype=torch.float64, requires_grad=True), tensor([0.3216], dtype=torch.float64, requires_grad=True), tensor([0.0458], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1831 min.
update Log-likelihood (torch)=  -5.487939928553404
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1106,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0685.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2737.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3701.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1168.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3400.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0915.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3216.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0458.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0518.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 3 workers, process 3 candidate rules.
[multiprocess log-grad] Elapsed: 24.9772 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03325, std=1.08288, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01782, std=0.62434, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01761, std=0.51291, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
Best rule is: E ^ C --> F , E BEFORE C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03324770396749308
new rule added.
best gain 0.01781963461723486 does not meet thershold 0.02.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1106
Rule0: A --> F , A BEFORE F, weight=0.0685
Rule1: C --> F , C BEFORE F, weight=0.2737
Rule2: Not C --> F , Not C BEFORE F, weight=0.3701
Rule3: B --> F , B EQUAL F, weight=0.1168
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3400
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0915
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3216
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0458
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0518
Rule9: E ^ C --> F , E BEFORE C ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 23.3407 sec.
[1 th iter] Elapsed: 24.2522 sec.
Run 301 batches
grad norm 0.04125900646669843 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.23731574613784
Params  [tensor([0.1092], dtype=torch.float64, requires_grad=True), tensor([0.0671], dtype=torch.float64, requires_grad=True), tensor([0.2730], dtype=torch.float64, requires_grad=True), tensor([0.3772], dtype=torch.float64, requires_grad=True), tensor([0.1092], dtype=torch.float64, requires_grad=True), tensor([0.3372], dtype=torch.float64, requires_grad=True), tensor([0.0968], dtype=torch.float64, requires_grad=True), tensor([0.3293], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True), tensor([0.0556], dtype=torch.float64, requires_grad=True), tensor([0.0004], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 47.5993 sec.
Update Log-likelihood (torch)=  -5.23731574613784
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1092,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0671.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2730.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3772.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1092.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3372.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0968.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3293.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0518.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0556.
Rule9: E ^ C --> F , E BEFORE C ^ C BEFORE F, weight(torch)=0.0004.
delete these rules: [9]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1092
Rule0: A --> F , A BEFORE F, weight=0.0671
Rule1: C --> F , C BEFORE F, weight=0.2730
Rule2: Not C --> F , Not C BEFORE F, weight=0.3772
Rule3: B --> F , B EQUAL F, weight=0.1092
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3372
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0968
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3293
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0518
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0556
[0 th iter] Elapsed: 21.6439 sec.
[1 th iter] Elapsed: 21.6146 sec.
Run 333 batches
grad norm 0.04500608727799407 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.4355083499552865
Params  [tensor([0.1131], dtype=torch.float64, requires_grad=True), tensor([0.0662], dtype=torch.float64, requires_grad=True), tensor([0.2624], dtype=torch.float64, requires_grad=True), tensor([0.3728], dtype=torch.float64, requires_grad=True), tensor([0.1086], dtype=torch.float64, requires_grad=True), tensor([0.3302], dtype=torch.float64, requires_grad=True), tensor([0.0971], dtype=torch.float64, requires_grad=True), tensor([0.3291], dtype=torch.float64, requires_grad=True), tensor([0.0502], dtype=torch.float64, requires_grad=True), tensor([0.0444], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 43.2654 sec.
update Log-likelihood (torch)=  -5.4355083499552865
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1131,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0662.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2624.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3728.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1086.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3302.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0971.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3291.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0502.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0444.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 2 workers, process 2 candidate rules.
[multiprocess log-grad] Elapsed: 23.1821 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02321, std=0.50700, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02275, std=0.62230, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
Best rule is: Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.02321171294869479
new rule added.
Best rule is: Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.022745002431716888
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1131
Rule0: A --> F , A BEFORE F, weight=0.0662
Rule1: C --> F , C BEFORE F, weight=0.2624
Rule2: Not C --> F , Not C BEFORE F, weight=0.3728
Rule3: B --> F , B EQUAL F, weight=0.1086
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3302
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0971
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3291
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0502
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0444
Rule9: Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F, weight=0.0100
Rule10: Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 20.9417 sec.
[1 th iter] Elapsed: 20.5317 sec.
[2 th iter] Elapsed: 19.8763 sec.
Run 536 batches
grad norm 0.03191362127443726 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.331937259913225
Params  [tensor([0.1107], dtype=torch.float64, requires_grad=True), tensor([0.0641], dtype=torch.float64, requires_grad=True), tensor([0.2695], dtype=torch.float64, requires_grad=True), tensor([0.3759], dtype=torch.float64, requires_grad=True), tensor([0.1080], dtype=torch.float64, requires_grad=True), tensor([0.3253], dtype=torch.float64, requires_grad=True), tensor([0.1019], dtype=torch.float64, requires_grad=True), tensor([0.3392], dtype=torch.float64, requires_grad=True), tensor([0.0558], dtype=torch.float64, requires_grad=True), tensor([0.0540], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([3.2834e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0226 min.
Update Log-likelihood (torch)=  -5.331937259913225
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1107,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0641.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2695.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3759.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1080.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3253.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1019.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3392.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0558.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0540.
Rule9: Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F, weight(torch)=-0.0002.
Rule10: Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F, weight(torch)=0.0000.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1107
Rule0: A --> F , A BEFORE F, weight=0.0641
Rule1: C --> F , C BEFORE F, weight=0.2695
Rule2: Not C --> F , Not C BEFORE F, weight=0.3759
Rule3: B --> F , B EQUAL F, weight=0.1080
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3253
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1019
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3392
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0558
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0540
[0 th iter] Elapsed: 17.1322 sec.
[1 th iter] Elapsed: 16.9344 sec.
Run 301 batches
grad norm 0.056269084097946835 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.658494094969333
Params  [tensor([0.1174], dtype=torch.float64, requires_grad=True), tensor([0.0636], dtype=torch.float64, requires_grad=True), tensor([0.2679], dtype=torch.float64, requires_grad=True), tensor([0.3754], dtype=torch.float64, requires_grad=True), tensor([0.1095], dtype=torch.float64, requires_grad=True), tensor([0.3240], dtype=torch.float64, requires_grad=True), tensor([0.1059], dtype=torch.float64, requires_grad=True), tensor([0.3448], dtype=torch.float64, requires_grad=True), tensor([0.0527], dtype=torch.float64, requires_grad=True), tensor([0.0525], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.0732 sec.
update Log-likelihood (torch)=  -5.658494094969333
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1174,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0636.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2679.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3754.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1095.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3240.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1059.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3448.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0527.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0525.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
No candidate rule generated.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: B --> F , B EQUAL F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 32 candidate rules.
[multiprocess log-grad] Elapsed: 1.3549 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.28028, std=0.71720, Rule = D ^ B --> F , D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.26938, std=0.69058, Rule = D ^ B --> F , D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.25721, std=0.66762, Rule = Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.25601, std=0.67405, Rule = A ^ B --> F , A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.25123, std=0.62293, Rule = C ^ B --> F , C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.24538, std=0.63045, Rule = Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23789, std=0.57763, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22973, std=0.73263, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22694, std=0.63096, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22584, std=0.62143, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22281, std=0.56988, Rule = Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22181, std=0.69207, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21847, std=0.68517, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20931, std=0.64827, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20913, std=0.60362, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20764, std=0.53759, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06538, std=0.28894, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05623, std=0.31144, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05038, std=0.29049, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05021, std=0.25736, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04290, std=0.26774, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04256, std=0.27578, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03709, std=0.26187, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03356, std=0.25688, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03339, std=0.22834, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03110, std=0.26057, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03087, std=0.29902, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02525, std=0.21914, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02295, std=0.25916, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02021, std=0.22764, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02020, std=0.24066, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01575, std=0.22268, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: D ^ B --> F , D BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.28028359620217586
new rule added.
Best rule is: D ^ B --> F , D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.269382767540504
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1174
Rule0: A --> F , A BEFORE F, weight=0.0636
Rule1: C --> F , C BEFORE F, weight=0.2679
Rule2: Not C --> F , Not C BEFORE F, weight=0.3754
Rule3: B --> F , B EQUAL F, weight=0.1095
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3240
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1059
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3448
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0527
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0525
Rule9: D ^ B --> F , D BEFORE F ^ B EQUAL F, weight=0.0100
Rule10: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 23.7335 sec.
[1 th iter] Elapsed: 21.6566 sec.
Run 345 batches
grad norm 0.03361786974619925 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.331469964297319
Params  [tensor([0.1189], dtype=torch.float64, requires_grad=True), tensor([0.0644], dtype=torch.float64, requires_grad=True), tensor([0.2608], dtype=torch.float64, requires_grad=True), tensor([0.3809], dtype=torch.float64, requires_grad=True), tensor([0.1093], dtype=torch.float64, requires_grad=True), tensor([0.3267], dtype=torch.float64, requires_grad=True), tensor([0.1162], dtype=torch.float64, requires_grad=True), tensor([0.3526], dtype=torch.float64, requires_grad=True), tensor([0.0507], dtype=torch.float64, requires_grad=True), tensor([0.0493], dtype=torch.float64, requires_grad=True), tensor([0.0083], dtype=torch.float64, requires_grad=True), tensor([0.0028], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 45.3965 sec.
Update Log-likelihood (torch)=  -5.331469964297319
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1189,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0644.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2608.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3809.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1093.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3267.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1162.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3526.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0507.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0493.
Rule9: D ^ B --> F , D BEFORE F ^ B EQUAL F, weight(torch)=0.0083.
Rule10: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0028.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1189
Rule0: A --> F , A BEFORE F, weight=0.0644
Rule1: C --> F , C BEFORE F, weight=0.2608
Rule2: Not C --> F , Not C BEFORE F, weight=0.3809
Rule3: B --> F , B EQUAL F, weight=0.1093
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3267
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1162
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3526
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0507
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0493
[0 th iter] Elapsed: 18.0285 sec.
[1 th iter] Elapsed: 18.4451 sec.
Run 427 batches
grad norm 0.06035773950563849 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.449784160517732
Params  [tensor([0.1157], dtype=torch.float64, requires_grad=True), tensor([0.0598], dtype=torch.float64, requires_grad=True), tensor([0.2573], dtype=torch.float64, requires_grad=True), tensor([0.3866], dtype=torch.float64, requires_grad=True), tensor([0.1046], dtype=torch.float64, requires_grad=True), tensor([0.3200], dtype=torch.float64, requires_grad=True), tensor([0.1135], dtype=torch.float64, requires_grad=True), tensor([0.3533], dtype=torch.float64, requires_grad=True), tensor([0.0473], dtype=torch.float64, requires_grad=True), tensor([0.0500], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 36.4791 sec.
update Log-likelihood (torch)=  -5.449784160517732
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1157,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0598.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2573.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3866.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1046.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3200.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1135.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3533.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0473.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0500.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 1.4077 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.25948, std=0.66747, Rule = Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.25875, std=0.67380, Rule = A ^ B --> F , A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.25364, std=0.62253, Rule = C ^ B --> F , C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.24751, std=0.63030, Rule = Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.24000, std=0.57736, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23201, std=0.73235, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22941, std=0.63070, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22835, std=0.62124, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22394, std=0.69177, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22378, std=0.56971, Rule = Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22019, std=0.68500, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21141, std=0.60339, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21095, std=0.64810, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20860, std=0.53739, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06591, std=0.28906, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05676, std=0.31125, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05098, std=0.29038, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05073, std=0.25737, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04313, std=0.26766, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04303, std=0.27578, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03755, std=0.26178, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03404, std=0.25687, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03379, std=0.22834, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03167, std=0.26042, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03139, std=0.29890, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02557, std=0.21906, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02332, std=0.25904, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02059, std=0.22754, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02056, std=0.24050, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01603, std=0.22261, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.25948382304088574
new rule added.
Best rule is: A ^ B --> F , A BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.2587460967101854
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1157
Rule0: A --> F , A BEFORE F, weight=0.0598
Rule1: C --> F , C BEFORE F, weight=0.2573
Rule2: Not C --> F , Not C BEFORE F, weight=0.3866
Rule3: B --> F , B EQUAL F, weight=0.1046
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3200
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1135
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3533
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0473
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0500
Rule9: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0100
Rule10: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 24.8066 sec.
[1 th iter] Elapsed: 20.5891 sec.
Run 313 batches
grad norm 0.1286857789007059 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.869722256690015
Params  [tensor([0.1195], dtype=torch.float64, requires_grad=True), tensor([0.0530], dtype=torch.float64, requires_grad=True), tensor([0.2511], dtype=torch.float64, requires_grad=True), tensor([0.3935], dtype=torch.float64, requires_grad=True), tensor([0.1038], dtype=torch.float64, requires_grad=True), tensor([0.3142], dtype=torch.float64, requires_grad=True), tensor([0.1159], dtype=torch.float64, requires_grad=True), tensor([0.3508], dtype=torch.float64, requires_grad=True), tensor([0.0436], dtype=torch.float64, requires_grad=True), tensor([0.0399], dtype=torch.float64, requires_grad=True), tensor([0.0039], dtype=torch.float64, requires_grad=True), tensor([0.0055], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 45.4020 sec.
Update Log-likelihood (torch)=  -5.869722256690015
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1195,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0530.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2511.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3935.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1038.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3142.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1159.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3508.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0436.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0399.
Rule9: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0039.
Rule10: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.0055.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1195
Rule0: A --> F , A BEFORE F, weight=0.0530
Rule1: C --> F , C BEFORE F, weight=0.2511
Rule2: Not C --> F , Not C BEFORE F, weight=0.3935
Rule3: B --> F , B EQUAL F, weight=0.1038
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3142
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1159
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3508
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0436
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0399
[0 th iter] Elapsed: 17.3164 sec.
[1 th iter] Elapsed: 17.4715 sec.
Run 410 batches
grad norm 0.1649313626115701 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.566347964679905
Params  [tensor([0.1184], dtype=torch.float64, requires_grad=True), tensor([0.0516], dtype=torch.float64, requires_grad=True), tensor([0.2521], dtype=torch.float64, requires_grad=True), tensor([0.3962], dtype=torch.float64, requires_grad=True), tensor([0.1018], dtype=torch.float64, requires_grad=True), tensor([0.3122], dtype=torch.float64, requires_grad=True), tensor([0.1123], dtype=torch.float64, requires_grad=True), tensor([0.3581], dtype=torch.float64, requires_grad=True), tensor([0.0472], dtype=torch.float64, requires_grad=True), tensor([0.0510], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.7934 sec.
update Log-likelihood (torch)=  -5.566347964679905
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1184,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0516.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2521.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3962.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1018.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3122.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1123.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3581.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0472.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0510.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 28 candidate rules.
[multiprocess log-grad] Elapsed: 1.5012 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.25628, std=0.62233, Rule = C ^ B --> F , C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.25055, std=0.63022, Rule = Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.24250, std=0.57725, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23568, std=0.73223, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23324, std=0.63046, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23245, std=0.62111, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22739, std=0.69165, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22600, std=0.56953, Rule = Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22365, std=0.68483, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21502, std=0.60313, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21422, std=0.64790, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21070, std=0.53733, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06649, std=0.28906, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05732, std=0.31130, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05171, std=0.29028, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05120, std=0.25741, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04363, std=0.27584, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04354, std=0.26774, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03809, std=0.26179, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03470, std=0.25692, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03420, std=0.22837, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03228, std=0.26031, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03205, std=0.29886, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02595, std=0.21899, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02375, std=0.25897, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02097, std=0.24043, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02093, std=0.22753, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01647, std=0.22258, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: C ^ B --> F , C BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.2562826465107146
new rule added.
Best rule is: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.2505517339288238
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1184
Rule0: A --> F , A BEFORE F, weight=0.0516
Rule1: C --> F , C BEFORE F, weight=0.2521
Rule2: Not C --> F , Not C BEFORE F, weight=0.3962
Rule3: B --> F , B EQUAL F, weight=0.1018
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3122
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1123
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3581
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0472
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0510
Rule9: C ^ B --> F , C BEFORE F ^ B EQUAL F, weight=0.0100
Rule10: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 26.8004 sec.
[1 th iter] Elapsed: 28.2491 sec.
Run 381 batches
grad norm 0.04741520876818635 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -4.951794499004753
Params  [tensor([0.1158], dtype=torch.float64, requires_grad=True), tensor([0.0521], dtype=torch.float64, requires_grad=True), tensor([0.2451], dtype=torch.float64, requires_grad=True), tensor([0.3983], dtype=torch.float64, requires_grad=True), tensor([0.1079], dtype=torch.float64, requires_grad=True), tensor([0.3096], dtype=torch.float64, requires_grad=True), tensor([0.1082], dtype=torch.float64, requires_grad=True), tensor([0.3579], dtype=torch.float64, requires_grad=True), tensor([0.0419], dtype=torch.float64, requires_grad=True), tensor([0.0452], dtype=torch.float64, requires_grad=True), tensor([0.0049], dtype=torch.float64, requires_grad=True), tensor([0.0023], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 55.0565 sec.
Update Log-likelihood (torch)=  -4.951794499004753
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1158,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0521.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2451.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3983.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1079.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3096.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1082.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3579.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0419.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0452.
Rule9: C ^ B --> F , C BEFORE F ^ B EQUAL F, weight(torch)=0.0049.
Rule10: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0023.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1158
Rule0: A --> F , A BEFORE F, weight=0.0521
Rule1: C --> F , C BEFORE F, weight=0.2451
Rule2: Not C --> F , Not C BEFORE F, weight=0.3983
Rule3: B --> F , B EQUAL F, weight=0.1079
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3096
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1082
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3579
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0419
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0452
[0 th iter] Elapsed: 22.4731 sec.
[1 th iter] Elapsed: 20.6075 sec.
Run 428 batches
grad norm 0.05956490721488181 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.576872072194088
Params  [tensor([0.1147], dtype=torch.float64, requires_grad=True), tensor([0.0536], dtype=torch.float64, requires_grad=True), tensor([0.2479], dtype=torch.float64, requires_grad=True), tensor([0.4037], dtype=torch.float64, requires_grad=True), tensor([0.1095], dtype=torch.float64, requires_grad=True), tensor([0.3119], dtype=torch.float64, requires_grad=True), tensor([0.1140], dtype=torch.float64, requires_grad=True), tensor([0.3706], dtype=torch.float64, requires_grad=True), tensor([0.0483], dtype=torch.float64, requires_grad=True), tensor([0.0508], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 43.0865 sec.
update Log-likelihood (torch)=  -5.576872072194088
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1147,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0536.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2479.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4037.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1095.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3119.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1140.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3706.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0483.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0508.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 26 candidate rules.
[multiprocess log-grad] Elapsed: 1.5337 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.23532, std=0.57816, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22706, std=0.73312, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22537, std=0.63111, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22448, std=0.62157, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21929, std=0.69250, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21868, std=0.57076, Rule = Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21548, std=0.68572, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20760, std=0.60381, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20646, std=0.64884, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20390, std=0.53832, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06500, std=0.28909, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05588, std=0.31144, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05022, std=0.25738, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05013, std=0.29042, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04256, std=0.26769, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04224, std=0.27589, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03676, std=0.26185, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03332, std=0.25688, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03322, std=0.22845, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03085, std=0.26062, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03053, std=0.29901, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02500, std=0.21925, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02276, std=0.25916, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02002, std=0.24079, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02000, std=0.22772, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01555, std=0.22281, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: C ^ B --> F , C BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.2353213658376709
new rule added.
Best rule is: E ^ B --> F , E BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.22705504846498242
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1147
Rule0: A --> F , A BEFORE F, weight=0.0536
Rule1: C --> F , C BEFORE F, weight=0.2479
Rule2: Not C --> F , Not C BEFORE F, weight=0.4037
Rule3: B --> F , B EQUAL F, weight=0.1095
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3119
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1140
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3706
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0483
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0508
Rule9: C ^ B --> F , C BEFORE B ^ B EQUAL F, weight=0.0100
Rule10: E ^ B --> F , E BEFORE F ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 28.6333 sec.
[1 th iter] Elapsed: 28.5351 sec.
Run 301 batches
grad norm 0.03839952995501072 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.30274977988479
Params  [tensor([0.1138], dtype=torch.float64, requires_grad=True), tensor([0.0537], dtype=torch.float64, requires_grad=True), tensor([0.2394], dtype=torch.float64, requires_grad=True), tensor([0.4072], dtype=torch.float64, requires_grad=True), tensor([0.1094], dtype=torch.float64, requires_grad=True), tensor([0.3064], dtype=torch.float64, requires_grad=True), tensor([0.1143], dtype=torch.float64, requires_grad=True), tensor([0.3718], dtype=torch.float64, requires_grad=True), tensor([0.0413], dtype=torch.float64, requires_grad=True), tensor([0.0461], dtype=torch.float64, requires_grad=True), tensor([0.0008], dtype=torch.float64, requires_grad=True), tensor([0.0014], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 57.1755 sec.
Update Log-likelihood (torch)=  -5.30274977988479
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1138,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0537.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2394.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4072.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1094.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3064.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1143.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3718.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0413.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0461.
Rule9: C ^ B --> F , C BEFORE B ^ B EQUAL F, weight(torch)=0.0008.
Rule10: E ^ B --> F , E BEFORE F ^ B EQUAL F, weight(torch)=0.0014.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1138
Rule0: A --> F , A BEFORE F, weight=0.0537
Rule1: C --> F , C BEFORE F, weight=0.2394
Rule2: Not C --> F , Not C BEFORE F, weight=0.4072
Rule3: B --> F , B EQUAL F, weight=0.1094
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3064
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1143
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3718
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0413
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0461
[0 th iter] Elapsed: 22.9792 sec.
[1 th iter] Elapsed: 21.5525 sec.
[2 th iter] Elapsed: 19.3950 sec.
Run 546 batches
grad norm 0.06487051306349353 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.179775592644248
Params  [tensor([0.1089], dtype=torch.float64, requires_grad=True), tensor([0.0542], dtype=torch.float64, requires_grad=True), tensor([0.2338], dtype=torch.float64, requires_grad=True), tensor([0.4078], dtype=torch.float64, requires_grad=True), tensor([0.1045], dtype=torch.float64, requires_grad=True), tensor([0.3110], dtype=torch.float64, requires_grad=True), tensor([0.1170], dtype=torch.float64, requires_grad=True), tensor([0.3745], dtype=torch.float64, requires_grad=True), tensor([0.0396], dtype=torch.float64, requires_grad=True), tensor([0.0513], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0669 min.
update Log-likelihood (torch)=  -5.179775592644248
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1089,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0542.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2338.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4078.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1045.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3110.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1170.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3745.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0396.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0513.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 24 candidate rules.
[multiprocess log-grad] Elapsed: 1.3214 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.23037, std=0.63008, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22923, std=0.62076, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22480, std=0.69095, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22344, std=0.56923, Rule = Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22073, std=0.68424, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21221, std=0.60279, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21145, std=0.64739, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20835, std=0.53685, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06622, std=0.28907, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05710, std=0.31084, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05131, std=0.29023, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05112, std=0.25727, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04329, std=0.27563, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04314, std=0.26748, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03773, std=0.26154, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03429, std=0.25676, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03401, std=0.22820, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03197, std=0.26020, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03170, std=0.29865, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02569, std=0.21888, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02353, std=0.25881, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02080, std=0.22734, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02079, std=0.24026, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01612, std=0.22246, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.23037430128992079
new rule added.
Best rule is: A ^ B --> F , A BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.2292297316338081
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1089
Rule0: A --> F , A BEFORE F, weight=0.0542
Rule1: C --> F , C BEFORE F, weight=0.2338
Rule2: Not C --> F , Not C BEFORE F, weight=0.4078
Rule3: B --> F , B EQUAL F, weight=0.1045
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3110
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1170
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3745
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0396
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0513
Rule9: Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F, weight=0.0100
Rule10: A ^ B --> F , A BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 26.7930 sec.
[1 th iter] Elapsed: 26.8804 sec.
Run 302 batches
grad norm 0.016807584449947986 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.420723848229151
Params  [tensor([0.1107], dtype=torch.float64, requires_grad=True), tensor([0.0571], dtype=torch.float64, requires_grad=True), tensor([0.2319], dtype=torch.float64, requires_grad=True), tensor([0.4054], dtype=torch.float64, requires_grad=True), tensor([0.0984], dtype=torch.float64, requires_grad=True), tensor([0.3056], dtype=torch.float64, requires_grad=True), tensor([0.1041], dtype=torch.float64, requires_grad=True), tensor([0.3796], dtype=torch.float64, requires_grad=True), tensor([0.0331], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.0010], dtype=torch.float64, requires_grad=True), tensor([-4.7602e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.6800 sec.
Update Log-likelihood (torch)=  -5.420723848229151
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1107,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0571.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2319.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4054.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0984.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3056.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1041.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3796.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0331.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0488.
Rule9: Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F, weight(torch)=0.0010.
Rule10: A ^ B --> F , A BEFORE B ^ B EQUAL F, weight(torch)=-0.0000.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1107
Rule0: A --> F , A BEFORE F, weight=0.0571
Rule1: C --> F , C BEFORE F, weight=0.2319
Rule2: Not C --> F , Not C BEFORE F, weight=0.4054
Rule3: B --> F , B EQUAL F, weight=0.0984
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3056
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1041
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3796
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0331
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0488
[0 th iter] Elapsed: 22.4475 sec.
[1 th iter] Elapsed: 22.3872 sec.
Run 301 batches
grad norm 0.052059031297520764 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.077666789144358
Params  [tensor([0.1087], dtype=torch.float64, requires_grad=True), tensor([0.0527], dtype=torch.float64, requires_grad=True), tensor([0.2270], dtype=torch.float64, requires_grad=True), tensor([0.4071], dtype=torch.float64, requires_grad=True), tensor([0.1050], dtype=torch.float64, requires_grad=True), tensor([0.3034], dtype=torch.float64, requires_grad=True), tensor([0.1005], dtype=torch.float64, requires_grad=True), tensor([0.3868], dtype=torch.float64, requires_grad=True), tensor([0.0286], dtype=torch.float64, requires_grad=True), tensor([0.0474], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 44.8403 sec.
update Log-likelihood (torch)=  -5.077666789144358
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1087,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0527.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2270.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4071.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1050.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3034.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1005.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3868.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0286.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0474.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 22 candidate rules.
[multiprocess log-grad] Elapsed: 1.1915 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.23427, std=0.68915, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23264, std=0.56736, Rule = Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.23087, std=0.68224, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.22103, std=0.64538, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21995, std=0.60159, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21688, std=0.53524, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06781, std=0.28888, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05862, std=0.31053, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05286, std=0.29016, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05205, std=0.25720, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04483, std=0.27529, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04408, std=0.26757, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03919, std=0.26133, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03562, std=0.25667, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03499, std=0.22791, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03343, std=0.25986, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03332, std=0.29842, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02674, std=0.21847, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02457, std=0.25847, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02187, std=0.22691, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02170, std=0.23984, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01692, std=0.22210, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: E ^ B --> F , E BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.23426531738598413
new rule added.
Best rule is: Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.23264332086899175
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1087
Rule0: A --> F , A BEFORE F, weight=0.0527
Rule1: C --> F , C BEFORE F, weight=0.2270
Rule2: Not C --> F , Not C BEFORE F, weight=0.4071
Rule3: B --> F , B EQUAL F, weight=0.1050
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3034
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1005
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3868
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0286
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0474
Rule9: E ^ B --> F , E BEFORE B ^ B EQUAL F, weight=0.0100
Rule10: Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 26.6959 sec.
[1 th iter] Elapsed: 27.0577 sec.
[2 th iter] Elapsed: 26.4755 sec.
Run 686 batches
grad norm 0.053873271727664505 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.5108760184135885
Params  [tensor([0.1189], dtype=torch.float64, requires_grad=True), tensor([0.0545], dtype=torch.float64, requires_grad=True), tensor([0.2281], dtype=torch.float64, requires_grad=True), tensor([0.4151], dtype=torch.float64, requires_grad=True), tensor([0.1155], dtype=torch.float64, requires_grad=True), tensor([0.2967], dtype=torch.float64, requires_grad=True), tensor([0.1005], dtype=torch.float64, requires_grad=True), tensor([0.3979], dtype=torch.float64, requires_grad=True), tensor([0.0316], dtype=torch.float64, requires_grad=True), tensor([0.0485], dtype=torch.float64, requires_grad=True), tensor([0.0035], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3373 min.
Update Log-likelihood (torch)=  -5.5108760184135885
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1189,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0545.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2281.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4151.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1155.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2967.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1005.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3979.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0316.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0485.
Rule9: E ^ B --> F , E BEFORE B ^ B EQUAL F, weight(torch)=0.0035.
Rule10: Not C ^ B --> F , Not C BEFORE F ^ B EQUAL F, weight(torch)=-0.0002.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1189
Rule0: A --> F , A BEFORE F, weight=0.0545
Rule1: C --> F , C BEFORE F, weight=0.2281
Rule2: Not C --> F , Not C BEFORE F, weight=0.4151
Rule3: B --> F , B EQUAL F, weight=0.1155
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2967
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1005
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3979
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0316
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0485
[0 th iter] Elapsed: 22.8653 sec.
[1 th iter] Elapsed: 22.4432 sec.
[2 th iter] Elapsed: 21.5067 sec.
Run 532 batches
grad norm 0.09961141567906481 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.53265792116562
Params  [tensor([0.1145], dtype=torch.float64, requires_grad=True), tensor([0.0517], dtype=torch.float64, requires_grad=True), tensor([0.2249], dtype=torch.float64, requires_grad=True), tensor([0.4136], dtype=torch.float64, requires_grad=True), tensor([0.1137], dtype=torch.float64, requires_grad=True), tensor([0.2954], dtype=torch.float64, requires_grad=True), tensor([0.0968], dtype=torch.float64, requires_grad=True), tensor([0.4021], dtype=torch.float64, requires_grad=True), tensor([0.0342], dtype=torch.float64, requires_grad=True), tensor([0.0597], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1145 min.
update Log-likelihood (torch)=  -5.53265792116562
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1145,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0517.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2249.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4136.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1137.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2954.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0968.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4021.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0342.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0597.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 20 candidate rules.
[multiprocess log-grad] Elapsed: 1.1150 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.22158, std=0.68386, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21218, std=0.64700, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.21170, std=0.60266, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20889, std=0.53685, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06577, std=0.28877, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05666, std=0.31106, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05088, std=0.29039, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05061, std=0.25723, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04309, std=0.27551, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04304, std=0.26772, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03741, std=0.26169, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03396, std=0.25678, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03369, std=0.22810, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03148, std=0.26046, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03139, std=0.29879, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02548, std=0.21900, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02329, std=0.25891, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02063, std=0.22742, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02050, std=0.24060, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01584, std=0.22259, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.2215785114356263
new rule added.
Best rule is: Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.21218498375709094
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1145
Rule0: A --> F , A BEFORE F, weight=0.0517
Rule1: C --> F , C BEFORE F, weight=0.2249
Rule2: Not C --> F , Not C BEFORE F, weight=0.4136
Rule3: B --> F , B EQUAL F, weight=0.1137
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2954
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0968
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4021
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0342
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0597
Rule9: Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F, weight=0.0100
Rule10: Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 26.0129 sec.
[1 th iter] Elapsed: 26.2116 sec.
Run 324 batches
grad norm 0.03260907996037266 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.251003003052771
Params  [tensor([0.1170], dtype=torch.float64, requires_grad=True), tensor([0.0493], dtype=torch.float64, requires_grad=True), tensor([0.2185], dtype=torch.float64, requires_grad=True), tensor([0.4159], dtype=torch.float64, requires_grad=True), tensor([0.1084], dtype=torch.float64, requires_grad=True), tensor([0.2971], dtype=torch.float64, requires_grad=True), tensor([0.0992], dtype=torch.float64, requires_grad=True), tensor([0.4027], dtype=torch.float64, requires_grad=True), tensor([0.0348], dtype=torch.float64, requires_grad=True), tensor([0.0512], dtype=torch.float64, requires_grad=True), tensor([5.0686e-05], dtype=torch.float64, requires_grad=True), tensor([0.0007], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 52.2331 sec.
Update Log-likelihood (torch)=  -5.251003003052771
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1170,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0493.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2185.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4159.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1084.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2971.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0992.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4027.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0348.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0512.
Rule9: Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F, weight(torch)=0.0001.
Rule10: Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F, weight(torch)=0.0007.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1170
Rule0: A --> F , A BEFORE F, weight=0.0493
Rule1: C --> F , C BEFORE F, weight=0.2185
Rule2: Not C --> F , Not C BEFORE F, weight=0.4159
Rule3: B --> F , B EQUAL F, weight=0.1084
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2971
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0992
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4027
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0348
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0512
[0 th iter] Elapsed: 22.3060 sec.
[1 th iter] Elapsed: 22.6021 sec.
Run 301 batches
grad norm 0.04182342218139716 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.201644556816367
Params  [tensor([0.1195], dtype=torch.float64, requires_grad=True), tensor([0.0543], dtype=torch.float64, requires_grad=True), tensor([0.2232], dtype=torch.float64, requires_grad=True), tensor([0.4200], dtype=torch.float64, requires_grad=True), tensor([0.1060], dtype=torch.float64, requires_grad=True), tensor([0.2879], dtype=torch.float64, requires_grad=True), tensor([0.1050], dtype=torch.float64, requires_grad=True), tensor([0.4096], dtype=torch.float64, requires_grad=True), tensor([0.0355], dtype=torch.float64, requires_grad=True), tensor([0.0570], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 44.9137 sec.
update Log-likelihood (torch)=  -5.201644556816367
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1195,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0543.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2232.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4200.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1060.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2879.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1050.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4096.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0355.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0570.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 18 candidate rules.
[multiprocess log-grad] Elapsed: 1.5637 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.21107, std=0.60333, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.20773, std=0.53761, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06561, std=0.28896, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05657, std=0.31130, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05078, std=0.29051, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05059, std=0.25736, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04303, std=0.26778, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04299, std=0.27574, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03736, std=0.26191, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03384, std=0.25685, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03369, std=0.22829, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03146, std=0.26064, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03128, std=0.29896, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02543, std=0.21927, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02326, std=0.25910, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02065, std=0.22763, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02047, std=0.24082, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01579, std=0.22277, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.21106568030157885
new rule added.
Best rule is: Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.20772558950050152
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1195
Rule0: A --> F , A BEFORE F, weight=0.0543
Rule1: C --> F , C BEFORE F, weight=0.2232
Rule2: Not C --> F , Not C BEFORE F, weight=0.4200
Rule3: B --> F , B EQUAL F, weight=0.1060
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2879
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1050
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4096
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0355
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0570
Rule9: Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F, weight=0.0100
Rule10: Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 31.3681 sec.
[1 th iter] Elapsed: 29.3572 sec.
Run 420 batches
grad norm 0.05541219339789841 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.478371919399012
Params  [tensor([0.1192], dtype=torch.float64, requires_grad=True), tensor([0.0516], dtype=torch.float64, requires_grad=True), tensor([0.2157], dtype=torch.float64, requires_grad=True), tensor([0.4207], dtype=torch.float64, requires_grad=True), tensor([0.1114], dtype=torch.float64, requires_grad=True), tensor([0.2858], dtype=torch.float64, requires_grad=True), tensor([0.1012], dtype=torch.float64, requires_grad=True), tensor([0.4071], dtype=torch.float64, requires_grad=True), tensor([0.0322], dtype=torch.float64, requires_grad=True), tensor([0.0499], dtype=torch.float64, requires_grad=True), tensor([0.0004], dtype=torch.float64, requires_grad=True), tensor([0.0007], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0122 min.
Update Log-likelihood (torch)=  -5.478371919399012
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1192,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0516.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2157.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4207.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1114.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2858.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1012.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4071.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0322.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0499.
Rule9: Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F, weight(torch)=0.0004.
Rule10: Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F, weight(torch)=0.0007.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1192
Rule0: A --> F , A BEFORE F, weight=0.0516
Rule1: C --> F , C BEFORE F, weight=0.2157
Rule2: Not C --> F , Not C BEFORE F, weight=0.4207
Rule3: B --> F , B EQUAL F, weight=0.1114
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2858
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1012
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4071
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0322
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0499
[0 th iter] Elapsed: 26.0759 sec.
[1 th iter] Elapsed: 25.0370 sec.
Run 302 batches
grad norm 0.038565103712101534 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.449323004256581
Params  [tensor([0.1200], dtype=torch.float64, requires_grad=True), tensor([0.0512], dtype=torch.float64, requires_grad=True), tensor([0.2143], dtype=torch.float64, requires_grad=True), tensor([0.4242], dtype=torch.float64, requires_grad=True), tensor([0.1172], dtype=torch.float64, requires_grad=True), tensor([0.2843], dtype=torch.float64, requires_grad=True), tensor([0.1044], dtype=torch.float64, requires_grad=True), tensor([0.4156], dtype=torch.float64, requires_grad=True), tensor([0.0320], dtype=torch.float64, requires_grad=True), tensor([0.0468], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 51.1246 sec.
update Log-likelihood (torch)=  -5.449323004256581
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1200,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0512.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2143.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4242.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1172.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2843.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1044.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4156.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0320.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0468.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 16 candidate rules.
[multiprocess log-grad] Elapsed: 1.1163 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06586, std=0.28903, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05660, std=0.31128, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05079, std=0.25736, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05078, std=0.29051, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04306, std=0.27579, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04284, std=0.26792, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03751, std=0.26191, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03395, std=0.25686, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03373, std=0.22833, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03151, std=0.26070, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03122, std=0.29911, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02554, std=0.21920, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02321, std=0.25921, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02062, std=0.22758, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02039, std=0.24084, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01583, std=0.22275, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.06586489812367931
new rule added.
Best rule is: C ^ B --> F , C EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.05660225630473437
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1200
Rule0: A --> F , A BEFORE F, weight=0.0512
Rule1: C --> F , C BEFORE F, weight=0.2143
Rule2: Not C --> F , Not C BEFORE F, weight=0.4242
Rule3: B --> F , B EQUAL F, weight=0.1172
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2843
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1044
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4156
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0320
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0468
Rule9: Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F, weight=0.0100
Rule10: C ^ B --> F , C EQUAL B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 30.1137 sec.
[1 th iter] Elapsed: 29.9245 sec.
[2 th iter] Elapsed: 31.0093 sec.
3 th iter
grad norm=0.04307369300432593. num_batch_no_update =138
Head = F, base = 0.1215
Rule0: A --> F , A BEFORE F, weight=0.0529
Rule1: C --> F , C BEFORE F, weight=0.2116
Rule2: Not C --> F , Not C BEFORE F, weight=0.4322
Rule3: B --> F , B EQUAL F, weight=0.1161
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2783
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1165
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4234
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0398
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0495
Rule9: Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F, weight=-0.0001
Rule10: C ^ B --> F , C EQUAL B ^ B EQUAL F, weight=-0.0001
[3 th iter] Elapsed: 30.1225 sec.
Run 912 batches
grad norm 0.041041140550767095 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.187429305366158
Params  [tensor([0.1176], dtype=torch.float64, requires_grad=True), tensor([0.0490], dtype=torch.float64, requires_grad=True), tensor([0.2079], dtype=torch.float64, requires_grad=True), tensor([0.4314], dtype=torch.float64, requires_grad=True), tensor([0.1153], dtype=torch.float64, requires_grad=True), tensor([0.2728], dtype=torch.float64, requires_grad=True), tensor([0.1119], dtype=torch.float64, requires_grad=True), tensor([0.4240], dtype=torch.float64, requires_grad=True), tensor([0.0405], dtype=torch.float64, requires_grad=True), tensor([0.0507], dtype=torch.float64, requires_grad=True), tensor([-0.0001], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.0196 min.
Update Log-likelihood (torch)=  -5.187429305366158
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1176,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0490.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2079.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4314.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1153.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2728.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1119.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4240.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0405.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0507.
Rule9: Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F, weight(torch)=-0.0001.
Rule10: C ^ B --> F , C EQUAL B ^ B EQUAL F, weight(torch)=-0.0002.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1176
Rule0: A --> F , A BEFORE F, weight=0.0490
Rule1: C --> F , C BEFORE F, weight=0.2079
Rule2: Not C --> F , Not C BEFORE F, weight=0.4314
Rule3: B --> F , B EQUAL F, weight=0.1153
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2728
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1119
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4240
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0405
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0507
[0 th iter] Elapsed: 25.2404 sec.
[1 th iter] Elapsed: 25.2125 sec.
Run 357 batches
grad norm 0.04955515233201349 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.374304707392568
Params  [tensor([0.1091], dtype=torch.float64, requires_grad=True), tensor([0.0552], dtype=torch.float64, requires_grad=True), tensor([0.2031], dtype=torch.float64, requires_grad=True), tensor([0.4271], dtype=torch.float64, requires_grad=True), tensor([0.1163], dtype=torch.float64, requires_grad=True), tensor([0.2730], dtype=torch.float64, requires_grad=True), tensor([0.1015], dtype=torch.float64, requires_grad=True), tensor([0.4296], dtype=torch.float64, requires_grad=True), tensor([0.0373], dtype=torch.float64, requires_grad=True), tensor([0.0450], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 50.4633 sec.
update Log-likelihood (torch)=  -5.374304707392568
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1091,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0552.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2031.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4271.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1163.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2730.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1015.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4296.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0373.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0450.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 14 workers, process 14 candidate rules.
[multiprocess log-grad] Elapsed: 1.0702 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05103, std=0.29033, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05091, std=0.25715, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04335, std=0.27539, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04309, std=0.26762, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03779, std=0.26153, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03408, std=0.25653, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03394, std=0.22803, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03190, std=0.26021, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03163, std=0.29869, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02574, std=0.21883, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02347, std=0.25881, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02082, std=0.22718, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02063, std=0.24030, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01594, std=0.22228, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: A ^ B --> F , A EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.051025901054437356
new rule added.
Best rule is: Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.05090783620467593
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1091
Rule0: A --> F , A BEFORE F, weight=0.0552
Rule1: C --> F , C BEFORE F, weight=0.2031
Rule2: Not C --> F , Not C BEFORE F, weight=0.4271
Rule3: B --> F , B EQUAL F, weight=0.1163
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2730
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1015
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4296
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0373
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0450
Rule9: A ^ B --> F , A EQUAL B ^ B EQUAL F, weight=0.0100
Rule10: Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 32.1712 sec.
[1 th iter] Elapsed: 36.6374 sec.
Run 492 batches
grad norm 0.12284155423161984 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.688730462008896
Params  [tensor([0.1112], dtype=torch.float64, requires_grad=True), tensor([0.0480], dtype=torch.float64, requires_grad=True), tensor([0.2007], dtype=torch.float64, requires_grad=True), tensor([0.4290], dtype=torch.float64, requires_grad=True), tensor([0.1203], dtype=torch.float64, requires_grad=True), tensor([0.2657], dtype=torch.float64, requires_grad=True), tensor([0.1083], dtype=torch.float64, requires_grad=True), tensor([0.4269], dtype=torch.float64, requires_grad=True), tensor([0.0303], dtype=torch.float64, requires_grad=True), tensor([0.0421], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1471 min.
Update Log-likelihood (torch)=  -5.688730462008896
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1112,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0480.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2007.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4290.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1203.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2657.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1083.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4269.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0303.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0421.
Rule9: A ^ B --> F , A EQUAL B ^ B EQUAL F, weight(torch)=0.0003.
Rule10: Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F, weight(torch)=0.0003.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1112
Rule0: A --> F , A BEFORE F, weight=0.0480
Rule1: C --> F , C BEFORE F, weight=0.2007
Rule2: Not C --> F , Not C BEFORE F, weight=0.4290
Rule3: B --> F , B EQUAL F, weight=0.1203
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2657
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1083
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4269
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0303
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0421
[0 th iter] Elapsed: 29.9305 sec.
[1 th iter] Elapsed: 28.6254 sec.
Run 301 batches
grad norm 0.04494064314507058 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.311947410429211
Params  [tensor([0.1102], dtype=torch.float64, requires_grad=True), tensor([0.0492], dtype=torch.float64, requires_grad=True), tensor([0.2022], dtype=torch.float64, requires_grad=True), tensor([0.4316], dtype=torch.float64, requires_grad=True), tensor([0.1302], dtype=torch.float64, requires_grad=True), tensor([0.2682], dtype=torch.float64, requires_grad=True), tensor([0.1104], dtype=torch.float64, requires_grad=True), tensor([0.4357], dtype=torch.float64, requires_grad=True), tensor([0.0348], dtype=torch.float64, requires_grad=True), tensor([0.0595], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 58.5682 sec.
update Log-likelihood (torch)=  -5.311947410429211
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1102,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0492.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2022.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4316.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1302.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2682.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1104.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4357.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0348.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0595.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 12 workers, process 12 candidate rules.
[multiprocess log-grad] Elapsed: 1.0145 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04186, std=0.26765, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04141, std=0.27563, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03582, std=0.26182, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03259, std=0.22821, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03248, std=0.25676, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02978, std=0.26074, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02948, std=0.29907, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02433, std=0.21936, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02204, std=0.25926, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01944, std=0.22765, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01933, std=0.24102, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01483, std=0.22287, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: C ^ B --> F , C EQUAL F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.04186082059009135
new rule added.
Best rule is: Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.04140651871781529
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1102
Rule0: A --> F , A BEFORE F, weight=0.0492
Rule1: C --> F , C BEFORE F, weight=0.2022
Rule2: Not C --> F , Not C BEFORE F, weight=0.4316
Rule3: B --> F , B EQUAL F, weight=0.1302
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2682
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1104
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4357
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0348
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0595
Rule9: C ^ B --> F , C EQUAL F ^ B EQUAL F, weight=0.0100
Rule10: Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 31.7078 sec.
[1 th iter] Elapsed: 30.5042 sec.
Run 303 batches
grad norm 0.03107952620762147 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.629190778231509
Params  [tensor([0.1102], dtype=torch.float64, requires_grad=True), tensor([0.0593], dtype=torch.float64, requires_grad=True), tensor([0.1918], dtype=torch.float64, requires_grad=True), tensor([0.4272], dtype=torch.float64, requires_grad=True), tensor([0.1332], dtype=torch.float64, requires_grad=True), tensor([0.2642], dtype=torch.float64, requires_grad=True), tensor([0.1110], dtype=torch.float64, requires_grad=True), tensor([0.4374], dtype=torch.float64, requires_grad=True), tensor([0.0318], dtype=torch.float64, requires_grad=True), tensor([0.0486], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([-3.2079e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0371 min.
Update Log-likelihood (torch)=  -5.629190778231509
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1102,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0593.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1918.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4272.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1332.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2642.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1110.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4374.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0318.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0486.
Rule9: C ^ B --> F , C EQUAL F ^ B EQUAL F, weight(torch)=0.0002.
Rule10: Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F, weight(torch)=-0.0000.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1102
Rule0: A --> F , A BEFORE F, weight=0.0593
Rule1: C --> F , C BEFORE F, weight=0.1918
Rule2: Not C --> F , Not C BEFORE F, weight=0.4272
Rule3: B --> F , B EQUAL F, weight=0.1332
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2642
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1110
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4374
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0318
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0486
[0 th iter] Elapsed: 25.2588 sec.
[1 th iter] Elapsed: 24.5410 sec.
Run 469 batches
grad norm 0.05990832739778131 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.424641723372535
Params  [tensor([0.1144], dtype=torch.float64, requires_grad=True), tensor([0.0592], dtype=torch.float64, requires_grad=True), tensor([0.1879], dtype=torch.float64, requires_grad=True), tensor([0.4265], dtype=torch.float64, requires_grad=True), tensor([0.1355], dtype=torch.float64, requires_grad=True), tensor([0.2590], dtype=torch.float64, requires_grad=True), tensor([0.1106], dtype=torch.float64, requires_grad=True), tensor([0.4363], dtype=torch.float64, requires_grad=True), tensor([0.0298], dtype=torch.float64, requires_grad=True), tensor([0.0428], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 49.8111 sec.
update Log-likelihood (torch)=  -5.424641723372535
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1144,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0592.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1879.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4265.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1355.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2590.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1106.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4363.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0298.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0428.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 10 workers, process 10 candidate rules.
[multiprocess log-grad] Elapsed: 33.7570 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03710, std=0.26183, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03349, std=0.25674, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03345, std=0.22818, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03099, std=0.26062, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03054, std=0.29922, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02524, std=0.21911, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02273, std=0.25937, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02024, std=0.22743, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01997, std=0.24072, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01548, std=0.22256, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.03709761086212068
new rule added.
Best rule is: Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.03348898665250316
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1144
Rule0: A --> F , A BEFORE F, weight=0.0592
Rule1: C --> F , C BEFORE F, weight=0.1879
Rule2: Not C --> F , Not C BEFORE F, weight=0.4265
Rule3: B --> F , B EQUAL F, weight=0.1355
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2590
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1106
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4363
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0298
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0428
Rule9: Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F, weight=0.0100
Rule10: Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 19.0855 sec.
[1 th iter] Elapsed: 19.7210 sec.
Run 302 batches
grad norm 0.0507830239615136 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.51784654116563
Params  [tensor([0.1090], dtype=torch.float64, requires_grad=True), tensor([0.0620], dtype=torch.float64, requires_grad=True), tensor([0.1899], dtype=torch.float64, requires_grad=True), tensor([0.4340], dtype=torch.float64, requires_grad=True), tensor([0.1319], dtype=torch.float64, requires_grad=True), tensor([0.2566], dtype=torch.float64, requires_grad=True), tensor([0.1168], dtype=torch.float64, requires_grad=True), tensor([0.4365], dtype=torch.float64, requires_grad=True), tensor([0.0331], dtype=torch.float64, requires_grad=True), tensor([0.0505], dtype=torch.float64, requires_grad=True), tensor([2.1047e-06], dtype=torch.float64, requires_grad=True), tensor([-9.8547e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 38.8153 sec.
Update Log-likelihood (torch)=  -5.51784654116563
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1090,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0620.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1899.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4340.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1319.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2566.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1168.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4365.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0331.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0505.
Rule9: Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F, weight(torch)=0.0000.
Rule10: Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F, weight(torch)=-0.0001.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1090
Rule0: A --> F , A BEFORE F, weight=0.0620
Rule1: C --> F , C BEFORE F, weight=0.1899
Rule2: Not C --> F , Not C BEFORE F, weight=0.4340
Rule3: B --> F , B EQUAL F, weight=0.1319
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2566
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1168
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4365
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0331
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0505
[0 th iter] Elapsed: 16.9335 sec.
[1 th iter] Elapsed: 17.1519 sec.
Run 304 batches
grad norm 0.04904584991512557 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.425237870468868
Params  [tensor([0.1097], dtype=torch.float64, requires_grad=True), tensor([0.0641], dtype=torch.float64, requires_grad=True), tensor([0.1900], dtype=torch.float64, requires_grad=True), tensor([0.4412], dtype=torch.float64, requires_grad=True), tensor([0.1328], dtype=torch.float64, requires_grad=True), tensor([0.2545], dtype=torch.float64, requires_grad=True), tensor([0.1100], dtype=torch.float64, requires_grad=True), tensor([0.4391], dtype=torch.float64, requires_grad=True), tensor([0.0322], dtype=torch.float64, requires_grad=True), tensor([0.0491], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.0919 sec.
update Log-likelihood (torch)=  -5.425237870468868
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1097,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0641.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1900.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4412.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1328.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2545.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1100.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4391.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0322.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0491.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 8 workers, process 8 candidate rules.
[multiprocess log-grad] Elapsed: 31.0654 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03264, std=0.22822, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02987, std=0.26072, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02944, std=0.29919, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02442, std=0.21929, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02202, std=0.25938, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01952, std=0.22757, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01930, std=0.24094, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01476, std=0.22274, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.03263535186835484
new rule added.
Best rule is: D ^ B --> F , D EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.02986536128408521
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1097
Rule0: A --> F , A BEFORE F, weight=0.0641
Rule1: C --> F , C BEFORE F, weight=0.1900
Rule2: Not C --> F , Not C BEFORE F, weight=0.4412
Rule3: B --> F , B EQUAL F, weight=0.1328
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2545
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1100
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4391
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0322
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0491
Rule9: Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F, weight=0.0100
Rule10: D ^ B --> F , D EQUAL B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 20.5529 sec.
[1 th iter] Elapsed: 19.9215 sec.
Run 301 batches
grad norm 0.0386065088975687 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.231605469782652
Params  [tensor([0.1154], dtype=torch.float64, requires_grad=True), tensor([0.0627], dtype=torch.float64, requires_grad=True), tensor([0.1923], dtype=torch.float64, requires_grad=True), tensor([0.4446], dtype=torch.float64, requires_grad=True), tensor([0.1354], dtype=torch.float64, requires_grad=True), tensor([0.2561], dtype=torch.float64, requires_grad=True), tensor([0.1107], dtype=torch.float64, requires_grad=True), tensor([0.4411], dtype=torch.float64, requires_grad=True), tensor([0.0317], dtype=torch.float64, requires_grad=True), tensor([0.0501], dtype=torch.float64, requires_grad=True), tensor([-5.6565e-05], dtype=torch.float64, requires_grad=True), tensor([6.2676e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 40.4808 sec.
Update Log-likelihood (torch)=  -5.231605469782652
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1154,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0627.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1923.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4446.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1354.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2561.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1107.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4411.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0317.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0501.
Rule9: Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F, weight(torch)=-0.0001.
Rule10: D ^ B --> F , D EQUAL B ^ B EQUAL F, weight(torch)=0.0001.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1154
Rule0: A --> F , A BEFORE F, weight=0.0627
Rule1: C --> F , C BEFORE F, weight=0.1923
Rule2: Not C --> F , Not C BEFORE F, weight=0.4446
Rule3: B --> F , B EQUAL F, weight=0.1354
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2561
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1107
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4411
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0317
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0501
[0 th iter] Elapsed: 16.7138 sec.
[1 th iter] Elapsed: 17.9212 sec.
Run 301 batches
grad norm 0.08163483157932118 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.344801624606174
Params  [tensor([0.1163], dtype=torch.float64, requires_grad=True), tensor([0.0620], dtype=torch.float64, requires_grad=True), tensor([0.1964], dtype=torch.float64, requires_grad=True), tensor([0.4477], dtype=torch.float64, requires_grad=True), tensor([0.1381], dtype=torch.float64, requires_grad=True), tensor([0.2512], dtype=torch.float64, requires_grad=True), tensor([0.1074], dtype=torch.float64, requires_grad=True), tensor([0.4488], dtype=torch.float64, requires_grad=True), tensor([0.0399], dtype=torch.float64, requires_grad=True), tensor([0.0507], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 34.6408 sec.
update Log-likelihood (torch)=  -5.344801624606174
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1163,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0620.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1964.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4477.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1381.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2512.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1074.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4488.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0399.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0507.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 6 workers, process 6 candidate rules.
[multiprocess log-grad] Elapsed: 28.6069 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02776, std=0.29968, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02338, std=0.21988, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02092, std=0.25987, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01843, std=0.22813, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01822, std=0.24176, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01385, std=0.22330, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: E ^ B --> F , E EQUAL B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.027755173810443644
new rule added.
Best rule is: Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.023382955064376227
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1163
Rule0: A --> F , A BEFORE F, weight=0.0620
Rule1: C --> F , C BEFORE F, weight=0.1964
Rule2: Not C --> F , Not C BEFORE F, weight=0.4477
Rule3: B --> F , B EQUAL F, weight=0.1381
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2512
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1074
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4488
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0399
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0507
Rule9: E ^ B --> F , E EQUAL B ^ B EQUAL F, weight=0.0100
Rule10: Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 19.5943 sec.
[1 th iter] Elapsed: 19.5069 sec.
Run 329 batches
grad norm 0.03233814644747359 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.165497324174767
Params  [tensor([0.1111], dtype=torch.float64, requires_grad=True), tensor([0.0575], dtype=torch.float64, requires_grad=True), tensor([0.1870], dtype=torch.float64, requires_grad=True), tensor([0.4526], dtype=torch.float64, requires_grad=True), tensor([0.1347], dtype=torch.float64, requires_grad=True), tensor([0.2497], dtype=torch.float64, requires_grad=True), tensor([0.1013], dtype=torch.float64, requires_grad=True), tensor([0.4455], dtype=torch.float64, requires_grad=True), tensor([0.0335], dtype=torch.float64, requires_grad=True), tensor([0.0388], dtype=torch.float64, requires_grad=True), tensor([4.4298e-05], dtype=torch.float64, requires_grad=True), tensor([-3.1109e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 39.1070 sec.
Update Log-likelihood (torch)=  -5.165497324174767
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1111,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0575.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1870.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4526.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1347.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2497.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1013.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4455.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0335.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0388.
Rule9: E ^ B --> F , E EQUAL B ^ B EQUAL F, weight(torch)=0.0000.
Rule10: Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F, weight(torch)=-0.0000.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1111
Rule0: A --> F , A BEFORE F, weight=0.0575
Rule1: C --> F , C BEFORE F, weight=0.1870
Rule2: Not C --> F , Not C BEFORE F, weight=0.4526
Rule3: B --> F , B EQUAL F, weight=0.1347
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2497
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1013
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4455
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0335
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0388
[0 th iter] Elapsed: 15.7571 sec.
[1 th iter] Elapsed: 18.0373 sec.
Run 358 batches
grad norm 0.028779725583588475 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.522956886849817
Params  [tensor([0.1113], dtype=torch.float64, requires_grad=True), tensor([0.0574], dtype=torch.float64, requires_grad=True), tensor([0.1874], dtype=torch.float64, requires_grad=True), tensor([0.4496], dtype=torch.float64, requires_grad=True), tensor([0.1351], dtype=torch.float64, requires_grad=True), tensor([0.2440], dtype=torch.float64, requires_grad=True), tensor([0.0997], dtype=torch.float64, requires_grad=True), tensor([0.4504], dtype=torch.float64, requires_grad=True), tensor([0.0327], dtype=torch.float64, requires_grad=True), tensor([0.0387], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 33.8008 sec.
update Log-likelihood (torch)=  -5.522956886849817
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1113,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0574.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1874.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4496.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1351.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2440.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0997.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4504.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0327.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0387.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 4 workers, process 4 candidate rules.
[multiprocess log-grad] Elapsed: 26.1735 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02252, std=0.25924, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01993, std=0.22741, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01967, std=0.24080, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01522, std=0.22258, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
Best rule is: E ^ B --> F , E EQUAL F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.02251511131164817
new rule added.
best gain 0.019928328006183875 does not meet thershold 0.02.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1113
Rule0: A --> F , A BEFORE F, weight=0.0574
Rule1: C --> F , C BEFORE F, weight=0.1874
Rule2: Not C --> F , Not C BEFORE F, weight=0.4496
Rule3: B --> F , B EQUAL F, weight=0.1351
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2440
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0997
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4504
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0327
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0387
Rule9: E ^ B --> F , E EQUAL F ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 19.6722 sec.
[1 th iter] Elapsed: 18.1291 sec.
Run 385 batches
grad norm 0.04705440921173747 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.184966569826196
Params  [tensor([0.1207], dtype=torch.float64, requires_grad=True), tensor([0.0614], dtype=torch.float64, requires_grad=True), tensor([0.1824], dtype=torch.float64, requires_grad=True), tensor([0.4513], dtype=torch.float64, requires_grad=True), tensor([0.1309], dtype=torch.float64, requires_grad=True), tensor([0.2398], dtype=torch.float64, requires_grad=True), tensor([0.1007], dtype=torch.float64, requires_grad=True), tensor([0.4550], dtype=torch.float64, requires_grad=True), tensor([0.0388], dtype=torch.float64, requires_grad=True), tensor([0.0433], dtype=torch.float64, requires_grad=True), tensor([-3.3670e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 37.8076 sec.
Update Log-likelihood (torch)=  -5.184966569826196
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1207,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0614.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1824.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4513.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1309.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2398.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1007.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4550.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0388.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0433.
Rule9: E ^ B --> F , E EQUAL F ^ B EQUAL F, weight(torch)=-0.0000.
delete these rules: [9]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1207
Rule0: A --> F , A BEFORE F, weight=0.0614
Rule1: C --> F , C BEFORE F, weight=0.1824
Rule2: Not C --> F , Not C BEFORE F, weight=0.4513
Rule3: B --> F , B EQUAL F, weight=0.1309
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2398
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1007
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4550
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0388
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0433
[0 th iter] Elapsed: 15.7974 sec.
[1 th iter] Elapsed: 16.7066 sec.
Run 301 batches
grad norm 0.08982695016866618 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3784478506231554
Params  [tensor([0.1168], dtype=torch.float64, requires_grad=True), tensor([0.0560], dtype=torch.float64, requires_grad=True), tensor([0.1822], dtype=torch.float64, requires_grad=True), tensor([0.4513], dtype=torch.float64, requires_grad=True), tensor([0.1216], dtype=torch.float64, requires_grad=True), tensor([0.2413], dtype=torch.float64, requires_grad=True), tensor([0.1039], dtype=torch.float64, requires_grad=True), tensor([0.4646], dtype=torch.float64, requires_grad=True), tensor([0.0451], dtype=torch.float64, requires_grad=True), tensor([0.0466], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 32.5101 sec.
update Log-likelihood (torch)=  -5.3784478506231554
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1168,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0560.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1822.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4513.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1216.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2413.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1039.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4646.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0451.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0466.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 3 workers, process 3 candidate rules.
[multiprocess log-grad] Elapsed: 24.3511 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01995, std=0.22767, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01977, std=0.24098, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01520, std=0.22266, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
best gain 0.01995326386997113 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: A --> F , A BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 1.2621 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.25080, std=0.67455, Rule = B ^ A --> F , B EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.20185, std=0.61471, Rule = C ^ A --> F , C EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.19701, std=2.25874, Rule = Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14187, std=2.45716, Rule = D ^ A --> F , D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12708, std=2.36466, Rule = Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11585, std=2.42143, Rule = E ^ A --> F , E BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10833, std=2.34760, Rule = Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06831, std=2.39827, Rule = B ^ A --> F , B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06820, std=1.31306, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06811, std=1.19398, Rule = Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06224, std=1.25756, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05720, std=1.28497, Rule = E ^ A --> F , E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05657, std=0.65805, Rule = Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04802, std=1.06099, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04667, std=1.24335, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04238, std=1.22589, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04097, std=0.51860, Rule = C ^ A --> F , C EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03771, std=1.03611, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03565, std=0.48391, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02366, std=0.72212, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01990, std=0.52031, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01510, std=0.57969, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01194, std=0.74152, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00810, std=0.57697, Rule = E ^ A --> F , E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00806, std=0.66579, Rule = D ^ A --> F , D EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00663, std=0.46776, Rule = Not D ^ A --> F , Not D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00596, std=0.51215, Rule = Not C ^ A --> F , Not C EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00457, std=0.75897, Rule = Not B ^ A --> F , Not B EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00127, std=0.54557, Rule = B ^ A --> F , B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00195, std=0.75372, Rule = Not D ^ A --> F , Not D EQUAL F ^ A BEFORE F
-------------
Best rule is: B ^ A --> F , B EQUAL F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.2507958850756355
new rule added.
Best rule is: C ^ A --> F , C EQUAL F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.20184769019723062
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1168
Rule0: A --> F , A BEFORE F, weight=0.0560
Rule1: C --> F , C BEFORE F, weight=0.1822
Rule2: Not C --> F , Not C BEFORE F, weight=0.4513
Rule3: B --> F , B EQUAL F, weight=0.1216
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2413
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1039
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4646
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0451
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0466
Rule9: B ^ A --> F , B EQUAL F ^ A BEFORE F, weight=0.0100
Rule10: C ^ A --> F , C EQUAL F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 19.4333 sec.
[1 th iter] Elapsed: 24.5132 sec.
Run 301 batches
grad norm 0.0687879460364065 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.308244374908745
Params  [tensor([0.1219], dtype=torch.float64, requires_grad=True), tensor([0.0561], dtype=torch.float64, requires_grad=True), tensor([0.1804], dtype=torch.float64, requires_grad=True), tensor([0.4525], dtype=torch.float64, requires_grad=True), tensor([0.1157], dtype=torch.float64, requires_grad=True), tensor([0.2439], dtype=torch.float64, requires_grad=True), tensor([0.0993], dtype=torch.float64, requires_grad=True), tensor([0.4675], dtype=torch.float64, requires_grad=True), tensor([0.0372], dtype=torch.float64, requires_grad=True), tensor([0.0466], dtype=torch.float64, requires_grad=True), tensor([0.0007], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 43.9533 sec.
Update Log-likelihood (torch)=  -5.308244374908745
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1219,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0561.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1804.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4525.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1157.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2439.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0993.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4675.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0372.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0466.
Rule9: B ^ A --> F , B EQUAL F ^ A BEFORE F, weight(torch)=0.0007.
Rule10: C ^ A --> F , C EQUAL F ^ A BEFORE F, weight(torch)=-0.0002.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1219
Rule0: A --> F , A BEFORE F, weight=0.0561
Rule1: C --> F , C BEFORE F, weight=0.1804
Rule2: Not C --> F , Not C BEFORE F, weight=0.4525
Rule3: B --> F , B EQUAL F, weight=0.1157
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2439
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0993
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4675
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0372
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0466
[0 th iter] Elapsed: 16.8635 sec.
[1 th iter] Elapsed: 16.5321 sec.
Run 302 batches
grad norm 0.08642797281040561 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.33235078079251
Params  [tensor([0.1192], dtype=torch.float64, requires_grad=True), tensor([0.0576], dtype=torch.float64, requires_grad=True), tensor([0.1728], dtype=torch.float64, requires_grad=True), tensor([0.4570], dtype=torch.float64, requires_grad=True), tensor([0.1198], dtype=torch.float64, requires_grad=True), tensor([0.2457], dtype=torch.float64, requires_grad=True), tensor([0.0995], dtype=torch.float64, requires_grad=True), tensor([0.4722], dtype=torch.float64, requires_grad=True), tensor([0.0333], dtype=torch.float64, requires_grad=True), tensor([0.0446], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 33.4051 sec.
update Log-likelihood (torch)=  -5.33235078079251
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1192,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0576.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1728.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4570.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1198.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2457.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0995.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4722.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0333.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0446.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 28 candidate rules.
[multiprocess log-grad] Elapsed: 1.2342 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.21074, std=2.25932, Rule = Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.15716, std=2.45631, Rule = D ^ A --> F , D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14417, std=2.35944, Rule = Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13224, std=2.41740, Rule = E ^ A --> F , E BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12291, std=2.34548, Rule = Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08210, std=2.39887, Rule = B ^ A --> F , B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07244, std=1.19421, Rule = Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07237, std=1.31344, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06659, std=1.25871, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06212, std=1.28405, Rule = E ^ A --> F , E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05941, std=0.65761, Rule = Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05254, std=1.06131, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05070, std=1.24390, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04724, std=1.22442, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04263, std=0.51800, Rule = C ^ A --> F , C EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04172, std=1.03619, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03675, std=0.48372, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02485, std=0.72246, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02121, std=0.52007, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01657, std=0.57814, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01370, std=0.74097, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00953, std=0.66576, Rule = D ^ A --> F , D EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00945, std=0.57643, Rule = E ^ A --> F , E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00762, std=0.46793, Rule = Not D ^ A --> F , Not D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00636, std=0.51213, Rule = Not C ^ A --> F , Not C EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00609, std=0.75895, Rule = Not B ^ A --> F , Not B EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00234, std=0.54562, Rule = B ^ A --> F , B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00029, std=0.75394, Rule = Not D ^ A --> F , Not D EQUAL F ^ A BEFORE F
-------------
Best rule is: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.21074235686283202
new rule added.
Best rule is: D ^ A --> F , D BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.15715578873683542
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1192
Rule0: A --> F , A BEFORE F, weight=0.0576
Rule1: C --> F , C BEFORE F, weight=0.1728
Rule2: Not C --> F , Not C BEFORE F, weight=0.4570
Rule3: B --> F , B EQUAL F, weight=0.1198
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2457
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0995
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4722
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0333
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0446
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 19.6520 sec.
[1 th iter] Elapsed: 20.1253 sec.
[2 th iter] Elapsed: 19.1488 sec.
Run 680 batches
grad norm 0.06471653513695225 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3698579965118975
Params  [tensor([0.1167], dtype=torch.float64, requires_grad=True), tensor([0.0422], dtype=torch.float64, requires_grad=True), tensor([0.1716], dtype=torch.float64, requires_grad=True), tensor([0.4546], dtype=torch.float64, requires_grad=True), tensor([0.1203], dtype=torch.float64, requires_grad=True), tensor([0.2355], dtype=torch.float64, requires_grad=True), tensor([0.0970], dtype=torch.float64, requires_grad=True), tensor([0.4685], dtype=torch.float64, requires_grad=True), tensor([0.0257], dtype=torch.float64, requires_grad=True), tensor([0.0481], dtype=torch.float64, requires_grad=True), tensor([0.0121], dtype=torch.float64, requires_grad=True), tensor([0.0110], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 58.9332 sec.
Update Log-likelihood (torch)=  -5.3698579965118975
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1167,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0422.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1716.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4546.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1203.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2355.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0970.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4685.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0257.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0481.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0121.
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight(torch)=0.0110.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 19 candidate rules.
[multiprocess log-grad] Elapsed: 1.0252 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.19719, std=2.30478, Rule = Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.18824, std=2.36520, Rule = E ^ A --> F , E BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16209, std=2.31136, Rule = Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12479, std=2.36816, Rule = B ^ A --> F , B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09454, std=1.29146, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09154, std=1.17749, Rule = Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08864, std=1.25627, Rule = E ^ A --> F , E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08767, std=1.24118, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07876, std=1.03706, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07177, std=1.19655, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07036, std=1.22253, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06582, std=1.01017, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06448, std=0.65357, Rule = Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05116, std=0.50369, Rule = C ^ A --> F , C EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04015, std=0.47927, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03118, std=0.71773, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02583, std=0.51554, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02325, std=0.56397, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02040, std=0.73625, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.19718840116002048
new rule added.
Best rule is: E ^ A --> F , E BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.18823845679452214
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1167
Rule0: A --> F , A BEFORE F, weight=0.0422
Rule1: C --> F , C BEFORE F, weight=0.1716
Rule2: Not C --> F , Not C BEFORE F, weight=0.4546
Rule3: B --> F , B EQUAL F, weight=0.1203
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2355
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0970
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4685
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0257
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0481
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0121
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight=0.0110
Rule11: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F, weight=0.0100
Rule12: E ^ A --> F , E BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 23.8178 sec.
[1 th iter] Elapsed: 23.0736 sec.
[2 th iter] Elapsed: 23.0496 sec.
Run 646 batches
grad norm 0.1407099828946204 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.637413229700545
Params  [tensor([0.1164], dtype=torch.float64, requires_grad=True), tensor([0.0366], dtype=torch.float64, requires_grad=True), tensor([0.1695], dtype=torch.float64, requires_grad=True), tensor([0.4602], dtype=torch.float64, requires_grad=True), tensor([0.1239], dtype=torch.float64, requires_grad=True), tensor([0.2292], dtype=torch.float64, requires_grad=True), tensor([0.1000], dtype=torch.float64, requires_grad=True), tensor([0.4708], dtype=torch.float64, requires_grad=True), tensor([0.0284], dtype=torch.float64, requires_grad=True), tensor([0.0475], dtype=torch.float64, requires_grad=True), tensor([0.0234], dtype=torch.float64, requires_grad=True), tensor([0.0153], dtype=torch.float64, requires_grad=True), tensor([0.0102], dtype=torch.float64, requires_grad=True), tensor([0.0079], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1658 min.
Update Log-likelihood (torch)=  -5.637413229700545
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1164,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0366.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1695.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4602.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1239.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2292.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1000.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4708.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0284.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0475.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0234.
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight(torch)=0.0153.
Rule11: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F, weight(torch)=0.0102.
Rule12: E ^ A --> F , E BEFORE F ^ A BEFORE F, weight(torch)=0.0079.
delete these rules: [12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1164
Rule0: A --> F , A BEFORE F, weight=0.0366
Rule1: C --> F , C BEFORE F, weight=0.1695
Rule2: Not C --> F , Not C BEFORE F, weight=0.4602
Rule3: B --> F , B EQUAL F, weight=0.1239
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2292
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1000
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4708
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0284
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0475
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0234
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight=0.0153
Rule11: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F, weight=0.0102
[0 th iter] Elapsed: 20.5923 sec.
[1 th iter] Elapsed: 20.7487 sec.
[2 th iter] Elapsed: 22.1199 sec.
Run 573 batches
grad norm 0.03813923951287576 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.192007990847318
Params  [tensor([0.1228], dtype=torch.float64, requires_grad=True), tensor([0.0326], dtype=torch.float64, requires_grad=True), tensor([0.1701], dtype=torch.float64, requires_grad=True), tensor([0.4636], dtype=torch.float64, requires_grad=True), tensor([0.1225], dtype=torch.float64, requires_grad=True), tensor([0.2250], dtype=torch.float64, requires_grad=True), tensor([0.1021], dtype=torch.float64, requires_grad=True), tensor([0.4796], dtype=torch.float64, requires_grad=True), tensor([0.0313], dtype=torch.float64, requires_grad=True), tensor([0.0523], dtype=torch.float64, requires_grad=True), tensor([0.0347], dtype=torch.float64, requires_grad=True), tensor([0.0219], dtype=torch.float64, requires_grad=True), tensor([0.0081], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0578 min.
update Log-likelihood (torch)=  -5.192007990847318
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1228,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0326.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1701.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4636.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1225.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2250.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1021.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4796.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0313.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0523.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0347.
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight(torch)=0.0219.
Rule11: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F, weight(torch)=0.0081.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 17 candidate rules.
[multiprocess log-grad] Elapsed: 59.1117 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04530, std=0.66394, Rule = Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03117, std=0.53104, Rule = C ^ A --> F , C EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01675, std=0.49640, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01182, std=0.72860, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00488, std=1.24212, Rule = Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00449, std=1.09037, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00164, std=0.53332, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00083, std=0.59977, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00088, std=1.36412, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00180, std=0.75069, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00201, std=1.32596, Rule = E ^ A --> F , E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00351, std=1.06722, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00419, std=1.30467, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01422, std=1.26829, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02069, std=1.29430, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02313, std=2.44427, Rule = Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.06970, std=2.48644, Rule = B ^ A --> F , B BEFORE F ^ A BEFORE F
-------------
Best rule is: Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.04529797045837383
new rule added.
Best rule is: C ^ A --> F , C EQUAL A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.031172519474230952
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1228
Rule0: A --> F , A BEFORE F, weight=0.0326
Rule1: C --> F , C BEFORE F, weight=0.1701
Rule2: Not C --> F , Not C BEFORE F, weight=0.4636
Rule3: B --> F , B EQUAL F, weight=0.1225
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2250
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1021
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4796
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0313
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0523
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0347
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight=0.0219
Rule11: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F, weight=0.0081
Rule12: Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F, weight=0.0100
Rule13: C ^ A --> F , C EQUAL A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 24.2155 sec.
[1 th iter] Elapsed: 24.0482 sec.
Run 358 batches
grad norm 0.03650969053353094 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.293697065389327
Params  [tensor([0.1235], dtype=torch.float64, requires_grad=True), tensor([0.0160], dtype=torch.float64, requires_grad=True), tensor([0.1651], dtype=torch.float64, requires_grad=True), tensor([0.4675], dtype=torch.float64, requires_grad=True), tensor([0.1136], dtype=torch.float64, requires_grad=True), tensor([0.2187], dtype=torch.float64, requires_grad=True), tensor([0.1034], dtype=torch.float64, requires_grad=True), tensor([0.4775], dtype=torch.float64, requires_grad=True), tensor([0.0243], dtype=torch.float64, requires_grad=True), tensor([0.0449], dtype=torch.float64, requires_grad=True), tensor([0.0331], dtype=torch.float64, requires_grad=True), tensor([0.0097], dtype=torch.float64, requires_grad=True), tensor([0.0009], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 48.2716 sec.
Update Log-likelihood (torch)=  -5.293697065389327
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1235,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0160.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1651.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4675.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1136.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2187.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1034.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4775.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0243.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0449.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0331.
Rule10: D ^ A --> F , D BEFORE F ^ A BEFORE F, weight(torch)=0.0097.
Rule11: Not E ^ A --> F , Not E BEFORE F ^ A BEFORE F, weight(torch)=0.0009.
Rule12: Not C ^ A --> F , Not C EQUAL F ^ A BEFORE F, weight(torch)=0.0002.
Rule13: C ^ A --> F , C EQUAL A ^ A BEFORE F, weight(torch)=0.0002.
delete these rules: [10, 11, 12, 13]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1235
Rule0: A --> F , A BEFORE F, weight=0.0160
Rule1: C --> F , C BEFORE F, weight=0.1651
Rule2: Not C --> F , Not C BEFORE F, weight=0.4675
Rule3: B --> F , B EQUAL F, weight=0.1136
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2187
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1034
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4775
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0243
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0449
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0331
[0 th iter] Elapsed: 18.1506 sec.
[1 th iter] Elapsed: 18.3324 sec.
Run 301 batches
grad norm 0.06462721276833717 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.218403637405946
Params  [tensor([0.1205], dtype=torch.float64, requires_grad=True), tensor([0.0149], dtype=torch.float64, requires_grad=True), tensor([0.1674], dtype=torch.float64, requires_grad=True), tensor([0.4694], dtype=torch.float64, requires_grad=True), tensor([0.1107], dtype=torch.float64, requires_grad=True), tensor([0.2154], dtype=torch.float64, requires_grad=True), tensor([0.1057], dtype=torch.float64, requires_grad=True), tensor([0.4849], dtype=torch.float64, requires_grad=True), tensor([0.0292], dtype=torch.float64, requires_grad=True), tensor([0.0494], dtype=torch.float64, requires_grad=True), tensor([0.0461], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 36.4889 sec.
update Log-likelihood (torch)=  -5.218403637405946
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1205,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0149.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1674.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4694.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1107.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2154.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1057.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4849.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0292.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0494.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0461.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 15 workers, process 15 candidate rules.
[multiprocess log-grad] Elapsed: 40.3490 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.16215, std=2.30168, Rule = Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09185, std=1.17815, Rule = Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08997, std=1.23899, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08878, std=2.39761, Rule = B ^ A --> F , B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08532, std=1.26887, Rule = E ^ A --> F , E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08133, std=1.30802, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07406, std=1.04266, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06695, std=1.21066, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06065, std=1.01799, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05505, std=1.23885, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03373, std=0.48644, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03105, std=0.71932, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02899, std=0.51485, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02133, std=0.57582, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01903, std=0.73833, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.16214551328809065
new rule added.
Best rule is: Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.09184717232811485
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1205
Rule0: A --> F , A BEFORE F, weight=0.0149
Rule1: C --> F , C BEFORE F, weight=0.1674
Rule2: Not C --> F , Not C BEFORE F, weight=0.4694
Rule3: B --> F , B EQUAL F, weight=0.1107
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2154
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1057
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4849
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0292
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0494
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0461
Rule10: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0100
Rule11: Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 20.9703 sec.
[1 th iter] Elapsed: 22.1313 sec.
Run 301 batches
grad norm 0.07704271415711743 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.5412245632982255
Params  [tensor([0.1179], dtype=torch.float64, requires_grad=True), tensor([0.0114], dtype=torch.float64, requires_grad=True), tensor([0.1633], dtype=torch.float64, requires_grad=True), tensor([0.4742], dtype=torch.float64, requires_grad=True), tensor([0.1073], dtype=torch.float64, requires_grad=True), tensor([0.2206], dtype=torch.float64, requires_grad=True), tensor([0.1103], dtype=torch.float64, requires_grad=True), tensor([0.4898], dtype=torch.float64, requires_grad=True), tensor([0.0263], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.0554], dtype=torch.float64, requires_grad=True), tensor([0.0166], dtype=torch.float64, requires_grad=True), tensor([0.0017], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 43.1081 sec.
Update Log-likelihood (torch)=  -5.5412245632982255
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1179,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0114.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1633.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4742.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1073.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2206.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1103.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4898.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0263.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0488.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0554.
Rule10: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0166.
Rule11: Not D ^ A --> F , Not D BEFORE A ^ A BEFORE F, weight(torch)=0.0017.
delete these rules: [11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1179
Rule0: A --> F , A BEFORE F, weight=0.0114
Rule1: C --> F , C BEFORE F, weight=0.1633
Rule2: Not C --> F , Not C BEFORE F, weight=0.4742
Rule3: B --> F , B EQUAL F, weight=0.1073
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2206
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1103
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4898
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0263
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0488
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0554
Rule10: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0166
[0 th iter] Elapsed: 19.0500 sec.
[1 th iter] Elapsed: 22.9744 sec.
Run 301 batches
grad norm 0.046871901344570616 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3724913157348935
Params  [tensor([0.1112], dtype=torch.float64, requires_grad=True), tensor([0.0061], dtype=torch.float64, requires_grad=True), tensor([0.1552], dtype=torch.float64, requires_grad=True), tensor([0.4677], dtype=torch.float64, requires_grad=True), tensor([0.1063], dtype=torch.float64, requires_grad=True), tensor([0.2171], dtype=torch.float64, requires_grad=True), tensor([0.1045], dtype=torch.float64, requires_grad=True), tensor([0.4883], dtype=torch.float64, requires_grad=True), tensor([0.0120], dtype=torch.float64, requires_grad=True), tensor([0.0505], dtype=torch.float64, requires_grad=True), tensor([0.0484], dtype=torch.float64, requires_grad=True), tensor([0.0161], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 42.0310 sec.
update Log-likelihood (torch)=  -5.3724913157348935
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1112,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0061.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1552.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4677.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1063.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2171.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1045.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4883.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0120.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0505.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0484.
Rule10: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0161.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 13 workers, process 13 candidate rules.
[multiprocess log-grad] Elapsed: 37.4646 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.13198, std=2.35939, Rule = B ^ A --> F , B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10589, std=1.24151, Rule = E ^ A --> F , E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10389, std=1.22509, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10078, std=1.28474, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09493, std=1.02166, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08524, std=1.18402, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07868, std=0.99571, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07240, std=1.21651, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03791, std=0.47986, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03680, std=0.71507, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03306, std=0.50999, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02689, std=0.56118, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02534, std=0.73298, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: B ^ A --> F , B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.1319830016564738
new rule added.
Best rule is: E ^ A --> F , E BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.10588502600445791
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1112
Rule0: A --> F , A BEFORE F, weight=0.0061
Rule1: C --> F , C BEFORE F, weight=0.1552
Rule2: Not C --> F , Not C BEFORE F, weight=0.4677
Rule3: B --> F , B EQUAL F, weight=0.1063
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2171
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1045
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4883
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0120
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0505
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0484
Rule10: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0161
Rule11: B ^ A --> F , B BEFORE F ^ A BEFORE F, weight=0.0100
Rule12: E ^ A --> F , E BEFORE A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 26.8227 sec.
[1 th iter] Elapsed: 22.5984 sec.
Run 365 batches
grad norm 0.09945066049813868 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.208409744051884
Params  [tensor([0.1132], dtype=torch.float64, requires_grad=True), tensor([0.0082], dtype=torch.float64, requires_grad=True), tensor([0.1583], dtype=torch.float64, requires_grad=True), tensor([0.4785], dtype=torch.float64, requires_grad=True), tensor([0.1076], dtype=torch.float64, requires_grad=True), tensor([0.2191], dtype=torch.float64, requires_grad=True), tensor([0.1095], dtype=torch.float64, requires_grad=True), tensor([0.4944], dtype=torch.float64, requires_grad=True), tensor([0.0151], dtype=torch.float64, requires_grad=True), tensor([0.0525], dtype=torch.float64, requires_grad=True), tensor([0.0545], dtype=torch.float64, requires_grad=True), tensor([0.0143], dtype=torch.float64, requires_grad=True), tensor([-6.2745e-05], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 49.4283 sec.
Update Log-likelihood (torch)=  -5.208409744051884
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1132,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0082.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1583.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4785.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1076.
Rule4: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2191.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1095.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4944.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0151.
Rule8: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0525.
Rule9: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0545.
Rule10: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0143.
Rule11: B ^ A --> F , B BEFORE F ^ A BEFORE F, weight(torch)=-0.0001.
Rule12: E ^ A --> F , E BEFORE A ^ A BEFORE F, weight(torch)=0.0002.
delete these rules: [0, 11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1132
Rule0: C --> F , C BEFORE F, weight=0.1583
Rule1: Not C --> F , Not C BEFORE F, weight=0.4785
Rule2: B --> F , B EQUAL F, weight=0.1076
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2191
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1095
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4944
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0151
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0525
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0545
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0143
[0 th iter] Elapsed: 18.4549 sec.
[1 th iter] Elapsed: 18.9754 sec.
[2 th iter] Elapsed: 18.4999 sec.
Run 579 batches
grad norm 0.06830066172893337 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.294755180011957
Params  [tensor([0.1211], dtype=torch.float64, requires_grad=True), tensor([0.1566], dtype=torch.float64, requires_grad=True), tensor([0.4746], dtype=torch.float64, requires_grad=True), tensor([0.1284], dtype=torch.float64, requires_grad=True), tensor([0.2193], dtype=torch.float64, requires_grad=True), tensor([0.1066], dtype=torch.float64, requires_grad=True), tensor([0.4980], dtype=torch.float64, requires_grad=True), tensor([0.0137], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.0543], dtype=torch.float64, requires_grad=True), tensor([0.0102], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 55.9371 sec.
update Log-likelihood (torch)=  -5.294755180011957
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1211,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1566.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4746.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1284.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2193.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1066.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4980.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0137.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0488.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0543.
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0102.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 11 workers, process 11 candidate rules.
[multiprocess log-grad] Elapsed: 34.6101 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.08407, std=1.24591, Rule = D ^ A --> F , D BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07640, std=1.31398, Rule = B ^ A --> F , B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07229, std=1.04608, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06400, std=1.21324, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05796, std=1.02121, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04908, std=1.24508, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03175, std=0.48795, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03133, std=0.71984, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02796, std=0.51633, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02071, std=0.57656, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01918, std=0.73847, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: D ^ A --> F , D BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.0840739082251789
new rule added.
Best rule is: B ^ A --> F , B BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.07640248994604784
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1211
Rule0: C --> F , C BEFORE F, weight=0.1566
Rule1: Not C --> F , Not C BEFORE F, weight=0.4746
Rule2: B --> F , B EQUAL F, weight=0.1284
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2193
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1066
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4980
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0137
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0488
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0543
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0102
Rule10: D ^ A --> F , D BEFORE A ^ A BEFORE F, weight=0.0100
Rule11: B ^ A --> F , B BEFORE A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 21.6468 sec.
[1 th iter] Elapsed: 21.1158 sec.
[2 th iter] Elapsed: 21.2119 sec.
Run 579 batches
grad norm 0.059320020783801976 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.254125901313928
Params  [tensor([0.1156], dtype=torch.float64, requires_grad=True), tensor([0.1532], dtype=torch.float64, requires_grad=True), tensor([0.4759], dtype=torch.float64, requires_grad=True), tensor([0.1244], dtype=torch.float64, requires_grad=True), tensor([0.2169], dtype=torch.float64, requires_grad=True), tensor([0.1028], dtype=torch.float64, requires_grad=True), tensor([0.5090], dtype=torch.float64, requires_grad=True), tensor([0.0128], dtype=torch.float64, requires_grad=True), tensor([0.0529], dtype=torch.float64, requires_grad=True), tensor([0.0589], dtype=torch.float64, requires_grad=True), tensor([0.0168], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0664 min.
Update Log-likelihood (torch)=  -5.254125901313928
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1156,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1532.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4759.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1244.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2169.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1028.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5090.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0128.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0529.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0589.
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0168.
Rule10: D ^ A --> F , D BEFORE A ^ A BEFORE F, weight(torch)=-0.0002.
Rule11: B ^ A --> F , B BEFORE A ^ A BEFORE F, weight(torch)=-0.0003.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1156
Rule0: C --> F , C BEFORE F, weight=0.1532
Rule1: Not C --> F , Not C BEFORE F, weight=0.4759
Rule2: B --> F , B EQUAL F, weight=0.1244
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2169
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1028
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5090
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0128
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0529
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0589
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0168
[0 th iter] Elapsed: 19.0622 sec.
[1 th iter] Elapsed: 18.6421 sec.
Run 473 batches
grad norm 0.086654643421865 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.44618111563459
Params  [tensor([0.1096], dtype=torch.float64, requires_grad=True), tensor([0.1534], dtype=torch.float64, requires_grad=True), tensor([0.4773], dtype=torch.float64, requires_grad=True), tensor([0.1221], dtype=torch.float64, requires_grad=True), tensor([0.2092], dtype=torch.float64, requires_grad=True), tensor([0.1024], dtype=torch.float64, requires_grad=True), tensor([0.5062], dtype=torch.float64, requires_grad=True), tensor([0.0112], dtype=torch.float64, requires_grad=True), tensor([0.0524], dtype=torch.float64, requires_grad=True), tensor([0.0600], dtype=torch.float64, requires_grad=True), tensor([0.0107], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 37.7101 sec.
update Log-likelihood (torch)=  -5.44618111563459
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1096,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1534.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4773.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1221.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2092.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1024.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5062.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0112.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0524.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0600.
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0107.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 9 workers, process 9 candidate rules.
[multiprocess log-grad] Elapsed: 31.8916 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.07175, std=1.03602, Rule = C ^ A --> F , C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06330, std=1.20194, Rule = Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05766, std=1.01132, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04560, std=1.23517, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03087, std=0.71774, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03021, std=0.48499, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02759, std=0.51290, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02088, std=0.57154, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01926, std=0.73641, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: C ^ A --> F , C BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.07174971009085951
new rule added.
Best rule is: Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.06330494579962015
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1096
Rule0: C --> F , C BEFORE F, weight=0.1534
Rule1: Not C --> F , Not C BEFORE F, weight=0.4773
Rule2: B --> F , B EQUAL F, weight=0.1221
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2092
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1024
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5062
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0112
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0524
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0600
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight=0.0107
Rule10: C ^ A --> F , C BEFORE A ^ A BEFORE F, weight=0.0100
Rule11: Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 20.9977 sec.
[1 th iter] Elapsed: 21.3771 sec.
Run 302 batches
grad norm 0.05103714944044423 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.2650838199332
Params  [tensor([0.1112], dtype=torch.float64, requires_grad=True), tensor([0.1517], dtype=torch.float64, requires_grad=True), tensor([0.4780], dtype=torch.float64, requires_grad=True), tensor([0.1197], dtype=torch.float64, requires_grad=True), tensor([0.2050], dtype=torch.float64, requires_grad=True), tensor([0.0975], dtype=torch.float64, requires_grad=True), tensor([0.5136], dtype=torch.float64, requires_grad=True), tensor([0.0146], dtype=torch.float64, requires_grad=True), tensor([0.0516], dtype=torch.float64, requires_grad=True), tensor([0.0540], dtype=torch.float64, requires_grad=True), tensor([0.0092], dtype=torch.float64, requires_grad=True), tensor([-8.9649e-05], dtype=torch.float64, requires_grad=True), tensor([0.0001], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 42.3820 sec.
Update Log-likelihood (torch)=  -5.2650838199332
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1112,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1517.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4780.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1197.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2050.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0975.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5136.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0146.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0516.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0540.
Rule9: Not D ^ A --> F , Not D BEFORE F ^ A BEFORE F, weight(torch)=0.0092.
Rule10: C ^ A --> F , C BEFORE A ^ A BEFORE F, weight(torch)=-0.0001.
Rule11: Not E ^ A --> F , Not E BEFORE A ^ A BEFORE F, weight(torch)=0.0001.
delete these rules: [9, 10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1112
Rule0: C --> F , C BEFORE F, weight=0.1517
Rule1: Not C --> F , Not C BEFORE F, weight=0.4780
Rule2: B --> F , B EQUAL F, weight=0.1197
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2050
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0975
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5136
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0146
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0516
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0540
[0 th iter] Elapsed: 18.3361 sec.
[1 th iter] Elapsed: 17.2330 sec.
Run 459 batches
grad norm 0.04709127367444761 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.369520712264995
Params  [tensor([0.1084], dtype=torch.float64, requires_grad=True), tensor([0.1518], dtype=torch.float64, requires_grad=True), tensor([0.4887], dtype=torch.float64, requires_grad=True), tensor([0.1215], dtype=torch.float64, requires_grad=True), tensor([0.2061], dtype=torch.float64, requires_grad=True), tensor([0.1013], dtype=torch.float64, requires_grad=True), tensor([0.5111], dtype=torch.float64, requires_grad=True), tensor([0.0145], dtype=torch.float64, requires_grad=True), tensor([0.0532], dtype=torch.float64, requires_grad=True), tensor([0.0567], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 35.5750 sec.
update Log-likelihood (torch)=  -5.369520712264995
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1084,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1518.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4887.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1215.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2061.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1013.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5111.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0145.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0532.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0567.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 7 workers, process 7 candidate rules.
[multiprocess log-grad] Elapsed: 29.9055 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06070, std=1.01018, Rule = Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05388, std=1.23011, Rule = Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03246, std=0.48414, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03203, std=0.71713, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03045, std=0.51111, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02269, std=0.57212, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02052, std=0.73583, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.06069516994722225
new rule added.
Best rule is: Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.05387854667738516
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1084
Rule0: C --> F , C BEFORE F, weight=0.1518
Rule1: Not C --> F , Not C BEFORE F, weight=0.4887
Rule2: B --> F , B EQUAL F, weight=0.1215
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2061
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1013
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5111
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0145
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0532
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0567
Rule9: Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F, weight=0.0100
Rule10: Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 19.5251 sec.
[1 th iter] Elapsed: 20.4903 sec.
Run 486 batches
grad norm 0.05388357197757975 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.0650697754600875
Params  [tensor([0.1140], dtype=torch.float64, requires_grad=True), tensor([0.1480], dtype=torch.float64, requires_grad=True), tensor([0.4904], dtype=torch.float64, requires_grad=True), tensor([0.1204], dtype=torch.float64, requires_grad=True), tensor([0.2031], dtype=torch.float64, requires_grad=True), tensor([0.1014], dtype=torch.float64, requires_grad=True), tensor([0.5211], dtype=torch.float64, requires_grad=True), tensor([0.0159], dtype=torch.float64, requires_grad=True), tensor([0.0539], dtype=torch.float64, requires_grad=True), tensor([0.0636], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 40.0214 sec.
Update Log-likelihood (torch)=  -5.0650697754600875
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1140,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1480.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4904.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1204.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2031.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1014.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5211.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0159.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0539.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0636.
Rule9: Not C ^ A --> F , Not C BEFORE A ^ A BEFORE F, weight(torch)=-0.0002.
Rule10: Not B ^ A --> F , Not B BEFORE A ^ A BEFORE F, weight(torch)=0.0002.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1140
Rule0: C --> F , C BEFORE F, weight=0.1480
Rule1: Not C --> F , Not C BEFORE F, weight=0.4904
Rule2: B --> F , B EQUAL F, weight=0.1204
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2031
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1014
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5211
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0159
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0539
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0636
[0 th iter] Elapsed: 18.2159 sec.
[1 th iter] Elapsed: 17.7226 sec.
Run 303 batches
grad norm 0.07942786793928473 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.588634080829251
Params  [tensor([0.1092], dtype=torch.float64, requires_grad=True), tensor([0.1435], dtype=torch.float64, requires_grad=True), tensor([0.4870], dtype=torch.float64, requires_grad=True), tensor([0.1167], dtype=torch.float64, requires_grad=True), tensor([0.2000], dtype=torch.float64, requires_grad=True), tensor([0.0963], dtype=torch.float64, requires_grad=True), tensor([0.5192], dtype=torch.float64, requires_grad=True), tensor([0.0099], dtype=torch.float64, requires_grad=True), tensor([0.0545], dtype=torch.float64, requires_grad=True), tensor([0.0695], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 35.9450 sec.
update Log-likelihood (torch)=  -5.588634080829251
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1092,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1435.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4870.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1167.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2000.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0963.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5192.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0099.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0545.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0695.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 5 workers, process 5 candidate rules.
[multiprocess log-grad] Elapsed: 27.7265 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03128, std=0.71774, Rule = Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02961, std=0.51106, Rule = D ^ A --> F , D EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02918, std=0.48589, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02196, std=0.57306, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02025, std=0.73635, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.0312783935078875
new rule added.
Best rule is: D ^ A --> F , D EQUAL A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.02960708999569555
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1092
Rule0: C --> F , C BEFORE F, weight=0.1435
Rule1: Not C --> F , Not C BEFORE F, weight=0.4870
Rule2: B --> F , B EQUAL F, weight=0.1167
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2000
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0963
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5192
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0099
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0545
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0695
Rule9: Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F, weight=0.0100
Rule10: D ^ A --> F , D EQUAL A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 22.8258 sec.
[1 th iter] Elapsed: 22.3499 sec.
Run 301 batches
grad norm 0.023875354947745925 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.39804293011478
Params  [tensor([0.1149], dtype=torch.float64, requires_grad=True), tensor([0.1449], dtype=torch.float64, requires_grad=True), tensor([0.4885], dtype=torch.float64, requires_grad=True), tensor([0.1093], dtype=torch.float64, requires_grad=True), tensor([0.1992], dtype=torch.float64, requires_grad=True), tensor([0.0946], dtype=torch.float64, requires_grad=True), tensor([0.5244], dtype=torch.float64, requires_grad=True), tensor([0.0081], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True), tensor([0.0702], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 45.1822 sec.
Update Log-likelihood (torch)=  -5.39804293011478
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1149,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1449.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4885.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1093.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1992.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0946.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5244.
Rule6: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0081.
Rule7: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0518.
Rule8: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0702.
Rule9: Not E ^ A --> F , Not E EQUAL F ^ A BEFORE F, weight(torch)=0.0002.
Rule10: D ^ A --> F , D EQUAL A ^ A BEFORE F, weight(torch)=-0.0002.
delete these rules: [6, 9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1149
Rule0: C --> F , C BEFORE F, weight=0.1449
Rule1: Not C --> F , Not C BEFORE F, weight=0.4885
Rule2: B --> F , B EQUAL F, weight=0.1093
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1992
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0946
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5244
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0518
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0702
[0 th iter] Elapsed: 17.7963 sec.
[1 th iter] Elapsed: 17.7910 sec.
Run 301 batches
grad norm 0.06983886265144945 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.525307387747059
Params  [tensor([0.1163], dtype=torch.float64, requires_grad=True), tensor([0.1503], dtype=torch.float64, requires_grad=True), tensor([0.4994], dtype=torch.float64, requires_grad=True), tensor([0.1097], dtype=torch.float64, requires_grad=True), tensor([0.1973], dtype=torch.float64, requires_grad=True), tensor([0.1002], dtype=torch.float64, requires_grad=True), tensor([0.5260], dtype=torch.float64, requires_grad=True), tensor([0.0576], dtype=torch.float64, requires_grad=True), tensor([0.0684], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 35.5929 sec.
update Log-likelihood (torch)=  -5.525307387747059
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1163,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1503.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4994.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1097.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1973.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1002.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5260.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0576.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0684.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 3 workers, process 3 candidate rules.
[multiprocess log-grad] Elapsed: 24.3645 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02408, std=0.49166, Rule = Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01545, std=0.58318, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01334, std=0.74107, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
Best rule is: Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.02407795871445264
new rule added.
best gain 0.015446726419101957 does not meet thershold 0.02.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1163
Rule0: C --> F , C BEFORE F, weight=0.1503
Rule1: Not C --> F , Not C BEFORE F, weight=0.4994
Rule2: B --> F , B EQUAL F, weight=0.1097
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1973
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1002
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5260
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0576
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0684
Rule8: Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 17.5285 sec.
[1 th iter] Elapsed: 19.4448 sec.
Run 305 batches
grad norm 0.04995653240400866 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.5539382416498375
Params  [tensor([0.1198], dtype=torch.float64, requires_grad=True), tensor([0.1500], dtype=torch.float64, requires_grad=True), tensor([0.5032], dtype=torch.float64, requires_grad=True), tensor([0.1116], dtype=torch.float64, requires_grad=True), tensor([0.1945], dtype=torch.float64, requires_grad=True), tensor([0.1002], dtype=torch.float64, requires_grad=True), tensor([0.5251], dtype=torch.float64, requires_grad=True), tensor([0.0547], dtype=torch.float64, requires_grad=True), tensor([0.0693], dtype=torch.float64, requires_grad=True), tensor([-6.7509e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 36.9790 sec.
Update Log-likelihood (torch)=  -5.5539382416498375
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1198,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1500.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5032.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1116.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1945.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1002.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5251.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0547.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0693.
Rule8: Not B ^ A --> F , Not B EQUAL A ^ A BEFORE F, weight(torch)=-0.0001.
delete these rules: [8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1198
Rule0: C --> F , C BEFORE F, weight=0.1500
Rule1: Not C --> F , Not C BEFORE F, weight=0.5032
Rule2: B --> F , B EQUAL F, weight=0.1116
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1945
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1002
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5251
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0547
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0693
[0 th iter] Elapsed: 16.1341 sec.
[1 th iter] Elapsed: 15.9300 sec.
Run 355 batches
grad norm 0.08481488148826294 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.302645866116981
Params  [tensor([0.1144], dtype=torch.float64, requires_grad=True), tensor([0.1438], dtype=torch.float64, requires_grad=True), tensor([0.5065], dtype=torch.float64, requires_grad=True), tensor([0.1036], dtype=torch.float64, requires_grad=True), tensor([0.1959], dtype=torch.float64, requires_grad=True), tensor([0.0967], dtype=torch.float64, requires_grad=True), tensor([0.5336], dtype=torch.float64, requires_grad=True), tensor([0.0544], dtype=torch.float64, requires_grad=True), tensor([0.0684], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 32.0712 sec.
update Log-likelihood (torch)=  -5.302645866116981
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1144,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1438.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5065.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1036.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1959.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0967.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5336.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0544.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0684.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 2 workers, process 2 candidate rules.
[multiprocess log-grad] Elapsed: 23.6833 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01550, std=0.58404, Rule = Not E ^ A --> F , Not E EQUAL A ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01343, std=0.74109, Rule = E ^ A --> F , E EQUAL F ^ A BEFORE F
-------------
best gain 0.015502208680200169 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: A ^ C --> F , A BEFORE F ^ C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.3496 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.23923, std=0.55408, Rule = B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11661, std=2.28769, Rule = Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10225, std=2.27835, Rule = E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09690, std=2.20968, Rule = D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08713, std=1.95289, Rule = Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07098, std=2.18549, Rule = Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04468, std=1.03427, Rule = Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04393, std=1.07542, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04386, std=1.08576, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04028, std=0.42740, Rule = Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04006, std=1.20560, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03803, std=1.07520, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03466, std=0.49813, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03386, std=1.17909, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03031, std=1.16988, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02889, std=1.17696, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02841, std=0.38884, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02641, std=0.58989, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02554, std=0.63995, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02439, std=1.26510, Rule = E ^ A ^ C --> F , E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02251, std=0.59942, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01919, std=0.45840, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01709, std=0.52316, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01477, std=0.52671, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01472, std=0.54752, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01437, std=0.41961, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01246, std=1.11253, Rule = B ^ A ^ C --> F , B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01237, std=0.39337, Rule = Not D ^ A ^ C --> F , Not D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01129, std=1.11642, Rule = Not B ^ A ^ C --> F , Not B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00911, std=0.44650, Rule = B ^ A ^ C --> F , B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00856, std=0.62900, Rule = Not B ^ A ^ C --> F , Not B EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00750, std=0.60859, Rule = Not E ^ A ^ C --> F , Not E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00489, std=0.59282, Rule = Not D ^ A ^ C --> F , Not D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00283, std=1.99145, Rule = B ^ A ^ C --> F , B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00624, std=1.13276, Rule = Not B ^ A ^ C --> F , Not B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01088, std=0.72000, Rule = Not D ^ A ^ C --> F , Not D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.23922888195921735
new rule added.
Best rule is: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.11661332748066777
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1144
Rule0: C --> F , C BEFORE F, weight=0.1438
Rule1: Not C --> F , Not C BEFORE F, weight=0.5065
Rule2: B --> F , B EQUAL F, weight=0.1036
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1959
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0967
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5336
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0544
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0684
Rule8: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule9: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 23.8531 sec.
[1 th iter] Elapsed: 24.0503 sec.
Run 302 batches
grad norm 0.08384878619748272 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.504780484623846
Params  [tensor([0.1135], dtype=torch.float64, requires_grad=True), tensor([0.1422], dtype=torch.float64, requires_grad=True), tensor([0.5103], dtype=torch.float64, requires_grad=True), tensor([0.1084], dtype=torch.float64, requires_grad=True), tensor([0.1941], dtype=torch.float64, requires_grad=True), tensor([0.1023], dtype=torch.float64, requires_grad=True), tensor([0.5379], dtype=torch.float64, requires_grad=True), tensor([0.0502], dtype=torch.float64, requires_grad=True), tensor([0.0721], dtype=torch.float64, requires_grad=True), tensor([0.0017], dtype=torch.float64, requires_grad=True), tensor([0.0225], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 47.9119 sec.
Update Log-likelihood (torch)=  -5.504780484623846
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1135,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1422.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5103.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1084.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1941.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1023.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5379.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0502.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0721.
Rule8: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0017.
Rule9: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0225.
delete these rules: [8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1135
Rule0: C --> F , C BEFORE F, weight=0.1422
Rule1: Not C --> F , Not C BEFORE F, weight=0.5103
Rule2: B --> F , B EQUAL F, weight=0.1084
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1941
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1023
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5379
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0502
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0721
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0225
[0 th iter] Elapsed: 23.7288 sec.
[1 th iter] Elapsed: 20.5982 sec.
Run 302 batches
grad norm 0.06615850955146631 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.0762590479761105
Params  [tensor([0.1177], dtype=torch.float64, requires_grad=True), tensor([0.1416], dtype=torch.float64, requires_grad=True), tensor([0.5027], dtype=torch.float64, requires_grad=True), tensor([0.1073], dtype=torch.float64, requires_grad=True), tensor([0.1837], dtype=torch.float64, requires_grad=True), tensor([0.1019], dtype=torch.float64, requires_grad=True), tensor([0.5382], dtype=torch.float64, requires_grad=True), tensor([0.0509], dtype=torch.float64, requires_grad=True), tensor([0.0694], dtype=torch.float64, requires_grad=True), tensor([0.0220], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 44.3385 sec.
update Log-likelihood (torch)=  -5.0762590479761105
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1177,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1416.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5027.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1073.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1837.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1019.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5382.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0509.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0694.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0220.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 3.2778 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.07279, std=2.23500, Rule = D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05706, std=2.02575, Rule = Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05347, std=2.51746, Rule = E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04771, std=2.21116, Rule = Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03720, std=0.43112, Rule = Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03209, std=1.04947, Rule = Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03006, std=1.10670, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02964, std=1.09749, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02767, std=0.53752, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02577, std=0.39197, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02507, std=1.09165, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02494, std=0.59273, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02164, std=0.64369, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01673, std=1.33132, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01634, std=0.45969, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01339, std=0.68840, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01301, std=1.23354, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01221, std=0.52956, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01211, std=0.55111, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01053, std=0.43071, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00994, std=0.39567, Rule = Not D ^ A ^ C --> F , Not D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00973, std=0.57029, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00959, std=1.30847, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00631, std=0.44942, Rule = B ^ A ^ C --> F , B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00587, std=0.63450, Rule = Not B ^ A ^ C --> F , Not B EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00559, std=1.29343, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00170, std=0.59941, Rule = Not D ^ A ^ C --> F , Not D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00069, std=1.41198, Rule = E ^ A ^ C --> F , E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00185, std=0.69671, Rule = Not E ^ A ^ C --> F , Not E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00513, std=1.17591, Rule = B ^ A ^ C --> F , B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00549, std=1.18509, Rule = Not B ^ A ^ C --> F , Not B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01345, std=0.72327, Rule = Not D ^ A ^ C --> F , Not D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02421, std=1.22249, Rule = Not B ^ A ^ C --> F , Not B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02628, std=2.04599, Rule = B ^ A ^ C --> F , B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.07278531897232006
new rule added.
Best rule is: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.05706393738894491
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1177
Rule0: C --> F , C BEFORE F, weight=0.1416
Rule1: Not C --> F , Not C BEFORE F, weight=0.5027
Rule2: B --> F , B EQUAL F, weight=0.1073
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1837
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1019
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5382
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0509
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0694
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0220
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule10: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 28.0974 sec.
[1 th iter] Elapsed: 32.5896 sec.
Run 302 batches
grad norm 0.09603762050927314 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.34296071212932
Params  [tensor([0.1177], dtype=torch.float64, requires_grad=True), tensor([0.1356], dtype=torch.float64, requires_grad=True), tensor([0.5047], dtype=torch.float64, requires_grad=True), tensor([0.1115], dtype=torch.float64, requires_grad=True), tensor([0.1809], dtype=torch.float64, requires_grad=True), tensor([0.1040], dtype=torch.float64, requires_grad=True), tensor([0.5332], dtype=torch.float64, requires_grad=True), tensor([0.0467], dtype=torch.float64, requires_grad=True), tensor([0.0736], dtype=torch.float64, requires_grad=True), tensor([0.0261], dtype=torch.float64, requires_grad=True), tensor([0.0137], dtype=torch.float64, requires_grad=True), tensor([0.0044], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0116 min.
Update Log-likelihood (torch)=  -5.34296071212932
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1177,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1356.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5047.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1115.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1809.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1040.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5332.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0467.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0736.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0261.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0137.
Rule10: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0044.
delete these rules: [10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1177
Rule0: C --> F , C BEFORE F, weight=0.1356
Rule1: Not C --> F , Not C BEFORE F, weight=0.5047
Rule2: B --> F , B EQUAL F, weight=0.1115
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1809
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1040
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5332
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0467
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0736
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0261
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0137
[0 th iter] Elapsed: 27.0466 sec.
[1 th iter] Elapsed: 29.0227 sec.
Run 433 batches
grad norm 0.07009649961916302 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.540221210111569
Params  [tensor([0.1155], dtype=torch.float64, requires_grad=True), tensor([0.1312], dtype=torch.float64, requires_grad=True), tensor([0.5036], dtype=torch.float64, requires_grad=True), tensor([0.1045], dtype=torch.float64, requires_grad=True), tensor([0.1729], dtype=torch.float64, requires_grad=True), tensor([0.0990], dtype=torch.float64, requires_grad=True), tensor([0.5275], dtype=torch.float64, requires_grad=True), tensor([0.0470], dtype=torch.float64, requires_grad=True), tensor([0.0710], dtype=torch.float64, requires_grad=True), tensor([0.0178], dtype=torch.float64, requires_grad=True), tensor([0.0137], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 56.0748 sec.
update Log-likelihood (torch)=  -5.540221210111569
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1155,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1312.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5036.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1045.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1729.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0990.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5275.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0470.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0710.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0178.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0137.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 25 candidate rules.
[multiprocess log-grad] Elapsed: 3.7855 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.13429, std=2.34520, Rule = E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11080, std=2.16348, Rule = Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06206, std=1.06631, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06190, std=1.07378, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06168, std=1.02341, Rule = Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05444, std=1.06215, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05414, std=1.24069, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04845, std=1.17371, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04605, std=1.21536, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04489, std=0.42276, Rule = Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04086, std=1.20751, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03899, std=1.30765, Rule = E ^ A ^ C --> F , E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03786, std=0.50808, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03340, std=0.38444, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03294, std=0.58542, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03093, std=1.11888, Rule = B ^ A ^ C --> F , B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03075, std=0.63505, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02760, std=1.12312, Rule = Not B ^ A ^ C --> F , Not B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02398, std=0.45154, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02375, std=0.63078, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02048, std=0.53644, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02037, std=0.52172, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02008, std=0.54139, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01833, std=0.41686, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01651, std=0.38838, Rule = Not D ^ A ^ C --> F , Not D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.13428730173863038
new rule added.
Best rule is: Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.11080478879101249
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1155
Rule0: C --> F , C BEFORE F, weight=0.1312
Rule1: Not C --> F , Not C BEFORE F, weight=0.5036
Rule2: B --> F , B EQUAL F, weight=0.1045
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1729
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0990
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5275
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0470
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0710
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0178
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0137
Rule10: E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 51.2733 sec.
[1 th iter] Elapsed: 49.9285 sec.
Run 365 batches
grad norm 0.13955285794767308 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.94252880638818
Params  [tensor([0.1218], dtype=torch.float64, requires_grad=True), tensor([0.1295], dtype=torch.float64, requires_grad=True), tensor([0.5025], dtype=torch.float64, requires_grad=True), tensor([0.1034], dtype=torch.float64, requires_grad=True), tensor([0.1688], dtype=torch.float64, requires_grad=True), tensor([0.0988], dtype=torch.float64, requires_grad=True), tensor([0.5308], dtype=torch.float64, requires_grad=True), tensor([0.0439], dtype=torch.float64, requires_grad=True), tensor([0.0691], dtype=torch.float64, requires_grad=True), tensor([0.0166], dtype=torch.float64, requires_grad=True), tensor([0.0198], dtype=torch.float64, requires_grad=True), tensor([0.0121], dtype=torch.float64, requires_grad=True), tensor([0.0118], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.6870 min.
Update Log-likelihood (torch)=  -5.94252880638818
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1218,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1295.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5025.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1034.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1688.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0988.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5308.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0439.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0691.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0166.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0198.
Rule10: E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0121.
Rule11: Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0118.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 23 candidate rules.
[multiprocess log-grad] Elapsed: 3.7635 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03965, std=0.43086, Rule = Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03241, std=1.09063, Rule = Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03120, std=1.13200, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03088, std=1.12618, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02953, std=0.53688, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02851, std=0.39075, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02690, std=0.59245, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02468, std=0.64715, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02409, std=1.12625, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02259, std=1.33096, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02055, std=1.23043, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01565, std=1.31131, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01534, std=0.68450, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01517, std=0.47193, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01461, std=0.52965, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01253, std=0.42868, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01080, std=0.57321, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01079, std=0.58298, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01069, std=1.29611, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00862, std=0.40542, Rule = Not D ^ A ^ C --> F , Not D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00655, std=1.40928, Rule = E ^ A ^ C --> F , E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00290, std=1.17642, Rule = B ^ A ^ C --> F , B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00139, std=1.18026, Rule = Not B ^ A ^ C --> F , Not B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03964537690409527
new rule added.
Best rule is: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03241036063507625
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1218
Rule0: C --> F , C BEFORE F, weight=0.1295
Rule1: Not C --> F , Not C BEFORE F, weight=0.5025
Rule2: B --> F , B EQUAL F, weight=0.1034
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1688
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0988
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5308
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0439
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0691
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0166
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0198
Rule10: E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0121
Rule11: Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0118
Rule12: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule13: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 1.0124 min.
[1 th iter] Elapsed: 1.0295 min.
[2 th iter] Elapsed: 1.0763 min.
3 th iter
grad norm=0.05615874247637755. num_batch_no_update =96
Head = F, base = 0.1164
Rule0: C --> F , C BEFORE F, weight=0.1300
Rule1: Not C --> F , Not C BEFORE F, weight=0.5062
Rule2: B --> F , B EQUAL F, weight=0.1098
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1720
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0979
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5273
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0391
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0636
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0163
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0181
Rule10: E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0069
Rule11: Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0016
Rule12: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=-0.0001
Rule13: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0002
[3 th iter] Elapsed: 59.8064 sec.
Run 954 batches
grad norm 0.04676115121556961 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.045932234302851
Params  [tensor([0.1152], dtype=torch.float64, requires_grad=True), tensor([0.1339], dtype=torch.float64, requires_grad=True), tensor([0.5082], dtype=torch.float64, requires_grad=True), tensor([0.1062], dtype=torch.float64, requires_grad=True), tensor([0.1671], dtype=torch.float64, requires_grad=True), tensor([0.0991], dtype=torch.float64, requires_grad=True), tensor([0.5289], dtype=torch.float64, requires_grad=True), tensor([0.0402], dtype=torch.float64, requires_grad=True), tensor([0.0631], dtype=torch.float64, requires_grad=True), tensor([0.0168], dtype=torch.float64, requires_grad=True), tensor([0.0199], dtype=torch.float64, requires_grad=True), tensor([0.0055], dtype=torch.float64, requires_grad=True), tensor([0.0053], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([-5.0277e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 4.1152 min.
Update Log-likelihood (torch)=  -5.045932234302851
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1152,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1339.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5082.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1062.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1671.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0991.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5289.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0402.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0631.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0168.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0199.
Rule10: E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0055.
Rule11: Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0053.
Rule12: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=-0.0002.
Rule13: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=-0.0001.
delete these rules: [10, 11, 12, 13]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1152
Rule0: C --> F , C BEFORE F, weight=0.1339
Rule1: Not C --> F , Not C BEFORE F, weight=0.5082
Rule2: B --> F , B EQUAL F, weight=0.1062
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1671
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0991
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5289
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0402
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0631
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0168
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0199
[0 th iter] Elapsed: 36.5733 sec.
[1 th iter] Elapsed: 37.2441 sec.
[2 th iter] Elapsed: 37.8411 sec.
3 th iter
grad norm=0.13371756416743208. num_batch_no_update =151
Head = F, base = 0.1087
Rule0: C --> F , C BEFORE F, weight=0.1357
Rule1: Not C --> F , Not C BEFORE F, weight=0.5188
Rule2: B --> F , B EQUAL F, weight=0.1145
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1642
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1058
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5313
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0347
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0641
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0171
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0219
[3 th iter] Elapsed: 36.7994 sec.
Run 899 batches
grad norm 0.05526646626410296 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.32592686461671
Params  [tensor([0.1104], dtype=torch.float64, requires_grad=True), tensor([0.1416], dtype=torch.float64, requires_grad=True), tensor([0.5203], dtype=torch.float64, requires_grad=True), tensor([0.1156], dtype=torch.float64, requires_grad=True), tensor([0.1588], dtype=torch.float64, requires_grad=True), tensor([0.1050], dtype=torch.float64, requires_grad=True), tensor([0.5312], dtype=torch.float64, requires_grad=True), tensor([0.0398], dtype=torch.float64, requires_grad=True), tensor([0.0579], dtype=torch.float64, requires_grad=True), tensor([0.0147], dtype=torch.float64, requires_grad=True), tensor([0.0194], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.4745 min.
update Log-likelihood (torch)=  -5.32592686461671
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1104,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1416.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5203.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1156.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1588.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1050.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5312.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0398.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0579.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0147.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0194.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 17 candidate rules.
[multiprocess log-grad] Elapsed: 2.1812 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05950, std=1.07116, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05515, std=1.06799, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05243, std=1.06170, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05168, std=1.22237, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04931, std=1.16030, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03954, std=1.19998, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03890, std=1.19092, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03570, std=0.50368, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03199, std=0.38352, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03166, std=0.58406, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02903, std=0.63582, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02347, std=0.61780, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02251, std=0.45434, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01944, std=0.53020, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01900, std=0.41471, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01850, std=0.52140, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01776, std=0.54571, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.05949997514516841
new rule added.
Best rule is: D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.05515174778780661
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1104
Rule0: C --> F , C BEFORE F, weight=0.1416
Rule1: Not C --> F , Not C BEFORE F, weight=0.5203
Rule2: B --> F , B EQUAL F, weight=0.1156
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1588
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1050
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5312
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0398
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0579
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0147
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0194
Rule10: D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 35.6342 sec.
[1 th iter] Elapsed: 30.8766 sec.
Run 301 batches
grad norm 0.12470725160535784 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.68016454881811
Params  [tensor([0.1203], dtype=torch.float64, requires_grad=True), tensor([0.1420], dtype=torch.float64, requires_grad=True), tensor([0.5210], dtype=torch.float64, requires_grad=True), tensor([0.1098], dtype=torch.float64, requires_grad=True), tensor([0.1593], dtype=torch.float64, requires_grad=True), tensor([0.1044], dtype=torch.float64, requires_grad=True), tensor([0.5372], dtype=torch.float64, requires_grad=True), tensor([0.0370], dtype=torch.float64, requires_grad=True), tensor([0.0635], dtype=torch.float64, requires_grad=True), tensor([0.0144], dtype=torch.float64, requires_grad=True), tensor([0.0204], dtype=torch.float64, requires_grad=True), tensor([0.0004], dtype=torch.float64, requires_grad=True), tensor([5.9724e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1086 min.
Update Log-likelihood (torch)=  -5.68016454881811
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1203,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1420.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5210.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1098.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1593.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.1044.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5372.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0370.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0635.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0144.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0204.
Rule10: D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0004.
Rule11: D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0001.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1203
Rule0: C --> F , C BEFORE F, weight=0.1420
Rule1: Not C --> F , Not C BEFORE F, weight=0.5210
Rule2: B --> F , B EQUAL F, weight=0.1098
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1593
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.1044
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5372
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0370
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0635
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0144
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0204
[0 th iter] Elapsed: 23.7069 sec.
[1 th iter] Elapsed: 23.9262 sec.
Run 301 batches
grad norm 0.03981797940753189 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.360095127073334
Params  [tensor([0.1193], dtype=torch.float64, requires_grad=True), tensor([0.1332], dtype=torch.float64, requires_grad=True), tensor([0.5234], dtype=torch.float64, requires_grad=True), tensor([0.1116], dtype=torch.float64, requires_grad=True), tensor([0.1534], dtype=torch.float64, requires_grad=True), tensor([0.0998], dtype=torch.float64, requires_grad=True), tensor([0.5346], dtype=torch.float64, requires_grad=True), tensor([0.0366], dtype=torch.float64, requires_grad=True), tensor([0.0634], dtype=torch.float64, requires_grad=True), tensor([0.0135], dtype=torch.float64, requires_grad=True), tensor([0.0159], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 47.6399 sec.
update Log-likelihood (torch)=  -5.360095127073334
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1193,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1332.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5234.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1116.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1534.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0998.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5346.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0366.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0634.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0135.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0159.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 15 workers, process 15 candidate rules.
[multiprocess log-grad] Elapsed: 1.4809 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06740, std=1.04848, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06714, std=1.20588, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06252, std=1.15080, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05637, std=1.18086, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05383, std=1.17412, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04008, std=0.49831, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03510, std=0.38358, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03490, std=0.58350, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03322, std=0.63167, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02759, std=0.60796, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02710, std=0.44883, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02365, std=0.52377, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02295, std=0.53574, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02177, std=0.52010, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02163, std=0.41301, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.06739692872916077
new rule added.
Best rule is: E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.06713966004640586
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1193
Rule0: C --> F , C BEFORE F, weight=0.1332
Rule1: Not C --> F , Not C BEFORE F, weight=0.5234
Rule2: B --> F , B EQUAL F, weight=0.1116
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1534
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0998
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5346
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0366
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0634
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0135
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0159
Rule10: Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 32.1593 sec.
[1 th iter] Elapsed: 31.8370 sec.
Run 309 batches
grad norm 0.0917711085298232 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.597732269236379
Params  [tensor([0.1210], dtype=torch.float64, requires_grad=True), tensor([0.1355], dtype=torch.float64, requires_grad=True), tensor([0.5266], dtype=torch.float64, requires_grad=True), tensor([0.1191], dtype=torch.float64, requires_grad=True), tensor([0.1532], dtype=torch.float64, requires_grad=True), tensor([0.0982], dtype=torch.float64, requires_grad=True), tensor([0.5385], dtype=torch.float64, requires_grad=True), tensor([0.0406], dtype=torch.float64, requires_grad=True), tensor([0.0700], dtype=torch.float64, requires_grad=True), tensor([0.0121], dtype=torch.float64, requires_grad=True), tensor([0.0257], dtype=torch.float64, requires_grad=True), tensor([6.7879e-05], dtype=torch.float64, requires_grad=True), tensor([-6.2423e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0668 min.
Update Log-likelihood (torch)=  -5.597732269236379
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1210,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1355.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5266.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1191.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1532.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0982.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5385.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0406.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0700.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0121.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0257.
Rule10: Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0001.
Rule11: E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F, weight(torch)=-0.0001.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1210
Rule0: C --> F , C BEFORE F, weight=0.1355
Rule1: Not C --> F , Not C BEFORE F, weight=0.5266
Rule2: B --> F , B EQUAL F, weight=0.1191
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1532
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0982
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5385
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0406
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0700
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0121
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0257
[0 th iter] Elapsed: 23.6141 sec.
[1 th iter] Elapsed: 25.0433 sec.
Run 426 batches
grad norm 0.08002479918295509 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.286963416790706
Params  [tensor([0.1149], dtype=torch.float64, requires_grad=True), tensor([0.1343], dtype=torch.float64, requires_grad=True), tensor([0.5249], dtype=torch.float64, requires_grad=True), tensor([0.1289], dtype=torch.float64, requires_grad=True), tensor([0.1506], dtype=torch.float64, requires_grad=True), tensor([0.0976], dtype=torch.float64, requires_grad=True), tensor([0.5382], dtype=torch.float64, requires_grad=True), tensor([0.0387], dtype=torch.float64, requires_grad=True), tensor([0.0707], dtype=torch.float64, requires_grad=True), tensor([0.0130], dtype=torch.float64, requires_grad=True), tensor([0.0229], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 48.6633 sec.
update Log-likelihood (torch)=  -5.286963416790706
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1149,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1343.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5249.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1289.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1506.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0976.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5382.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0387.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0707.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0130.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0229.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 13 workers, process 13 candidate rules.
[multiprocess log-grad] Elapsed: 1.4502 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03786, std=1.17093, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03530, std=1.20431, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03482, std=0.50548, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03234, std=1.19706, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02976, std=0.38712, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02944, std=0.58670, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02727, std=0.63855, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02198, std=0.61934, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02010, std=0.45733, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01767, std=0.53246, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01692, std=0.52422, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01567, std=0.55089, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01551, std=0.41832, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03786133928463268
new rule added.
Best rule is: Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03529858391133236
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1149
Rule0: C --> F , C BEFORE F, weight=0.1343
Rule1: Not C --> F , Not C BEFORE F, weight=0.5249
Rule2: B --> F , B EQUAL F, weight=0.1289
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1506
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0976
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5382
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0387
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0707
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0130
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0229
Rule10: B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 31.6379 sec.
[1 th iter] Elapsed: 39.7542 sec.
[2 th iter] Elapsed: 39.4258 sec.
Run 506 batches
grad norm 0.03368997608279017 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.207631311479409
Params  [tensor([0.1224], dtype=torch.float64, requires_grad=True), tensor([0.1266], dtype=torch.float64, requires_grad=True), tensor([0.5220], dtype=torch.float64, requires_grad=True), tensor([0.1295], dtype=torch.float64, requires_grad=True), tensor([0.1464], dtype=torch.float64, requires_grad=True), tensor([0.0968], dtype=torch.float64, requires_grad=True), tensor([0.5377], dtype=torch.float64, requires_grad=True), tensor([0.0267], dtype=torch.float64, requires_grad=True), tensor([0.0738], dtype=torch.float64, requires_grad=True), tensor([0.0128], dtype=torch.float64, requires_grad=True), tensor([0.0185], dtype=torch.float64, requires_grad=True), tensor([5.1092e-05], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.8472 min.
Update Log-likelihood (torch)=  -5.207631311479409
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1210,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1309.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5227.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1313.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1485.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0962.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5394.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0302.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0738.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0141.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0176.
Rule10: B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0004.
Rule11: Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0007.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1210
Rule0: C --> F , C BEFORE F, weight=0.1309
Rule1: Not C --> F , Not C BEFORE F, weight=0.5227
Rule2: B --> F , B EQUAL F, weight=0.1313
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1485
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0962
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5394
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0302
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0738
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0141
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0176
[0 th iter] Elapsed: 28.1623 sec.
[1 th iter] Elapsed: 23.1332 sec.
Run 494 batches
grad norm 0.03482723649189207 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.342530602558538
Params  [tensor([0.1169], dtype=torch.float64, requires_grad=True), tensor([0.1294], dtype=torch.float64, requires_grad=True), tensor([0.5261], dtype=torch.float64, requires_grad=True), tensor([0.1293], dtype=torch.float64, requires_grad=True), tensor([0.1451], dtype=torch.float64, requires_grad=True), tensor([0.0908], dtype=torch.float64, requires_grad=True), tensor([0.5346], dtype=torch.float64, requires_grad=True), tensor([0.0340], dtype=torch.float64, requires_grad=True), tensor([0.0727], dtype=torch.float64, requires_grad=True), tensor([0.0154], dtype=torch.float64, requires_grad=True), tensor([0.0163], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 51.3022 sec.
update Log-likelihood (torch)=  -5.342530602558538
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1169,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1294.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5261.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1293.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1451.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0908.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5346.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0340.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0727.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0154.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0163.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 11 workers, process 11 candidate rules.
[multiprocess log-grad] Elapsed: 1.1989 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06144, std=1.15957, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04264, std=0.49346, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03629, std=0.58184, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03608, std=0.38249, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03558, std=0.62753, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02967, std=0.60066, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02941, std=0.44351, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02604, std=0.51819, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02569, std=0.52735, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02338, std=0.51803, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02189, std=0.41079, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.0614379155733822
new rule added.
Best rule is: E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.04263969219514366
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1169
Rule0: C --> F , C BEFORE F, weight=0.1294
Rule1: Not C --> F , Not C BEFORE F, weight=0.5261
Rule2: B --> F , B EQUAL F, weight=0.1293
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1451
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0908
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5346
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0340
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0727
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0154
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0163
Rule10: Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 31.2494 sec.
[1 th iter] Elapsed: 31.8303 sec.
Run 306 batches
grad norm 0.05305322765169613 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.262301972810474
Params  [tensor([0.1129], dtype=torch.float64, requires_grad=True), tensor([0.1290], dtype=torch.float64, requires_grad=True), tensor([0.5269], dtype=torch.float64, requires_grad=True), tensor([0.1240], dtype=torch.float64, requires_grad=True), tensor([0.1453], dtype=torch.float64, requires_grad=True), tensor([0.0909], dtype=torch.float64, requires_grad=True), tensor([0.5340], dtype=torch.float64, requires_grad=True), tensor([0.0403], dtype=torch.float64, requires_grad=True), tensor([0.0703], dtype=torch.float64, requires_grad=True), tensor([0.0142], dtype=torch.float64, requires_grad=True), tensor([0.0167], dtype=torch.float64, requires_grad=True), tensor([0.0010], dtype=torch.float64, requires_grad=True), tensor([0.0006], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0515 min.
Update Log-likelihood (torch)=  -5.262301972810474
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1129,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1290.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5269.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1240.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1453.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0909.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5340.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0403.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0703.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0142.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0167.
Rule10: Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0010.
Rule11: E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0006.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1129
Rule0: C --> F , C BEFORE F, weight=0.1290
Rule1: Not C --> F , Not C BEFORE F, weight=0.5269
Rule2: B --> F , B EQUAL F, weight=0.1240
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1453
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0909
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5340
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0403
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0703
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0142
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0167
[0 th iter] Elapsed: 26.0316 sec.
[1 th iter] Elapsed: 24.2895 sec.
Run 461 batches
grad norm 0.09555354896251708 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.416094617398129
Params  [tensor([0.1151], dtype=torch.float64, requires_grad=True), tensor([0.1294], dtype=torch.float64, requires_grad=True), tensor([0.5320], dtype=torch.float64, requires_grad=True), tensor([0.1140], dtype=torch.float64, requires_grad=True), tensor([0.1496], dtype=torch.float64, requires_grad=True), tensor([0.0945], dtype=torch.float64, requires_grad=True), tensor([0.5376], dtype=torch.float64, requires_grad=True), tensor([0.0394], dtype=torch.float64, requires_grad=True), tensor([0.0722], dtype=torch.float64, requires_grad=True), tensor([0.0221], dtype=torch.float64, requires_grad=True), tensor([0.0189], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 50.3270 sec.
update Log-likelihood (torch)=  -5.416094617398129
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1151,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1294.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5320.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1140.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1496.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0945.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5376.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0394.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0722.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0221.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0189.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 9 workers, process 9 candidate rules.
[multiprocess log-grad] Elapsed: 1.1529 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02937, std=0.38767, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02902, std=0.58785, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02634, std=0.63894, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01994, std=0.45615, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01939, std=0.64934, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01626, std=0.52489, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01577, std=0.54776, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01568, std=0.54863, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01444, std=0.42181, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.029373356571562544
new rule added.
Best rule is: Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.0290183658394512
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1151
Rule0: C --> F , C BEFORE F, weight=0.1294
Rule1: Not C --> F , Not C BEFORE F, weight=0.5320
Rule2: B --> F , B EQUAL F, weight=0.1140
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1496
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0945
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5376
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0394
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0722
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0221
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0189
Rule10: B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 31.2182 sec.
[1 th iter] Elapsed: 31.4548 sec.
Run 417 batches
grad norm 0.04146533026163462 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.580693666579175
Params  [tensor([0.1150], dtype=torch.float64, requires_grad=True), tensor([0.1257], dtype=torch.float64, requires_grad=True), tensor([0.5322], dtype=torch.float64, requires_grad=True), tensor([0.1128], dtype=torch.float64, requires_grad=True), tensor([0.1462], dtype=torch.float64, requires_grad=True), tensor([0.0963], dtype=torch.float64, requires_grad=True), tensor([0.5429], dtype=torch.float64, requires_grad=True), tensor([0.0318], dtype=torch.float64, requires_grad=True), tensor([0.0745], dtype=torch.float64, requires_grad=True), tensor([0.0215], dtype=torch.float64, requires_grad=True), tensor([0.0202], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True), tensor([-9.1877e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0447 min.
Update Log-likelihood (torch)=  -5.580693666579175
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1150,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1257.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5322.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1128.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1462.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0963.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5429.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0318.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0745.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0215.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0202.
Rule10: B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=-0.0003.
Rule11: Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=-0.0001.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1150
Rule0: C --> F , C BEFORE F, weight=0.1257
Rule1: Not C --> F , Not C BEFORE F, weight=0.5322
Rule2: B --> F , B EQUAL F, weight=0.1128
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1462
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0963
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5429
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0318
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0745
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0215
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0202
[0 th iter] Elapsed: 23.6522 sec.
[1 th iter] Elapsed: 23.1118 sec.
Run 409 batches
grad norm 0.08390090729879891 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.728105255112578
Params  [tensor([0.1154], dtype=torch.float64, requires_grad=True), tensor([0.1226], dtype=torch.float64, requires_grad=True), tensor([0.5384], dtype=torch.float64, requires_grad=True), tensor([0.1053], dtype=torch.float64, requires_grad=True), tensor([0.1458], dtype=torch.float64, requires_grad=True), tensor([0.0984], dtype=torch.float64, requires_grad=True), tensor([0.5414], dtype=torch.float64, requires_grad=True), tensor([0.0322], dtype=torch.float64, requires_grad=True), tensor([0.0729], dtype=torch.float64, requires_grad=True), tensor([0.0283], dtype=torch.float64, requires_grad=True), tensor([0.0191], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 46.7703 sec.
update Log-likelihood (torch)=  -5.728105255112578
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1154,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1226.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5384.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1053.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1458.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0984.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5414.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0322.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0729.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0283.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0191.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 7 workers, process 7 candidate rules.
[multiprocess log-grad] Elapsed: 1.1179 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02590, std=0.63865, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02051, std=0.45372, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01686, std=0.68122, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01672, std=0.54571, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01588, std=0.52533, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01401, std=0.56454, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01372, std=0.42539, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.025901400071300578
new rule added.
Best rule is: D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.020507293647117994
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1154
Rule0: C --> F , C BEFORE F, weight=0.1226
Rule1: Not C --> F , Not C BEFORE F, weight=0.5384
Rule2: B --> F , B EQUAL F, weight=0.1053
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1458
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0984
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5414
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0322
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0729
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0283
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0191
Rule10: E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 35.3798 sec.
[1 th iter] Elapsed: 31.9269 sec.
Run 312 batches
grad norm 0.02863035958837948 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3879386961208775
Params  [tensor([0.1157], dtype=torch.float64, requires_grad=True), tensor([0.1217], dtype=torch.float64, requires_grad=True), tensor([0.5411], dtype=torch.float64, requires_grad=True), tensor([0.1031], dtype=torch.float64, requires_grad=True), tensor([0.1431], dtype=torch.float64, requires_grad=True), tensor([0.0969], dtype=torch.float64, requires_grad=True), tensor([0.5405], dtype=torch.float64, requires_grad=True), tensor([0.0340], dtype=torch.float64, requires_grad=True), tensor([0.0712], dtype=torch.float64, requires_grad=True), tensor([0.0301], dtype=torch.float64, requires_grad=True), tensor([0.0208], dtype=torch.float64, requires_grad=True), tensor([4.1397e-05], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1219 min.
Update Log-likelihood (torch)=  -5.3879386961208775
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1157,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1217.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5411.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1031.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1431.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0969.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5405.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0340.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0712.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0301.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0208.
Rule10: E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0000.
Rule11: D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0002.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1157
Rule0: C --> F , C BEFORE F, weight=0.1217
Rule1: Not C --> F , Not C BEFORE F, weight=0.5411
Rule2: B --> F , B EQUAL F, weight=0.1031
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1431
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0969
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5405
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0340
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0712
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0301
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0208
[0 th iter] Elapsed: 25.8129 sec.
[1 th iter] Elapsed: 27.8892 sec.
Run 304 batches
grad norm 0.0759597699361216 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.275058823567335
Params  [tensor([0.1197], dtype=torch.float64, requires_grad=True), tensor([0.1176], dtype=torch.float64, requires_grad=True), tensor([0.5426], dtype=torch.float64, requires_grad=True), tensor([0.1082], dtype=torch.float64, requires_grad=True), tensor([0.1373], dtype=torch.float64, requires_grad=True), tensor([0.0897], dtype=torch.float64, requires_grad=True), tensor([0.5422], dtype=torch.float64, requires_grad=True), tensor([0.0308], dtype=torch.float64, requires_grad=True), tensor([0.0700], dtype=torch.float64, requires_grad=True), tensor([0.0287], dtype=torch.float64, requires_grad=True), tensor([0.0201], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.7128 sec.
update Log-likelihood (torch)=  -5.275058823567335
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1197,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1176.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5426.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1082.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1373.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0897.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5422.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0308.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0700.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0287.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0201.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 5 workers, process 5 candidate rules.
[multiprocess log-grad] Elapsed: 1.0924 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02302, std=0.65754, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02185, std=0.53877, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02053, std=0.52185, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02008, std=0.54997, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01873, std=0.41936, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.02301957773825639
new rule added.
Best rule is: D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.021853229249480563
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1197
Rule0: C --> F , C BEFORE F, weight=0.1176
Rule1: Not C --> F , Not C BEFORE F, weight=0.5426
Rule2: B --> F , B EQUAL F, weight=0.1082
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1373
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0897
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5422
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0308
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0700
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0287
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0201
Rule10: Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 32.0390 sec.
[1 th iter] Elapsed: 33.1762 sec.
Run 303 batches
grad norm 0.02275063145680869 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.2268103626060345
Params  [tensor([0.1145], dtype=torch.float64, requires_grad=True), tensor([0.1160], dtype=torch.float64, requires_grad=True), tensor([0.5419], dtype=torch.float64, requires_grad=True), tensor([0.0987], dtype=torch.float64, requires_grad=True), tensor([0.1368], dtype=torch.float64, requires_grad=True), tensor([0.0839], dtype=torch.float64, requires_grad=True), tensor([0.5450], dtype=torch.float64, requires_grad=True), tensor([0.0265], dtype=torch.float64, requires_grad=True), tensor([0.0686], dtype=torch.float64, requires_grad=True), tensor([0.0340], dtype=torch.float64, requires_grad=True), tensor([0.0179], dtype=torch.float64, requires_grad=True), tensor([5.5541e-05], dtype=torch.float64, requires_grad=True), tensor([-4.9697e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0871 min.
Update Log-likelihood (torch)=  -5.2268103626060345
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1145,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1160.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5419.
Rule2: B --> F , B EQUAL F, weight(torch)=0.0987.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1368.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0839.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5450.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0265.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0686.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0340.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0179.
Rule10: Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0001.
Rule11: D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=-0.0000.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1145
Rule0: C --> F , C BEFORE F, weight=0.1160
Rule1: Not C --> F , Not C BEFORE F, weight=0.5419
Rule2: B --> F , B EQUAL F, weight=0.0987
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1368
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0839
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5450
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0265
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0686
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0340
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0179
[0 th iter] Elapsed: 25.0039 sec.
[1 th iter] Elapsed: 23.3271 sec.
[2 th iter] Elapsed: 23.2039 sec.
Run 528 batches
grad norm 0.07444443738565253 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.201443638246934
Params  [tensor([0.1127], dtype=torch.float64, requires_grad=True), tensor([0.1193], dtype=torch.float64, requires_grad=True), tensor([0.5487], dtype=torch.float64, requires_grad=True), tensor([0.1067], dtype=torch.float64, requires_grad=True), tensor([0.1324], dtype=torch.float64, requires_grad=True), tensor([0.0755], dtype=torch.float64, requires_grad=True), tensor([0.5459], dtype=torch.float64, requires_grad=True), tensor([0.0223], dtype=torch.float64, requires_grad=True), tensor([0.0690], dtype=torch.float64, requires_grad=True), tensor([0.0270], dtype=torch.float64, requires_grad=True), tensor([0.0161], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1924 min.
update Log-likelihood (torch)=  -5.201443638246934
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1127,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1193.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5487.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1067.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1324.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0755.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5459.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0223.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0690.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0270.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0161.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 3 workers, process 3 candidate rules.
[multiprocess log-grad] Elapsed: 1.0472 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02761, std=0.52870, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02517, std=0.51626, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02402, std=0.41063, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.027611559840252414
new rule added.
Best rule is: D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.025167224331841032
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1127
Rule0: C --> F , C BEFORE F, weight=0.1193
Rule1: Not C --> F , Not C BEFORE F, weight=0.5487
Rule2: B --> F , B EQUAL F, weight=0.1067
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1324
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0755
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5459
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0223
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0690
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0270
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0161
Rule10: E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule11: D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 32.1944 sec.
[1 th iter] Elapsed: 31.2231 sec.
Run 301 batches
grad norm 0.0974333924690374 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.548791079618215
Params  [tensor([0.1151], dtype=torch.float64, requires_grad=True), tensor([0.1214], dtype=torch.float64, requires_grad=True), tensor([0.5525], dtype=torch.float64, requires_grad=True), tensor([0.1049], dtype=torch.float64, requires_grad=True), tensor([0.1408], dtype=torch.float64, requires_grad=True), tensor([0.0793], dtype=torch.float64, requires_grad=True), tensor([0.5578], dtype=torch.float64, requires_grad=True), tensor([0.0308], dtype=torch.float64, requires_grad=True), tensor([0.0699], dtype=torch.float64, requires_grad=True), tensor([0.0299], dtype=torch.float64, requires_grad=True), tensor([0.0270], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0571 min.
Update Log-likelihood (torch)=  -5.548791079618215
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1151,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1214.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5525.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1049.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1408.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0793.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5578.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0308.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0699.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0299.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0270.
Rule10: E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0003.
Rule11: D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0002.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1151
Rule0: C --> F , C BEFORE F, weight=0.1214
Rule1: Not C --> F , Not C BEFORE F, weight=0.5525
Rule2: B --> F , B EQUAL F, weight=0.1049
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1408
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0793
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5578
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0308
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0699
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0299
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0270
[0 th iter] Elapsed: 23.8791 sec.
[1 th iter] Elapsed: 28.7938 sec.
Run 362 batches
grad norm 0.07237638391146149 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.436267963325462
Params  [tensor([0.1171], dtype=torch.float64, requires_grad=True), tensor([0.1205], dtype=torch.float64, requires_grad=True), tensor([0.5586], dtype=torch.float64, requires_grad=True), tensor([0.1111], dtype=torch.float64, requires_grad=True), tensor([0.1415], dtype=torch.float64, requires_grad=True), tensor([0.0790], dtype=torch.float64, requires_grad=True), tensor([0.5528], dtype=torch.float64, requires_grad=True), tensor([0.0348], dtype=torch.float64, requires_grad=True), tensor([0.0652], dtype=torch.float64, requires_grad=True), tensor([0.0321], dtype=torch.float64, requires_grad=True), tensor([0.0254], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 52.6796 sec.
update Log-likelihood (torch)=  -5.436267963325462
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1171,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1205.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5586.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1111.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1415.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0790.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5528.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0348.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0652.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0321.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0254.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 1 workers, process 1 candidate rules.
[multiprocess log-grad] Elapsed: 55.9809 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01028, std=0.43160, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
best gain 0.010279463445312382 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.1854 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.19441, std=0.51927, Rule = B ^ A ^ Not C --> F , B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08083, std=2.22719, Rule = E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06807, std=2.12003, Rule = D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06165, std=2.28524, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05773, std=1.99574, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04899, std=2.05898, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03719, std=0.35391, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02666, std=0.39761, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02321, std=1.09455, Rule = D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02272, std=1.06396, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01930, std=0.50356, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01826, std=1.18129, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01583, std=1.03235, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01556, std=1.09758, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01528, std=0.61510, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01409, std=0.41411, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01326, std=0.39170, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01246, std=1.18878, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01243, std=0.39714, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01030, std=1.17631, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00886, std=0.36788, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00851, std=0.53241, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00711, std=1.10861, Rule = B ^ A ^ Not C --> F , B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00582, std=0.50883, Rule = E ^ A ^ Not C --> F , E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00461, std=0.57195, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00408, std=1.22084, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00263, std=0.54425, Rule = E ^ A ^ Not C --> F , E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00244, std=0.43676, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00221, std=0.43377, Rule = B ^ A ^ Not C --> F , B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00041, std=1.18932, Rule = B ^ A ^ Not C --> F , B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00088, std=0.58917, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00181, std=1.14130, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00762, std=0.63345, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01068, std=1.15217, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01229, std=1.97978, Rule = B ^ A ^ Not C --> F , B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01371, std=0.77516, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: B ^ A ^ Not C --> F , B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.1944080024202047
new rule added.
Best rule is: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.08082808819207732
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1171
Rule0: C --> F , C BEFORE F, weight=0.1205
Rule1: Not C --> F , Not C BEFORE F, weight=0.5586
Rule2: B --> F , B EQUAL F, weight=0.1111
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1415
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0790
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5528
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0348
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0652
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0321
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0254
Rule10: B ^ A ^ Not C --> F , B EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 31.8727 sec.
[1 th iter] Elapsed: 36.0306 sec.
[2 th iter] Elapsed: 33.8424 sec.
Run 587 batches
grad norm 0.04807724547307089 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.295902528997815
Params  [tensor([0.1156], dtype=torch.float64, requires_grad=True), tensor([0.1118], dtype=torch.float64, requires_grad=True), tensor([0.5551], dtype=torch.float64, requires_grad=True), tensor([0.1136], dtype=torch.float64, requires_grad=True), tensor([0.1318], dtype=torch.float64, requires_grad=True), tensor([0.0694], dtype=torch.float64, requires_grad=True), tensor([0.5498], dtype=torch.float64, requires_grad=True), tensor([0.0291], dtype=torch.float64, requires_grad=True), tensor([0.0632], dtype=torch.float64, requires_grad=True), tensor([0.0341], dtype=torch.float64, requires_grad=True), tensor([0.0274], dtype=torch.float64, requires_grad=True), tensor([0.0001], dtype=torch.float64, requires_grad=True), tensor([0.0084], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.6959 min.
Update Log-likelihood (torch)=  -5.295902528997815
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1156,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1118.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5551.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1136.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1318.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0694.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5498.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0291.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0632.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0341.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0274.
Rule10: B ^ A ^ Not C --> F , B EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0001.
Rule11: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0084.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1156
Rule0: C --> F , C BEFORE F, weight=0.1118
Rule1: Not C --> F , Not C BEFORE F, weight=0.5551
Rule2: B --> F , B EQUAL F, weight=0.1136
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1318
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0694
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5498
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0291
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0632
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0341
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0274
[0 th iter] Elapsed: 26.9155 sec.
[1 th iter] Elapsed: 26.8169 sec.
Run 301 batches
grad norm 0.09584858683355026 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.241030936833053
Params  [tensor([0.1150], dtype=torch.float64, requires_grad=True), tensor([0.1199], dtype=torch.float64, requires_grad=True), tensor([0.5556], dtype=torch.float64, requires_grad=True), tensor([0.1192], dtype=torch.float64, requires_grad=True), tensor([0.1285], dtype=torch.float64, requires_grad=True), tensor([0.0741], dtype=torch.float64, requires_grad=True), tensor([0.5530], dtype=torch.float64, requires_grad=True), tensor([0.0388], dtype=torch.float64, requires_grad=True), tensor([0.0724], dtype=torch.float64, requires_grad=True), tensor([0.0439], dtype=torch.float64, requires_grad=True), tensor([0.0328], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.7386 sec.
update Log-likelihood (torch)=  -5.241030936833053
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1150,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1199.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5556.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1192.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1285.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0741.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5530.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0388.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0724.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0439.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0328.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 3.2520 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04866, std=2.14722, Rule = D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04323, std=2.36524, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03995, std=2.01832, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03613, std=0.35481, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03204, std=2.09043, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02544, std=0.39868, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01867, std=0.50384, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01507, std=1.10366, Rule = D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01451, std=1.07531, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01376, std=0.61691, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01164, std=0.41761, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01109, std=1.04183, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01089, std=0.39578, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01082, std=0.39851, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01052, std=1.10795, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00984, std=1.21899, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00790, std=1.21773, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00706, std=0.36993, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00668, std=0.55212, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00391, std=0.57168, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00328, std=0.52363, Rule = E ^ A ^ Not C --> F , E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00259, std=1.12130, Rule = B ^ A ^ Not C --> F , B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00175, std=1.21054, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00126, std=0.43772, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00121, std=0.43433, Rule = B ^ A ^ Not C --> F , B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00097, std=0.56321, Rule = E ^ A ^ Not C --> F , E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00108, std=1.25829, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00408, std=0.61742, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00667, std=1.15981, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00837, std=0.63382, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00870, std=1.20821, Rule = B ^ A ^ Not C --> F , B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01525, std=0.77299, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01912, std=1.17198, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02730, std=1.99596, Rule = B ^ A ^ Not C --> F , B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.04865910331715067
new rule added.
Best rule is: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.043233635520212914
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1150
Rule0: C --> F , C BEFORE F, weight=0.1199
Rule1: Not C --> F , Not C BEFORE F, weight=0.5556
Rule2: B --> F , B EQUAL F, weight=0.1192
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1285
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0741
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5530
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0388
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0724
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0439
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0328
Rule10: D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 38.1493 sec.
[1 th iter] Elapsed: 31.9898 sec.
Run 302 batches
grad norm 0.02357492833434211 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.390680770605288
Params  [tensor([0.1171], dtype=torch.float64, requires_grad=True), tensor([0.1163], dtype=torch.float64, requires_grad=True), tensor([0.5562], dtype=torch.float64, requires_grad=True), tensor([0.1230], dtype=torch.float64, requires_grad=True), tensor([0.1193], dtype=torch.float64, requires_grad=True), tensor([0.0696], dtype=torch.float64, requires_grad=True), tensor([0.5468], dtype=torch.float64, requires_grad=True), tensor([0.0324], dtype=torch.float64, requires_grad=True), tensor([0.0646], dtype=torch.float64, requires_grad=True), tensor([0.0351], dtype=torch.float64, requires_grad=True), tensor([0.0213], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True), tensor([0.0021], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1691 min.
Update Log-likelihood (torch)=  -5.390680770605288
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1171,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1163.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5562.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1230.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1193.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0696.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5468.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0324.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0646.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0351.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0213.
Rule10: D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0003.
Rule11: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0021.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1171
Rule0: C --> F , C BEFORE F, weight=0.1163
Rule1: Not C --> F , Not C BEFORE F, weight=0.5562
Rule2: B --> F , B EQUAL F, weight=0.1230
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1193
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0696
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5468
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0324
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0646
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0351
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0213
[0 th iter] Elapsed: 27.8580 sec.
[1 th iter] Elapsed: 25.3816 sec.
Run 304 batches
grad norm 0.05763242822802138 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.092099235216489
Params  [tensor([0.1137], dtype=torch.float64, requires_grad=True), tensor([0.1209], dtype=torch.float64, requires_grad=True), tensor([0.5574], dtype=torch.float64, requires_grad=True), tensor([0.1260], dtype=torch.float64, requires_grad=True), tensor([0.1221], dtype=torch.float64, requires_grad=True), tensor([0.0760], dtype=torch.float64, requires_grad=True), tensor([0.5531], dtype=torch.float64, requires_grad=True), tensor([0.0339], dtype=torch.float64, requires_grad=True), tensor([0.0723], dtype=torch.float64, requires_grad=True), tensor([0.0411], dtype=torch.float64, requires_grad=True), tensor([0.0256], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 53.2458 sec.
update Log-likelihood (torch)=  -5.092099235216489
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1137,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1209.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5574.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1260.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1221.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0760.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5531.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0339.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0723.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0411.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0256.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 16 candidate rules.
[multiprocess log-grad] Elapsed: 1.2504 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.07539, std=1.97631, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07459, std=2.01731, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04028, std=0.35118, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03624, std=1.07455, Rule = D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03476, std=1.04537, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03135, std=1.07714, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03036, std=1.01371, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03027, std=0.39138, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02908, std=1.18347, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02674, std=1.18495, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02195, std=0.50004, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02034, std=1.17534, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01851, std=0.60919, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01744, std=0.40795, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01477, std=0.38971, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01473, std=0.39331, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.07539425181134946
new rule added.
Best rule is: Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.07458755066858218
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1137
Rule0: C --> F , C BEFORE F, weight=0.1209
Rule1: Not C --> F , Not C BEFORE F, weight=0.5574
Rule2: B --> F , B EQUAL F, weight=0.1260
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1221
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0760
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5531
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0339
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0723
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0411
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0256
Rule10: Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 31.3783 sec.
[1 th iter] Elapsed: 30.6609 sec.
[2 th iter] Elapsed: 33.5577 sec.
3 th iter
grad norm=0.07270731776761898. num_batch_no_update =247
Head = F, base = 0.1142
Rule0: C --> F , C BEFORE F, weight=0.1117
Rule1: Not C --> F , Not C BEFORE F, weight=0.5609
Rule2: B --> F , B EQUAL F, weight=0.1212
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1181
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0738
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5425
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0264
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0685
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0320
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0227
Rule10: Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0037
Rule11: Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0024
[3 th iter] Elapsed: 31.3290 sec.
Run 803 batches
grad norm 0.04785903914777076 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.146175465241063
Params  [tensor([0.1135], dtype=torch.float64, requires_grad=True), tensor([0.1128], dtype=torch.float64, requires_grad=True), tensor([0.5664], dtype=torch.float64, requires_grad=True), tensor([0.1216], dtype=torch.float64, requires_grad=True), tensor([0.1184], dtype=torch.float64, requires_grad=True), tensor([0.0797], dtype=torch.float64, requires_grad=True), tensor([0.5469], dtype=torch.float64, requires_grad=True), tensor([0.0298], dtype=torch.float64, requires_grad=True), tensor([0.0684], dtype=torch.float64, requires_grad=True), tensor([0.0308], dtype=torch.float64, requires_grad=True), tensor([0.0223], dtype=torch.float64, requires_grad=True), tensor([0.0070], dtype=torch.float64, requires_grad=True), tensor([0.0009], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.1156 min.
Update Log-likelihood (torch)=  -5.146175465241063
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1135,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1128.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5664.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1216.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1184.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0797.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5469.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0298.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0684.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0308.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0223.
Rule10: Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0070.
Rule11: Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0009.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1135
Rule0: C --> F , C BEFORE F, weight=0.1128
Rule1: Not C --> F , Not C BEFORE F, weight=0.5664
Rule2: B --> F , B EQUAL F, weight=0.1216
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1184
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0797
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5469
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0298
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0684
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0308
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0223
[0 th iter] Elapsed: 22.7636 sec.
[1 th iter] Elapsed: 23.2509 sec.
Run 383 batches
grad norm 0.04025313955108856 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.43775236165626
Params  [tensor([0.1200], dtype=torch.float64, requires_grad=True), tensor([0.1095], dtype=torch.float64, requires_grad=True), tensor([0.5703], dtype=torch.float64, requires_grad=True), tensor([0.1221], dtype=torch.float64, requires_grad=True), tensor([0.1177], dtype=torch.float64, requires_grad=True), tensor([0.0829], dtype=torch.float64, requires_grad=True), tensor([0.5500], dtype=torch.float64, requires_grad=True), tensor([0.0302], dtype=torch.float64, requires_grad=True), tensor([0.0667], dtype=torch.float64, requires_grad=True), tensor([0.0287], dtype=torch.float64, requires_grad=True), tensor([0.0202], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 46.0208 sec.
update Log-likelihood (torch)=  -5.43775236165626
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1200,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1095.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5703.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1221.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1177.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0829.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5500.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0302.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0667.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0287.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0202.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 14 workers, process 14 candidate rules.
[multiprocess log-grad] Elapsed: 1.6205 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06644, std=1.04264, Rule = D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06371, std=1.01321, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05966, std=1.11398, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05786, std=1.04473, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05480, std=0.98503, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05297, std=1.12615, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05004, std=1.10977, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04562, std=0.34802, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03608, std=0.38487, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02714, std=0.49621, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02530, std=0.60157, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02502, std=0.39925, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02169, std=0.38017, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02112, std=0.38765, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.06643629184659926
new rule added.
Best rule is: Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.06370866736092927
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1200
Rule0: C --> F , C BEFORE F, weight=0.1095
Rule1: Not C --> F , Not C BEFORE F, weight=0.5703
Rule2: B --> F , B EQUAL F, weight=0.1221
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1177
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0829
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5500
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0302
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0667
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0287
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0202
Rule10: D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 47.9131 sec.
[1 th iter] Elapsed: 48.6080 sec.
Run 444 batches
grad norm 0.04224034244000723 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.219570794833086
Params  [tensor([0.1122], dtype=torch.float64, requires_grad=True), tensor([0.1123], dtype=torch.float64, requires_grad=True), tensor([0.5757], dtype=torch.float64, requires_grad=True), tensor([0.1138], dtype=torch.float64, requires_grad=True), tensor([0.1164], dtype=torch.float64, requires_grad=True), tensor([0.0865], dtype=torch.float64, requires_grad=True), tensor([0.5496], dtype=torch.float64, requires_grad=True), tensor([0.0341], dtype=torch.float64, requires_grad=True), tensor([0.0744], dtype=torch.float64, requires_grad=True), tensor([0.0349], dtype=torch.float64, requires_grad=True), tensor([0.0157], dtype=torch.float64, requires_grad=True), tensor([-0.0004], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.6088 min.
Update Log-likelihood (torch)=  -5.219570794833086
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1122,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1123.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5757.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1138.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1164.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0865.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5496.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0341.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0744.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0349.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0157.
Rule10: D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0004.
Rule11: Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0002.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1122
Rule0: C --> F , C BEFORE F, weight=0.1123
Rule1: Not C --> F , Not C BEFORE F, weight=0.5757
Rule2: B --> F , B EQUAL F, weight=0.1138
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1164
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0865
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5496
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0341
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0744
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0349
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0157
[0 th iter] Elapsed: 36.3437 sec.
[1 th iter] Elapsed: 36.4649 sec.
Run 301 batches
grad norm 0.03205051086430747 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.344922779498769
Params  [tensor([0.1096], dtype=torch.float64, requires_grad=True), tensor([0.1098], dtype=torch.float64, requires_grad=True), tensor([0.5661], dtype=torch.float64, requires_grad=True), tensor([0.1131], dtype=torch.float64, requires_grad=True), tensor([0.1051], dtype=torch.float64, requires_grad=True), tensor([0.0814], dtype=torch.float64, requires_grad=True), tensor([0.5428], dtype=torch.float64, requires_grad=True), tensor([0.0272], dtype=torch.float64, requires_grad=True), tensor([0.0677], dtype=torch.float64, requires_grad=True), tensor([0.0291], dtype=torch.float64, requires_grad=True), tensor([0.0148], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2137 min.
update Log-likelihood (torch)=  -5.344922779498769
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1096,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1098.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5661.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1131.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1051.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0814.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5428.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0272.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0677.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0291.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0148.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 12 workers, process 12 candidate rules.
[multiprocess log-grad] Elapsed: 1.8847 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.10310, std=0.99182, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10173, std=1.05482, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09752, std=1.06654, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09663, std=0.93666, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09023, std=1.04991, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05460, std=0.34068, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04628, std=0.37124, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03627, std=0.38395, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03604, std=0.58748, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03559, std=0.48759, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03050, std=0.36721, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03045, std=0.37637, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.10310195578493728
new rule added.
Best rule is: E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.10172955870855986
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1096
Rule0: C --> F , C BEFORE F, weight=0.1098
Rule1: Not C --> F , Not C BEFORE F, weight=0.5661
Rule2: B --> F , B EQUAL F, weight=0.1131
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1051
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0814
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5428
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0272
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0677
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0291
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0148
Rule10: D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 48.8890 sec.
[1 th iter] Elapsed: 49.7770 sec.
Run 486 batches
grad norm 0.06456166697259641 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -4.870555708631395
Params  [tensor([0.1082], dtype=torch.float64, requires_grad=True), tensor([0.1172], dtype=torch.float64, requires_grad=True), tensor([0.5740], dtype=torch.float64, requires_grad=True), tensor([0.1199], dtype=torch.float64, requires_grad=True), tensor([0.1096], dtype=torch.float64, requires_grad=True), tensor([0.0822], dtype=torch.float64, requires_grad=True), tensor([0.5566], dtype=torch.float64, requires_grad=True), tensor([0.0349], dtype=torch.float64, requires_grad=True), tensor([0.0745], dtype=torch.float64, requires_grad=True), tensor([0.0369], dtype=torch.float64, requires_grad=True), tensor([0.0310], dtype=torch.float64, requires_grad=True), tensor([0.0001], dtype=torch.float64, requires_grad=True), tensor([0.0011], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.6445 min.
Update Log-likelihood (torch)=  -4.870555708631395
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1082,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1172.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5740.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1199.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1096.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0822.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5566.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0349.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0745.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0369.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0310.
Rule10: D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0001.
Rule11: E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0011.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1082
Rule0: C --> F , C BEFORE F, weight=0.1172
Rule1: Not C --> F , Not C BEFORE F, weight=0.5740
Rule2: B --> F , B EQUAL F, weight=0.1199
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1096
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0822
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5566
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0349
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0745
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0369
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0310
[0 th iter] Elapsed: 36.1788 sec.
[1 th iter] Elapsed: 35.7823 sec.
Run 302 batches
grad norm 0.059068098306942714 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.374299745822953
Params  [tensor([0.1162], dtype=torch.float64, requires_grad=True), tensor([0.1138], dtype=torch.float64, requires_grad=True), tensor([0.5765], dtype=torch.float64, requires_grad=True), tensor([0.1195], dtype=torch.float64, requires_grad=True), tensor([0.1139], dtype=torch.float64, requires_grad=True), tensor([0.0835], dtype=torch.float64, requires_grad=True), tensor([0.5565], dtype=torch.float64, requires_grad=True), tensor([0.0339], dtype=torch.float64, requires_grad=True), tensor([0.0729], dtype=torch.float64, requires_grad=True), tensor([0.0417], dtype=torch.float64, requires_grad=True), tensor([0.0323], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1995 min.
update Log-likelihood (torch)=  -5.374299745822953
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1162,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1138.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5765.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1195.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1139.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0835.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5565.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0339.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0729.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0417.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0323.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 10 workers, process 10 candidate rules.
[multiprocess log-grad] Elapsed: 1.7645 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03455, std=0.35577, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02377, std=0.39870, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01660, std=0.50485, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01165, std=0.61772, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01072, std=0.41698, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00954, std=0.39741, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00937, std=0.39944, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00363, std=1.04088, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00278, std=1.22154, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00425, std=1.20982, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.03454662794369132
new rule added.
Best rule is: D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.023770009113965925
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1162
Rule0: C --> F , C BEFORE F, weight=0.1138
Rule1: Not C --> F , Not C BEFORE F, weight=0.5765
Rule2: B --> F , B EQUAL F, weight=0.1195
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1139
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0835
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5565
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0339
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0729
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0417
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0323
Rule10: Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 47.8251 sec.
[1 th iter] Elapsed: 47.4609 sec.
[2 th iter] Elapsed: 49.5200 sec.
Run 683 batches
grad norm 0.12446145545543771 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.896019622478049
Params  [tensor([0.1140], dtype=torch.float64, requires_grad=True), tensor([0.1125], dtype=torch.float64, requires_grad=True), tensor([0.5719], dtype=torch.float64, requires_grad=True), tensor([0.1154], dtype=torch.float64, requires_grad=True), tensor([0.1075], dtype=torch.float64, requires_grad=True), tensor([0.0822], dtype=torch.float64, requires_grad=True), tensor([0.5594], dtype=torch.float64, requires_grad=True), tensor([0.0295], dtype=torch.float64, requires_grad=True), tensor([0.0716], dtype=torch.float64, requires_grad=True), tensor([0.0354], dtype=torch.float64, requires_grad=True), tensor([0.0289], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0001], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.4136 min.
Update Log-likelihood (torch)=  -5.896019622478049
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1140,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1125.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5719.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1154.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1075.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0822.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5594.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0295.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0716.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0354.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0289.
Rule10: Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0002.
Rule11: D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0001.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1140
Rule0: C --> F , C BEFORE F, weight=0.1125
Rule1: Not C --> F , Not C BEFORE F, weight=0.5719
Rule2: B --> F , B EQUAL F, weight=0.1154
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1075
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0822
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5594
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0295
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0716
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0354
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0289
[0 th iter] Elapsed: 37.2986 sec.
[1 th iter] Elapsed: 36.6706 sec.
Run 306 batches
grad norm 0.13060575412274975 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.629369596060416
Params  [tensor([0.1126], dtype=torch.float64, requires_grad=True), tensor([0.1049], dtype=torch.float64, requires_grad=True), tensor([0.5718], dtype=torch.float64, requires_grad=True), tensor([0.1145], dtype=torch.float64, requires_grad=True), tensor([0.1099], dtype=torch.float64, requires_grad=True), tensor([0.0851], dtype=torch.float64, requires_grad=True), tensor([0.5599], dtype=torch.float64, requires_grad=True), tensor([0.0299], dtype=torch.float64, requires_grad=True), tensor([0.0711], dtype=torch.float64, requires_grad=True), tensor([0.0293], dtype=torch.float64, requires_grad=True), tensor([0.0325], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2329 min.
update Log-likelihood (torch)=  -5.629369596060416
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1126,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1049.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5718.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1145.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1099.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0851.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5599.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0299.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0711.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0293.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0325.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 6 workers, process 6 candidate rules.
[multiprocess log-grad] Elapsed: 1.0790 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03783, std=1.00442, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02392, std=0.49823, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02092, std=0.60654, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01958, std=0.40564, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01746, std=0.38381, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01719, std=0.39055, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.03782977884013913
new rule added.
Best rule is: D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.023915762859537507
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1126
Rule0: C --> F , C BEFORE F, weight=0.1049
Rule1: Not C --> F , Not C BEFORE F, weight=0.5718
Rule2: B --> F , B EQUAL F, weight=0.1145
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1099
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0851
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5599
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0299
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0711
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0293
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0325
Rule10: Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 32.9199 sec.
[1 th iter] Elapsed: 35.7309 sec.
[2 th iter] Elapsed: 31.1120 sec.
3 th iter
grad norm=0.06517401365881759. num_batch_no_update =28
Head = F, base = 0.1150
Rule0: C --> F , C BEFORE F, weight=0.0983
Rule1: Not C --> F , Not C BEFORE F, weight=0.5745
Rule2: B --> F , B EQUAL F, weight=0.1170
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1099
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0847
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5599
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0220
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0691
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0305
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0256
Rule10: Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F, weight=0.0000
Rule11: D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0002
[3 th iter] Elapsed: 36.9409 sec.
[4 th iter] Elapsed: 39.8254 sec.
Run 1184 batches
grad norm 0.06230787296316255 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.309659108476022
Params  [tensor([0.1226], dtype=torch.float64, requires_grad=True), tensor([0.1007], dtype=torch.float64, requires_grad=True), tensor([0.5820], dtype=torch.float64, requires_grad=True), tensor([0.1127], dtype=torch.float64, requires_grad=True), tensor([0.1104], dtype=torch.float64, requires_grad=True), tensor([0.0902], dtype=torch.float64, requires_grad=True), tensor([0.5623], dtype=torch.float64, requires_grad=True), tensor([0.0295], dtype=torch.float64, requires_grad=True), tensor([0.0616], dtype=torch.float64, requires_grad=True), tensor([0.0344], dtype=torch.float64, requires_grad=True), tensor([0.0299], dtype=torch.float64, requires_grad=True), tensor([0.0002], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.9423 min.
Update Log-likelihood (torch)=  -5.309659108476022
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1226,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1007.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5820.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1127.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1104.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0902.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5623.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0295.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0616.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0344.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0299.
Rule10: Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0002.
Rule11: D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0003.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1226
Rule0: C --> F , C BEFORE F, weight=0.1007
Rule1: Not C --> F , Not C BEFORE F, weight=0.5820
Rule2: B --> F , B EQUAL F, weight=0.1127
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1104
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0902
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5623
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0295
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0616
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0344
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0299
[0 th iter] Elapsed: 25.2634 sec.
[1 th iter] Elapsed: 26.5001 sec.
[2 th iter] Elapsed: 25.8556 sec.
Run 523 batches
grad norm 0.11048488447422013 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.636382914920318
Params  [tensor([0.1135], dtype=torch.float64, requires_grad=True), tensor([0.1000], dtype=torch.float64, requires_grad=True), tensor([0.5820], dtype=torch.float64, requires_grad=True), tensor([0.1166], dtype=torch.float64, requires_grad=True), tensor([0.1050], dtype=torch.float64, requires_grad=True), tensor([0.0823], dtype=torch.float64, requires_grad=True), tensor([0.5624], dtype=torch.float64, requires_grad=True), tensor([0.0232], dtype=torch.float64, requires_grad=True), tensor([0.0595], dtype=torch.float64, requires_grad=True), tensor([0.0399], dtype=torch.float64, requires_grad=True), tensor([0.0286], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2938 min.
update Log-likelihood (torch)=  -5.636382914920318
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1135,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1000.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5820.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1166.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1050.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0823.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5624.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0232.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0595.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0399.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0286.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 4 workers, process 4 candidate rules.
[multiprocess log-grad] Elapsed: 1.0213 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02414, std=0.60261, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02371, std=0.40078, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02138, std=0.38200, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02093, std=0.38708, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.0241395519148245
new rule added.
Best rule is: D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.023707517457132055
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1135
Rule0: C --> F , C BEFORE F, weight=0.1000
Rule1: Not C --> F , Not C BEFORE F, weight=0.5820
Rule2: B --> F , B EQUAL F, weight=0.1166
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1050
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0823
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5624
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0232
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0595
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0399
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0286
Rule10: E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 32.6593 sec.
[1 th iter] Elapsed: 38.1977 sec.
Run 391 batches
grad norm 0.13566515175606836 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.5265771435574536
Params  [tensor([0.1074], dtype=torch.float64, requires_grad=True), tensor([0.1015], dtype=torch.float64, requires_grad=True), tensor([0.5836], dtype=torch.float64, requires_grad=True), tensor([0.1109], dtype=torch.float64, requires_grad=True), tensor([0.0992], dtype=torch.float64, requires_grad=True), tensor([0.0823], dtype=torch.float64, requires_grad=True), tensor([0.5578], dtype=torch.float64, requires_grad=True), tensor([0.0321], dtype=torch.float64, requires_grad=True), tensor([0.0631], dtype=torch.float64, requires_grad=True), tensor([0.0358], dtype=torch.float64, requires_grad=True), tensor([0.0318], dtype=torch.float64, requires_grad=True), tensor([-4.0528e-05], dtype=torch.float64, requires_grad=True), tensor([2.4058e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1811 min.
Update Log-likelihood (torch)=  -5.5265771435574536
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1074,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1015.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5836.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1109.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0992.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0823.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5578.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0321.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0631.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0358.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0318.
Rule10: E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0000.
Rule11: D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0000.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1074
Rule0: C --> F , C BEFORE F, weight=0.1015
Rule1: Not C --> F , Not C BEFORE F, weight=0.5836
Rule2: B --> F , B EQUAL F, weight=0.1109
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0992
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0823
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5578
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0321
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0631
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0358
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0318
[0 th iter] Elapsed: 25.8805 sec.
[1 th iter] Elapsed: 27.5846 sec.
[2 th iter] Elapsed: 28.4765 sec.
Run 697 batches
grad norm 0.05710094828323317 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.630262046503018
Params  [tensor([0.1206], dtype=torch.float64, requires_grad=True), tensor([0.0989], dtype=torch.float64, requires_grad=True), tensor([0.5867], dtype=torch.float64, requires_grad=True), tensor([0.1135], dtype=torch.float64, requires_grad=True), tensor([0.1009], dtype=torch.float64, requires_grad=True), tensor([0.0785], dtype=torch.float64, requires_grad=True), tensor([0.5595], dtype=torch.float64, requires_grad=True), tensor([0.0321], dtype=torch.float64, requires_grad=True), tensor([0.0696], dtype=torch.float64, requires_grad=True), tensor([0.0373], dtype=torch.float64, requires_grad=True), tensor([0.0372], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3658 min.
update Log-likelihood (torch)=  -5.630262046503018
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1206,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0989.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5867.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1135.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1009.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0785.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5595.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0321.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0696.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0373.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0372.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 2 workers, process 2 candidate rules.
[multiprocess log-grad] Elapsed: 58.1944 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01622, std=0.38790, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01588, std=0.39375, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
best gain 0.016215057515795692 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.3626 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.17788, std=0.54607, Rule = B ^ Not E ^ Not C --> F , B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14250, std=1.87089, Rule = D ^ Not E ^ Not C --> F , D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13274, std=1.83048, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11316, std=2.06749, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09581, std=2.15953, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08910, std=2.25653, Rule = A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07635, std=0.94700, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07565, std=0.90893, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06508, std=0.95242, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05574, std=1.01798, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05305, std=1.01296, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04869, std=0.96956, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04078, std=0.39055, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04076, std=0.97637, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04069, std=1.05656, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02138, std=1.14502, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01966, std=0.56867, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01948, std=2.15745, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01857, std=0.60668, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01652, std=0.41826, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01648, std=1.14646, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01641, std=1.12255, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01542, std=0.60033, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01270, std=0.43054, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01167, std=1.13121, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00985, std=0.47449, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00665, std=0.41966, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00598, std=0.50519, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00513, std=0.40915, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00438, std=0.58848, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00310, std=0.58764, Rule = A ^ Not E ^ Not C --> F , A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00001, std=0.43730, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00129, std=0.63373, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00264, std=0.56858, Rule = A ^ Not E ^ Not C --> F , A EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00667, std=0.56875, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01616, std=0.71273, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: B ^ Not E ^ Not C --> F , B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.1778765319605379
new rule added.
Best rule is: D ^ Not E ^ Not C --> F , D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.14250368962217663
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1206
Rule0: C --> F , C BEFORE F, weight=0.0989
Rule1: Not C --> F , Not C BEFORE F, weight=0.5867
Rule2: B --> F , B EQUAL F, weight=0.1135
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1009
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0785
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5595
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0321
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0696
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0373
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0372
Rule10: B ^ Not E ^ Not C --> F , B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: D ^ Not E ^ Not C --> F , D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 39.0972 sec.
[1 th iter] Elapsed: 32.1763 sec.
Run 400 batches
grad norm 0.021234190194835703 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.434834234992218
Params  [tensor([0.1158], dtype=torch.float64, requires_grad=True), tensor([0.0959], dtype=torch.float64, requires_grad=True), tensor([0.5845], dtype=torch.float64, requires_grad=True), tensor([0.1105], dtype=torch.float64, requires_grad=True), tensor([0.0923], dtype=torch.float64, requires_grad=True), tensor([0.0675], dtype=torch.float64, requires_grad=True), tensor([0.5536], dtype=torch.float64, requires_grad=True), tensor([0.0277], dtype=torch.float64, requires_grad=True), tensor([0.0754], dtype=torch.float64, requires_grad=True), tensor([0.0322], dtype=torch.float64, requires_grad=True), tensor([0.0373], dtype=torch.float64, requires_grad=True), tensor([0.0004], dtype=torch.float64, requires_grad=True), tensor([0.0059], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1880 min.
Update Log-likelihood (torch)=  -5.434834234992218
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1158,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0959.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5845.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1105.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0923.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0675.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5536.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0277.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0754.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0322.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0373.
Rule10: B ^ Not E ^ Not C --> F , B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0004.
Rule11: D ^ Not E ^ Not C --> F , D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0059.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1158
Rule0: C --> F , C BEFORE F, weight=0.0959
Rule1: Not C --> F , Not C BEFORE F, weight=0.5845
Rule2: B --> F , B EQUAL F, weight=0.1105
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0923
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0675
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5536
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0277
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0754
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0322
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0373
[0 th iter] Elapsed: 26.3063 sec.
[1 th iter] Elapsed: 28.0948 sec.
Run 303 batches
grad norm 0.04416334949051036 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.527073752111321
Params  [tensor([0.1149], dtype=torch.float64, requires_grad=True), tensor([0.0994], dtype=torch.float64, requires_grad=True), tensor([0.5874], dtype=torch.float64, requires_grad=True), tensor([0.1209], dtype=torch.float64, requires_grad=True), tensor([0.0940], dtype=torch.float64, requires_grad=True), tensor([0.0739], dtype=torch.float64, requires_grad=True), tensor([0.5548], dtype=torch.float64, requires_grad=True), tensor([0.0281], dtype=torch.float64, requires_grad=True), tensor([0.0733], dtype=torch.float64, requires_grad=True), tensor([0.0344], dtype=torch.float64, requires_grad=True), tensor([0.0416], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 54.4076 sec.
update Log-likelihood (torch)=  -5.527073752111321
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1149,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0994.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5874.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1209.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0940.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0739.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5548.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0281.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0733.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0344.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0416.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 3.2754 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.16752, std=1.79601, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14637, std=2.02344, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13252, std=2.08895, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12882, std=2.17105, Rule = A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09348, std=0.92933, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09206, std=0.89195, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08214, std=0.92768, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07436, std=0.99057, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07184, std=0.99267, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06516, std=0.94419, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05876, std=0.95590, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05870, std=1.02387, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05474, std=2.11234, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04449, std=0.38631, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03902, std=1.11493, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03557, std=1.11928, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03423, std=1.09719, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02852, std=1.10272, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02354, std=0.56280, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02246, std=0.60214, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02077, std=0.41317, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01928, std=0.59585, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01726, std=0.42347, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01378, std=0.46567, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01077, std=0.48881, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01051, std=0.41229, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00969, std=0.56952, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00915, std=0.40284, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00830, std=0.56341, Rule = A ^ Not E ^ Not C --> F , A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00387, std=0.43076, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00290, std=0.55072, Rule = A ^ Not E ^ Not C --> F , A EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00267, std=0.62874, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00186, std=0.55262, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01181, std=0.70182, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not D ^ Not E ^ Not C --> F , Not D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.16752398952839515
new rule added.
Best rule is: Not B ^ Not E ^ Not C --> F , Not B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.14637275519220713
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1149
Rule0: C --> F , C BEFORE F, weight=0.0994
Rule1: Not C --> F , Not C BEFORE F, weight=0.5874
Rule2: B --> F , B EQUAL F, weight=0.1209
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0940
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0739
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5548
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0281
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0733
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0344
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0416
Rule10: Not D ^ Not E ^ Not C --> F , Not D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: Not B ^ Not E ^ Not C --> F , Not B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 36.0022 sec.
[1 th iter] Elapsed: 34.3057 sec.
Run 335 batches
grad norm 0.03524165628964694 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.133481662640395
Params  [tensor([0.1136], dtype=torch.float64, requires_grad=True), tensor([0.1022], dtype=torch.float64, requires_grad=True), tensor([0.5868], dtype=torch.float64, requires_grad=True), tensor([0.1097], dtype=torch.float64, requires_grad=True), tensor([0.0969], dtype=torch.float64, requires_grad=True), tensor([0.0705], dtype=torch.float64, requires_grad=True), tensor([0.5617], dtype=torch.float64, requires_grad=True), tensor([0.0260], dtype=torch.float64, requires_grad=True), tensor([0.0714], dtype=torch.float64, requires_grad=True), tensor([0.0346], dtype=torch.float64, requires_grad=True), tensor([0.0445], dtype=torch.float64, requires_grad=True), tensor([0.0076], dtype=torch.float64, requires_grad=True), tensor([0.0074], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1719 min.
Update Log-likelihood (torch)=  -5.133481662640395
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1136,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1022.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5868.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1097.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0969.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0705.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5617.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0260.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0714.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0346.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0445.
Rule10: Not D ^ Not E ^ Not C --> F , Not D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0076.
Rule11: Not B ^ Not E ^ Not C --> F , Not B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0074.
delete these rules: [10, 11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1136
Rule0: C --> F , C BEFORE F, weight=0.1022
Rule1: Not C --> F , Not C BEFORE F, weight=0.5868
Rule2: B --> F , B EQUAL F, weight=0.1097
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0969
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0705
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5617
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0260
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0714
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0346
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0445
[0 th iter] Elapsed: 23.1112 sec.
[1 th iter] Elapsed: 23.4336 sec.
[2 th iter] Elapsed: 26.1060 sec.
Run 541 batches
grad norm 0.07794440932597131 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.283845156338337
Params  [tensor([0.1107], dtype=torch.float64, requires_grad=True), tensor([0.1050], dtype=torch.float64, requires_grad=True), tensor([0.5921], dtype=torch.float64, requires_grad=True), tensor([0.1175], dtype=torch.float64, requires_grad=True), tensor([0.0888], dtype=torch.float64, requires_grad=True), tensor([0.0744], dtype=torch.float64, requires_grad=True), tensor([0.5585], dtype=torch.float64, requires_grad=True), tensor([0.0275], dtype=torch.float64, requires_grad=True), tensor([0.0668], dtype=torch.float64, requires_grad=True), tensor([0.0325], dtype=torch.float64, requires_grad=True), tensor([0.0441], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2110 min.
update Log-likelihood (torch)=  -5.283845156338337
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1107,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1050.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5921.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1175.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0888.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0744.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5585.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0275.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0668.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0325.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0441.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 24 candidate rules.
[multiprocess log-grad] Elapsed: 2.3701 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.12835, std=2.07623, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12705, std=2.15345, Rule = A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08910, std=0.92853, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08793, std=0.89126, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07973, std=0.92578, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07179, std=0.98950, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06716, std=0.99303, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06289, std=0.94288, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05630, std=1.02216, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05436, std=0.95645, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04757, std=2.10879, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04333, std=0.38612, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03612, std=1.11030, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03210, std=1.11711, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03098, std=1.09428, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02569, std=1.09886, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02222, std=0.56370, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02086, std=0.60250, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01938, std=0.41365, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01857, std=0.59603, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01598, std=0.42416, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01342, std=0.46431, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01065, std=0.48467, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00986, std=0.41168, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.12835179138503675
new rule added.
Best rule is: A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.12705270920913478
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1107
Rule0: C --> F , C BEFORE F, weight=0.1050
Rule1: Not C --> F , Not C BEFORE F, weight=0.5921
Rule2: B --> F , B EQUAL F, weight=0.1175
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0888
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0744
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5585
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0275
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0668
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0325
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0441
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule11: A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 38.5208 sec.
[1 th iter] Elapsed: 33.4813 sec.
[2 th iter] Elapsed: 32.3884 sec.
3 th iter
grad norm=0.09524438854370944. num_batch_no_update =219
Head = F, base = 0.1169
Rule0: C --> F , C BEFORE F, weight=0.1004
Rule1: Not C --> F , Not C BEFORE F, weight=0.5859
Rule2: B --> F , B EQUAL F, weight=0.1203
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0807
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0687
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5556
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0262
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0699
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0257
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0442
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0151
Rule11: A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0018
[3 th iter] Elapsed: 32.2308 sec.
Run 831 batches
grad norm 0.035973579806920855 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.34768524775261
Params  [tensor([0.1170], dtype=torch.float64, requires_grad=True), tensor([0.1000], dtype=torch.float64, requires_grad=True), tensor([0.5849], dtype=torch.float64, requires_grad=True), tensor([0.1186], dtype=torch.float64, requires_grad=True), tensor([0.0817], dtype=torch.float64, requires_grad=True), tensor([0.0687], dtype=torch.float64, requires_grad=True), tensor([0.5564], dtype=torch.float64, requires_grad=True), tensor([0.0283], dtype=torch.float64, requires_grad=True), tensor([0.0774], dtype=torch.float64, requires_grad=True), tensor([0.0305], dtype=torch.float64, requires_grad=True), tensor([0.0485], dtype=torch.float64, requires_grad=True), tensor([0.0159], dtype=torch.float64, requires_grad=True), tensor([0.0070], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.2771 min.
Update Log-likelihood (torch)=  -5.34768524775261
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1170,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1000.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5849.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1186.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0817.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0687.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5564.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0283.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0774.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0305.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0485.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0159.
Rule11: A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0070.
delete these rules: [11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1170
Rule0: C --> F , C BEFORE F, weight=0.1000
Rule1: Not C --> F , Not C BEFORE F, weight=0.5849
Rule2: B --> F , B EQUAL F, weight=0.1186
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0817
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0687
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5564
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0283
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0774
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0305
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0485
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0159
[0 th iter] Elapsed: 27.0852 sec.
[1 th iter] Elapsed: 28.2001 sec.
Run 301 batches
grad norm 0.14917811021670055 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.766882146653944
Params  [tensor([0.1140], dtype=torch.float64, requires_grad=True), tensor([0.1053], dtype=torch.float64, requires_grad=True), tensor([0.5934], dtype=torch.float64, requires_grad=True), tensor([0.1246], dtype=torch.float64, requires_grad=True), tensor([0.0865], dtype=torch.float64, requires_grad=True), tensor([0.0773], dtype=torch.float64, requires_grad=True), tensor([0.5594], dtype=torch.float64, requires_grad=True), tensor([0.0334], dtype=torch.float64, requires_grad=True), tensor([0.0778], dtype=torch.float64, requires_grad=True), tensor([0.0339], dtype=torch.float64, requires_grad=True), tensor([0.0450], dtype=torch.float64, requires_grad=True), tensor([0.0205], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 55.2931 sec.
update Log-likelihood (torch)=  -5.766882146653944
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1140,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1053.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5934.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1246.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0865.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0773.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5594.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0334.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0778.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0339.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0450.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0205.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 21 candidate rules.
[multiprocess log-grad] Elapsed: 2.1276 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03807, std=0.93469, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03783, std=0.97059, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03275, std=0.39545, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02741, std=0.98693, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01887, std=1.05423, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01491, std=1.03961, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01151, std=0.57634, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01127, std=1.00802, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00897, std=0.60418, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00790, std=0.61534, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00774, std=0.42389, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00375, std=1.10288, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00330, std=1.00775, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00302, std=0.43947, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00036, std=0.49357, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00567, std=0.53250, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01615, std=1.18960, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02280, std=1.18641, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02374, std=1.16071, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02729, std=1.17309, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.06377, std=2.22990, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.03806580209235446
new rule added.
Best rule is: D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.0378322106705576
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1140
Rule0: C --> F , C BEFORE F, weight=0.1053
Rule1: Not C --> F , Not C BEFORE F, weight=0.5934
Rule2: B --> F , B EQUAL F, weight=0.1246
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0865
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0773
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5594
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0334
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0778
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0339
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0450
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0205
Rule11: Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule12: D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 34.2672 sec.
[1 th iter] Elapsed: 39.3272 sec.
Run 356 batches
grad norm 0.04716103937885404 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3072129283479015
Params  [tensor([0.1112], dtype=torch.float64, requires_grad=True), tensor([0.0977], dtype=torch.float64, requires_grad=True), tensor([0.5930], dtype=torch.float64, requires_grad=True), tensor([0.1209], dtype=torch.float64, requires_grad=True), tensor([0.0783], dtype=torch.float64, requires_grad=True), tensor([0.0721], dtype=torch.float64, requires_grad=True), tensor([0.5575], dtype=torch.float64, requires_grad=True), tensor([0.0258], dtype=torch.float64, requires_grad=True), tensor([0.0734], dtype=torch.float64, requires_grad=True), tensor([0.0239], dtype=torch.float64, requires_grad=True), tensor([0.0412], dtype=torch.float64, requires_grad=True), tensor([0.0117], dtype=torch.float64, requires_grad=True), tensor([0.0018], dtype=torch.float64, requires_grad=True), tensor([0.0015], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2267 min.
Update Log-likelihood (torch)=  -5.3072129283479015
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1112,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0977.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5930.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1209.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0783.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0721.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5575.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0258.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0734.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0239.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0412.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0117.
Rule11: Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0018.
Rule12: D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0015.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1112
Rule0: C --> F , C BEFORE F, weight=0.0977
Rule1: Not C --> F , Not C BEFORE F, weight=0.5930
Rule2: B --> F , B EQUAL F, weight=0.1209
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0783
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0721
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5575
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0258
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0734
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0239
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0412
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0117
[0 th iter] Elapsed: 30.0469 sec.
[1 th iter] Elapsed: 35.3511 sec.
[2 th iter] Elapsed: 28.6472 sec.
Run 590 batches
grad norm 0.025640787663633494 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.56873834470422
Params  [tensor([0.1205], dtype=torch.float64, requires_grad=True), tensor([0.0982], dtype=torch.float64, requires_grad=True), tensor([0.6014], dtype=torch.float64, requires_grad=True), tensor([0.1341], dtype=torch.float64, requires_grad=True), tensor([0.0804], dtype=torch.float64, requires_grad=True), tensor([0.0714], dtype=torch.float64, requires_grad=True), tensor([0.5581], dtype=torch.float64, requires_grad=True), tensor([0.0275], dtype=torch.float64, requires_grad=True), tensor([0.0743], dtype=torch.float64, requires_grad=True), tensor([0.0236], dtype=torch.float64, requires_grad=True), tensor([0.0331], dtype=torch.float64, requires_grad=True), tensor([0.0107], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.5675 min.
update Log-likelihood (torch)=  -5.56873834470422
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1205,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0982.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6014.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1341.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0804.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0714.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5581.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0275.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0743.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0236.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0331.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0107.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 17 candidate rules.
[multiprocess log-grad] Elapsed: 2.0130 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.08550, std=0.92548, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07676, std=0.98700, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07261, std=0.99252, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06760, std=0.94619, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06021, std=1.01983, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05888, std=0.95903, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05597, std=2.12111, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04460, std=0.38678, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03858, std=1.10952, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03489, std=1.09733, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03472, std=1.11919, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02938, std=1.09912, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02289, std=0.56563, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02092, std=0.59582, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02079, std=0.60418, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02072, std=0.41460, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01795, std=0.42440, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.08550321873627391
new rule added.
Best rule is: A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.0767583774742378
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1205
Rule0: C --> F , C BEFORE F, weight=0.0982
Rule1: Not C --> F , Not C BEFORE F, weight=0.6014
Rule2: B --> F , B EQUAL F, weight=0.1341
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0804
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0714
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5581
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0275
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0743
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0236
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0331
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0107
Rule11: A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule12: A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 37.0238 sec.
[1 th iter] Elapsed: 35.7800 sec.
Run 452 batches
grad norm 0.1025806388563401 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.2916612541616
Params  [tensor([0.1230], dtype=torch.float64, requires_grad=True), tensor([0.0997], dtype=torch.float64, requires_grad=True), tensor([0.6021], dtype=torch.float64, requires_grad=True), tensor([0.1312], dtype=torch.float64, requires_grad=True), tensor([0.0803], dtype=torch.float64, requires_grad=True), tensor([0.0668], dtype=torch.float64, requires_grad=True), tensor([0.5587], dtype=torch.float64, requires_grad=True), tensor([0.0266], dtype=torch.float64, requires_grad=True), tensor([0.0683], dtype=torch.float64, requires_grad=True), tensor([0.0272], dtype=torch.float64, requires_grad=True), tensor([0.0348], dtype=torch.float64, requires_grad=True), tensor([0.0117], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True), tensor([0.0014], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2135 min.
Update Log-likelihood (torch)=  -5.2916612541616
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1230,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0997.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6021.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1312.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0803.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0668.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5587.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0266.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0683.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0272.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0348.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0117.
Rule11: A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0003.
Rule12: A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0014.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1230
Rule0: C --> F , C BEFORE F, weight=0.0997
Rule1: Not C --> F , Not C BEFORE F, weight=0.6021
Rule2: B --> F , B EQUAL F, weight=0.1312
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0803
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0668
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5587
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0266
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0683
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0272
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0348
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0117
[0 th iter] Elapsed: 29.9612 sec.
[1 th iter] Elapsed: 27.5557 sec.
[2 th iter] Elapsed: 28.5804 sec.
Run 689 batches
grad norm 0.1180633003343315 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.416748231781545
Params  [tensor([0.1195], dtype=torch.float64, requires_grad=True), tensor([0.0958], dtype=torch.float64, requires_grad=True), tensor([0.6042], dtype=torch.float64, requires_grad=True), tensor([0.1197], dtype=torch.float64, requires_grad=True), tensor([0.0802], dtype=torch.float64, requires_grad=True), tensor([0.0650], dtype=torch.float64, requires_grad=True), tensor([0.5658], dtype=torch.float64, requires_grad=True), tensor([0.0210], dtype=torch.float64, requires_grad=True), tensor([0.0671], dtype=torch.float64, requires_grad=True), tensor([0.0285], dtype=torch.float64, requires_grad=True), tensor([0.0421], dtype=torch.float64, requires_grad=True), tensor([0.0154], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.4351 min.
update Log-likelihood (torch)=  -5.416748231781545
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1195,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0958.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6042.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1197.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0802.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0650.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5658.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0210.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0671.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0285.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0421.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0154.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 15 workers, process 15 candidate rules.
[multiprocess log-grad] Elapsed: 1.2991 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.07117, std=0.99686, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06383, std=0.95414, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05760, std=0.96234, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05608, std=2.12804, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05589, std=1.03454, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04453, std=0.38707, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03794, std=1.12180, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03450, std=1.10445, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03419, std=1.12696, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02904, std=1.10926, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02301, std=0.56519, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02089, std=0.41393, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02086, std=0.60466, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02067, std=0.59593, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01784, std=0.42428, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.07117013205134501
new rule added.
Best rule is: Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.06383482761496034
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1195
Rule0: C --> F , C BEFORE F, weight=0.0958
Rule1: Not C --> F , Not C BEFORE F, weight=0.6042
Rule2: B --> F , B EQUAL F, weight=0.1197
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0802
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0650
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5658
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0210
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0671
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0285
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0421
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0154
Rule11: D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule12: Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 35.0645 sec.
[1 th iter] Elapsed: 35.7976 sec.
[2 th iter] Elapsed: 36.0916 sec.
Run 665 batches
grad norm 0.03968253058762652 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.374914550881078
Params  [tensor([0.1189], dtype=torch.float64, requires_grad=True), tensor([0.0991], dtype=torch.float64, requires_grad=True), tensor([0.6119], dtype=torch.float64, requires_grad=True), tensor([0.1274], dtype=torch.float64, requires_grad=True), tensor([0.0816], dtype=torch.float64, requires_grad=True), tensor([0.0639], dtype=torch.float64, requires_grad=True), tensor([0.5694], dtype=torch.float64, requires_grad=True), tensor([0.0261], dtype=torch.float64, requires_grad=True), tensor([0.0646], dtype=torch.float64, requires_grad=True), tensor([0.0320], dtype=torch.float64, requires_grad=True), tensor([0.0481], dtype=torch.float64, requires_grad=True), tensor([0.0152], dtype=torch.float64, requires_grad=True), tensor([-0.0004], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.7827 min.
Update Log-likelihood (torch)=  -5.374914550881078
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1189,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0991.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6119.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1274.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0816.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0639.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5694.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0261.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0646.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0320.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0481.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0152.
Rule11: D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0004.
Rule12: Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0002.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1189
Rule0: C --> F , C BEFORE F, weight=0.0991
Rule1: Not C --> F , Not C BEFORE F, weight=0.6119
Rule2: B --> F , B EQUAL F, weight=0.1274
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0816
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0639
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5694
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0261
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0646
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0320
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0481
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0152
[0 th iter] Elapsed: 27.7225 sec.
[1 th iter] Elapsed: 27.1169 sec.
Run 303 batches
grad norm 0.03599033758503667 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.4502711411459535
Params  [tensor([0.1108], dtype=torch.float64, requires_grad=True), tensor([0.0939], dtype=torch.float64, requires_grad=True), tensor([0.6070], dtype=torch.float64, requires_grad=True), tensor([0.1159], dtype=torch.float64, requires_grad=True), tensor([0.0770], dtype=torch.float64, requires_grad=True), tensor([0.0617], dtype=torch.float64, requires_grad=True), tensor([0.5662], dtype=torch.float64, requires_grad=True), tensor([0.0254], dtype=torch.float64, requires_grad=True), tensor([0.0640], dtype=torch.float64, requires_grad=True), tensor([0.0299], dtype=torch.float64, requires_grad=True), tensor([0.0479], dtype=torch.float64, requires_grad=True), tensor([0.0209], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 54.8473 sec.
update Log-likelihood (torch)=  -5.4502711411459535
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1108,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0939.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6070.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1159.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0770.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0617.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5662.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0254.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0640.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0299.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0479.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0209.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 13 workers, process 13 candidate rules.
[multiprocess log-grad] Elapsed: 1.1339 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05030, std=0.96358, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04933, std=1.03799, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04284, std=2.12650, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04270, std=0.38681, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03248, std=1.12398, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02869, std=1.12775, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02831, std=1.10465, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02297, std=1.11048, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02199, std=0.56420, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01962, std=0.59520, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01892, std=0.41329, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01878, std=0.60533, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01558, std=0.42422, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.05029825414671868
new rule added.
Best rule is: Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.04933295376214414
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1108
Rule0: C --> F , C BEFORE F, weight=0.0939
Rule1: Not C --> F , Not C BEFORE F, weight=0.6070
Rule2: B --> F , B EQUAL F, weight=0.1159
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0770
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0617
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5662
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0254
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0640
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0299
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0479
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0209
Rule11: Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule12: Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 35.0435 sec.
[1 th iter] Elapsed: 33.2090 sec.
Run 360 batches
grad norm 0.0996836686400583 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.664801719817673
Params  [tensor([0.1166], dtype=torch.float64, requires_grad=True), tensor([0.0943], dtype=torch.float64, requires_grad=True), tensor([0.6147], dtype=torch.float64, requires_grad=True), tensor([0.1153], dtype=torch.float64, requires_grad=True), tensor([0.0766], dtype=torch.float64, requires_grad=True), tensor([0.0645], dtype=torch.float64, requires_grad=True), tensor([0.5632], dtype=torch.float64, requires_grad=True), tensor([0.0264], dtype=torch.float64, requires_grad=True), tensor([0.0626], dtype=torch.float64, requires_grad=True), tensor([0.0233], dtype=torch.float64, requires_grad=True), tensor([0.0502], dtype=torch.float64, requires_grad=True), tensor([0.0182], dtype=torch.float64, requires_grad=True), tensor([-0.0001], dtype=torch.float64, requires_grad=True), tensor([-6.9292e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1377 min.
Update Log-likelihood (torch)=  -5.664801719817673
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1166,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0943.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6147.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1153.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0766.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0645.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5632.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0264.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0626.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0233.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0502.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0182.
Rule11: Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0001.
Rule12: Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0001.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1166
Rule0: C --> F , C BEFORE F, weight=0.0943
Rule1: Not C --> F , Not C BEFORE F, weight=0.6147
Rule2: B --> F , B EQUAL F, weight=0.1153
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0766
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0645
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5632
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0264
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0626
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0233
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0502
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0182
[0 th iter] Elapsed: 32.9769 sec.
[1 th iter] Elapsed: 27.2377 sec.
Run 301 batches
grad norm 0.11556300408543817 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.276977450853315
Params  [tensor([0.1120], dtype=torch.float64, requires_grad=True), tensor([0.0916], dtype=torch.float64, requires_grad=True), tensor([0.6144], dtype=torch.float64, requires_grad=True), tensor([0.1148], dtype=torch.float64, requires_grad=True), tensor([0.0772], dtype=torch.float64, requires_grad=True), tensor([0.0664], dtype=torch.float64, requires_grad=True), tensor([0.5671], dtype=torch.float64, requires_grad=True), tensor([0.0263], dtype=torch.float64, requires_grad=True), tensor([0.0616], dtype=torch.float64, requires_grad=True), tensor([0.0270], dtype=torch.float64, requires_grad=True), tensor([0.0529], dtype=torch.float64, requires_grad=True), tensor([0.0240], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0037 min.
update Log-likelihood (torch)=  -5.276977450853315
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1120,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0916.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6144.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1148.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0772.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0664.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5671.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0263.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0616.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0270.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0529.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0240.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 11 workers, process 11 candidate rules.
[multiprocess log-grad] Elapsed: 1.0966 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03827, std=0.39047, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01764, std=0.56994, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01581, std=0.59872, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01380, std=0.41797, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01371, std=0.61013, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01336, std=1.14219, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01031, std=0.43094, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00919, std=1.12255, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00799, std=1.14756, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00485, std=1.12847, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00360, std=2.16312, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.03826755488329116
new rule added.
best gain 0.01764414261038417 does not meet thershold 0.02.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1120
Rule0: C --> F , C BEFORE F, weight=0.0916
Rule1: Not C --> F , Not C BEFORE F, weight=0.6144
Rule2: B --> F , B EQUAL F, weight=0.1148
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0772
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0664
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5671
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0263
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0616
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0270
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0529
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0240
Rule11: Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 30.1020 sec.
[1 th iter] Elapsed: 33.3942 sec.
Run 301 batches
grad norm 0.08145009542814008 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.499666445412432
Params  [tensor([0.1128], dtype=torch.float64, requires_grad=True), tensor([0.0887], dtype=torch.float64, requires_grad=True), tensor([0.6079], dtype=torch.float64, requires_grad=True), tensor([0.1149], dtype=torch.float64, requires_grad=True), tensor([0.0723], dtype=torch.float64, requires_grad=True), tensor([0.0597], dtype=torch.float64, requires_grad=True), tensor([0.5712], dtype=torch.float64, requires_grad=True), tensor([0.0274], dtype=torch.float64, requires_grad=True), tensor([0.0613], dtype=torch.float64, requires_grad=True), tensor([0.0278], dtype=torch.float64, requires_grad=True), tensor([0.0527], dtype=torch.float64, requires_grad=True), tensor([0.0188], dtype=torch.float64, requires_grad=True), tensor([5.5570e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0584 min.
Update Log-likelihood (torch)=  -5.499666445412432
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1128,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0887.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6079.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1149.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0723.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0597.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5712.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0274.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0613.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0278.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0527.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0188.
Rule11: Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0001.
delete these rules: [11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1128
Rule0: C --> F , C BEFORE F, weight=0.0887
Rule1: Not C --> F , Not C BEFORE F, weight=0.6079
Rule2: B --> F , B EQUAL F, weight=0.1149
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0723
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0597
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5712
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0274
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0613
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0278
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0527
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0188
[0 th iter] Elapsed: 27.8128 sec.
[1 th iter] Elapsed: 26.3386 sec.
Run 302 batches
grad norm 0.07947986225088188 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.587669796147792
Params  [tensor([0.1126], dtype=torch.float64, requires_grad=True), tensor([0.0814], dtype=torch.float64, requires_grad=True), tensor([0.6051], dtype=torch.float64, requires_grad=True), tensor([0.1197], dtype=torch.float64, requires_grad=True), tensor([0.0753], dtype=torch.float64, requires_grad=True), tensor([0.0613], dtype=torch.float64, requires_grad=True), tensor([0.5652], dtype=torch.float64, requires_grad=True), tensor([0.0230], dtype=torch.float64, requires_grad=True), tensor([0.0631], dtype=torch.float64, requires_grad=True), tensor([0.0261], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.0182], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 54.1589 sec.
update Log-likelihood (torch)=  -5.587669796147792
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1126,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0814.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6051.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1197.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0753.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0613.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5652.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0230.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0631.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0261.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0488.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0182.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 6 workers, process 6 candidate rules.
[multiprocess log-grad] Elapsed: 1.5824 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06196, std=1.09001, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02895, std=0.55797, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02614, std=0.60021, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02612, std=0.59076, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02599, std=0.40814, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02325, std=0.41646, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.06195757733434503
new rule added.
Best rule is: D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.02895074864720914
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1126
Rule0: C --> F , C BEFORE F, weight=0.0814
Rule1: Not C --> F , Not C BEFORE F, weight=0.6051
Rule2: B --> F , B EQUAL F, weight=0.1197
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0753
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0613
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5652
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0230
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0631
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0261
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0488
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0182
Rule11: Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule12: D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 51.7958 sec.
[1 th iter] Elapsed: 52.6402 sec.
Run 421 batches
grad norm 0.02155363419278938 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.29069504503696
Params  [tensor([0.1155], dtype=torch.float64, requires_grad=True), tensor([0.0874], dtype=torch.float64, requires_grad=True), tensor([0.6107], dtype=torch.float64, requires_grad=True), tensor([0.1130], dtype=torch.float64, requires_grad=True), tensor([0.0784], dtype=torch.float64, requires_grad=True), tensor([0.0638], dtype=torch.float64, requires_grad=True), tensor([0.5685], dtype=torch.float64, requires_grad=True), tensor([0.0199], dtype=torch.float64, requires_grad=True), tensor([0.0697], dtype=torch.float64, requires_grad=True), tensor([0.0234], dtype=torch.float64, requires_grad=True), tensor([0.0464], dtype=torch.float64, requires_grad=True), tensor([0.0165], dtype=torch.float64, requires_grad=True), tensor([8.7853e-05], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.7411 min.
Update Log-likelihood (torch)=  -5.29069504503696
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1155,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0874.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6107.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1130.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0784.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0638.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5685.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0199.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0697.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0234.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0464.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0165.
Rule11: Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0001.
Rule12: D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0003.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1155
Rule0: C --> F , C BEFORE F, weight=0.0874
Rule1: Not C --> F , Not C BEFORE F, weight=0.6107
Rule2: B --> F , B EQUAL F, weight=0.1130
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0784
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0638
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5685
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0199
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0697
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0234
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0464
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0165
[0 th iter] Elapsed: 42.6303 sec.
[1 th iter] Elapsed: 42.6692 sec.
[2 th iter] Elapsed: 41.7071 sec.
Run 506 batches
grad norm 0.06579019536824318 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.390428262422803
Params  [tensor([0.1165], dtype=torch.float64, requires_grad=True), tensor([0.0842], dtype=torch.float64, requires_grad=True), tensor([0.6162], dtype=torch.float64, requires_grad=True), tensor([0.1169], dtype=torch.float64, requires_grad=True), tensor([0.0772], dtype=torch.float64, requires_grad=True), tensor([0.0656], dtype=torch.float64, requires_grad=True), tensor([0.5673], dtype=torch.float64, requires_grad=True), tensor([0.0193], dtype=torch.float64, requires_grad=True), tensor([0.0676], dtype=torch.float64, requires_grad=True), tensor([0.0303], dtype=torch.float64, requires_grad=True), tensor([0.0557], dtype=torch.float64, requires_grad=True), tensor([0.0155], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.1169 min.
update Log-likelihood (torch)=  -5.390428262422803
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1148,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0844.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6147.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1170.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0785.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0650.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5640.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0176.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0670.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0263.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0502.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0154.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 4 workers, process 4 candidate rules.
[multiprocess log-grad] Elapsed: 1.5247 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02159, std=0.60344, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02141, std=0.59463, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02140, std=0.41225, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01860, std=0.42228, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.021594804362957843
new rule added.
Best rule is: Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.021414682765014067
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1148
Rule0: C --> F , C BEFORE F, weight=0.0844
Rule1: Not C --> F , Not C BEFORE F, weight=0.6147
Rule2: B --> F , B EQUAL F, weight=0.1170
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0785
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0650
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5640
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0176
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0670
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0263
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0502
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0154
Rule11: A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule12: Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 56.2395 sec.
[1 th iter] Elapsed: 52.1447 sec.
Run 303 batches
grad norm 0.03644353073688772 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.441419531218159
Params  [tensor([0.1186], dtype=torch.float64, requires_grad=True), tensor([0.0868], dtype=torch.float64, requires_grad=True), tensor([0.6185], dtype=torch.float64, requires_grad=True), tensor([0.1190], dtype=torch.float64, requires_grad=True), tensor([0.0781], dtype=torch.float64, requires_grad=True), tensor([0.0663], dtype=torch.float64, requires_grad=True), tensor([0.5641], dtype=torch.float64, requires_grad=True), tensor([0.0171], dtype=torch.float64, requires_grad=True), tensor([0.0653], dtype=torch.float64, requires_grad=True), tensor([0.0242], dtype=torch.float64, requires_grad=True), tensor([0.0531], dtype=torch.float64, requires_grad=True), tensor([0.0177], dtype=torch.float64, requires_grad=True), tensor([-7.4619e-05], dtype=torch.float64, requires_grad=True), tensor([0.0005], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.8065 min.
Update Log-likelihood (torch)=  -5.441419531218159
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1186,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0868.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6185.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1190.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0781.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0663.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5641.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0171.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0653.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0242.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0531.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0177.
Rule11: A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0001.
Rule12: Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0005.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1186
Rule0: C --> F , C BEFORE F, weight=0.0868
Rule1: Not C --> F , Not C BEFORE F, weight=0.6185
Rule2: B --> F , B EQUAL F, weight=0.1190
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0781
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0663
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5641
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0171
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0653
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0242
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0531
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0177
[0 th iter] Elapsed: 41.0317 sec.
[1 th iter] Elapsed: 43.2338 sec.
Run 398 batches
grad norm 0.09787627522223721 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.527480124354097
Params  [tensor([0.1130], dtype=torch.float64, requires_grad=True), tensor([0.0831], dtype=torch.float64, requires_grad=True), tensor([0.6153], dtype=torch.float64, requires_grad=True), tensor([0.1160], dtype=torch.float64, requires_grad=True), tensor([0.0742], dtype=torch.float64, requires_grad=True), tensor([0.0660], dtype=torch.float64, requires_grad=True), tensor([0.5630], dtype=torch.float64, requires_grad=True), tensor([0.0231], dtype=torch.float64, requires_grad=True), tensor([0.0676], dtype=torch.float64, requires_grad=True), tensor([0.0215], dtype=torch.float64, requires_grad=True), tensor([0.0521], dtype=torch.float64, requires_grad=True), tensor([0.0160], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.4047 min.
update Log-likelihood (torch)=  -5.527480124354097
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1130,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0831.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6153.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1160.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0742.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0660.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5630.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0231.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0676.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0215.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0521.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0160.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 2 workers, process 2 candidate rules.
[multiprocess log-grad] Elapsed: 56.3444 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02101, std=0.41220, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01828, std=0.42208, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
Best rule is: D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.02101192585513802
new rule added.
best gain 0.018284264056502776 does not meet thershold 0.02.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1130
Rule0: C --> F , C BEFORE F, weight=0.0831
Rule1: Not C --> F , Not C BEFORE F, weight=0.6153
Rule2: B --> F , B EQUAL F, weight=0.1160
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0742
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0660
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5630
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0231
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0676
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0215
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0521
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0160
Rule11: D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 29.7308 sec.
[1 th iter] Elapsed: 37.6913 sec.
Run 305 batches
grad norm 0.03453900541109156 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.282215906674113
Params  [tensor([0.1131], dtype=torch.float64, requires_grad=True), tensor([0.0778], dtype=torch.float64, requires_grad=True), tensor([0.6155], dtype=torch.float64, requires_grad=True), tensor([0.1201], dtype=torch.float64, requires_grad=True), tensor([0.0702], dtype=torch.float64, requires_grad=True), tensor([0.0617], dtype=torch.float64, requires_grad=True), tensor([0.5593], dtype=torch.float64, requires_grad=True), tensor([0.0166], dtype=torch.float64, requires_grad=True), tensor([0.0657], dtype=torch.float64, requires_grad=True), tensor([0.0208], dtype=torch.float64, requires_grad=True), tensor([0.0479], dtype=torch.float64, requires_grad=True), tensor([0.0185], dtype=torch.float64, requires_grad=True), tensor([-1.8992e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1238 min.
Update Log-likelihood (torch)=  -5.282215906674113
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1131,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0778.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6155.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1201.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0702.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0617.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5593.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0166.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0657.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0208.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0479.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0185.
Rule11: D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0000.
delete these rules: [11]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1131
Rule0: C --> F , C BEFORE F, weight=0.0778
Rule1: Not C --> F , Not C BEFORE F, weight=0.6155
Rule2: B --> F , B EQUAL F, weight=0.1201
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0702
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0617
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5593
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0166
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0657
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0208
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0479
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0185
[0 th iter] Elapsed: 31.9476 sec.
[1 th iter] Elapsed: 28.2075 sec.
Run 301 batches
grad norm 0.08283535006709758 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.476142922280042
Params  [tensor([0.1143], dtype=torch.float64, requires_grad=True), tensor([0.0809], dtype=torch.float64, requires_grad=True), tensor([0.6200], dtype=torch.float64, requires_grad=True), tensor([0.1211], dtype=torch.float64, requires_grad=True), tensor([0.0717], dtype=torch.float64, requires_grad=True), tensor([0.0675], dtype=torch.float64, requires_grad=True), tensor([0.5690], dtype=torch.float64, requires_grad=True), tensor([0.0196], dtype=torch.float64, requires_grad=True), tensor([0.0689], dtype=torch.float64, requires_grad=True), tensor([0.0277], dtype=torch.float64, requires_grad=True), tensor([0.0530], dtype=torch.float64, requires_grad=True), tensor([0.0187], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0027 min.
update Log-likelihood (torch)=  -5.476142922280042
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1143,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0809.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6200.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1211.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0717.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0675.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5690.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0196.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0689.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0277.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0530.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0187.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 1 workers, process 1 candidate rules.
[multiprocess log-grad] Elapsed: 53.6736 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01406, std=0.42713, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
best gain 0.014062646115408788 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.2084 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.16963, std=2.28952, Rule = D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16716, std=0.51308, Rule = C ^ Not B ^ A --> F , C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12741, std=2.43263, Rule = E ^ Not B ^ A --> F , E BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11187, std=2.21036, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10840, std=2.48377, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09621, std=1.97122, Rule = C ^ Not B ^ A --> F , C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09595, std=1.93923, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07749, std=1.06788, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07513, std=1.08614, Rule = D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06917, std=1.11989, Rule = E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06798, std=1.10759, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06250, std=0.91653, Rule = C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06035, std=0.92518, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05519, std=1.26900, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05383, std=1.17869, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05209, std=1.16802, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05142, std=0.41361, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04697, std=0.99167, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04648, std=1.25581, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04338, std=0.98772, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03830, std=0.60999, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03521, std=0.68673, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03337, std=0.47081, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03056, std=0.45051, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02318, std=0.64712, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02265, std=0.46536, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02022, std=0.39424, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01651, std=0.55377, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01575, std=0.49803, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01473, std=0.47782, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00932, std=0.41591, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00900, std=0.51095, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00560, std=0.56106, Rule = E ^ Not B ^ A --> F , E EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00100, std=0.62054, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00115, std=0.71145, Rule = E ^ Not B ^ A --> F , E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00226, std=0.66350, Rule = D ^ Not B ^ A --> F , D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.16962598783032382
new rule added.
Best rule is: C ^ Not B ^ A --> F , C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.1671588989778157
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1143
Rule0: C --> F , C BEFORE F, weight=0.0809
Rule1: Not C --> F , Not C BEFORE F, weight=0.6200
Rule2: B --> F , B EQUAL F, weight=0.1211
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0717
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0675
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5690
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0196
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0689
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0277
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0530
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0187
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule12: C ^ Not B ^ A --> F , C EQUAL F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 36.5250 sec.
[1 th iter] Elapsed: 35.8054 sec.
[2 th iter] Elapsed: 37.1479 sec.
Run 565 batches
grad norm 0.025107143208278983 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.382687129709188
Params  [tensor([0.1197], dtype=torch.float64, requires_grad=True), tensor([0.0772], dtype=torch.float64, requires_grad=True), tensor([0.6223], dtype=torch.float64, requires_grad=True), tensor([0.1147], dtype=torch.float64, requires_grad=True), tensor([0.0699], dtype=torch.float64, requires_grad=True), tensor([0.0674], dtype=torch.float64, requires_grad=True), tensor([0.5710], dtype=torch.float64, requires_grad=True), tensor([0.0196], dtype=torch.float64, requires_grad=True), tensor([0.0654], dtype=torch.float64, requires_grad=True), tensor([0.0286], dtype=torch.float64, requires_grad=True), tensor([0.0527], dtype=torch.float64, requires_grad=True), tensor([0.0214], dtype=torch.float64, requires_grad=True), tensor([0.0185], dtype=torch.float64, requires_grad=True), tensor([-4.9522e-06], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.8248 min.
Update Log-likelihood (torch)=  -5.382687129709188
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1197,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0772.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6223.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1147.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0699.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0674.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5710.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0196.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0654.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0286.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0527.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0214.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0185.
Rule12: C ^ Not B ^ A --> F , C EQUAL F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0000.
delete these rules: [12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1197
Rule0: C --> F , C BEFORE F, weight=0.0772
Rule1: Not C --> F , Not C BEFORE F, weight=0.6223
Rule2: B --> F , B EQUAL F, weight=0.1147
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0699
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0674
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5710
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0196
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0654
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0286
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0527
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0214
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0185
[0 th iter] Elapsed: 33.5244 sec.
[1 th iter] Elapsed: 30.7521 sec.
Run 378 batches
grad norm 0.061619706108926 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.4300850565752965
Params  [tensor([0.1169], dtype=torch.float64, requires_grad=True), tensor([0.0728], dtype=torch.float64, requires_grad=True), tensor([0.6222], dtype=torch.float64, requires_grad=True), tensor([0.1111], dtype=torch.float64, requires_grad=True), tensor([0.0703], dtype=torch.float64, requires_grad=True), tensor([0.0678], dtype=torch.float64, requires_grad=True), tensor([0.5659], dtype=torch.float64, requires_grad=True), tensor([0.0176], dtype=torch.float64, requires_grad=True), tensor([0.0605], dtype=torch.float64, requires_grad=True), tensor([0.0212], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True), tensor([0.0235], dtype=torch.float64, requires_grad=True), tensor([0.0166], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0714 min.
update Log-likelihood (torch)=  -5.4300850565752965
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1169,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0728.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6222.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1111.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0703.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0678.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5659.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0176.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0605.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0212.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0518.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0235.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0166.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 3.1503 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.14293, std=2.40791, Rule = E ^ Not B ^ A --> F , E BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12321, std=2.46035, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.12079, std=1.94120, Rule = C ^ Not B ^ A --> F , C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11370, std=2.22413, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.11134, std=1.92345, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08254, std=1.06622, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07585, std=1.09045, Rule = D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07465, std=1.11856, Rule = E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06956, std=0.91461, Rule = C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06865, std=1.11305, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06661, std=0.92152, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06192, std=1.25524, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05504, std=1.18397, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05458, std=0.98716, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05422, std=0.41125, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05312, std=1.17362, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05275, std=1.24380, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05026, std=0.97937, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04083, std=0.60931, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03587, std=0.68624, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03239, std=0.47382, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02969, std=0.45320, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02617, std=0.45389, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02472, std=0.64617, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02173, std=0.39337, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01790, std=0.49221, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01785, std=0.55489, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01433, std=0.47953, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01082, std=0.50817, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00908, std=0.41704, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00776, std=0.55566, Rule = E ^ Not B ^ A --> F , E EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00299, std=0.60905, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00048, std=0.71214, Rule = E ^ Not B ^ A --> F , E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00012, std=0.66285, Rule = D ^ Not B ^ A --> F , D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: E ^ Not B ^ A --> F , E BEFORE F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.14293006254414262
new rule added.
Best rule is: Not E ^ Not B ^ A --> F , Not E BEFORE F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.12320863954022472
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1169
Rule0: C --> F , C BEFORE F, weight=0.0728
Rule1: Not C --> F , Not C BEFORE F, weight=0.6222
Rule2: B --> F , B EQUAL F, weight=0.1111
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0703
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0678
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5659
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0176
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0605
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0212
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0518
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0235
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0166
Rule12: E ^ Not B ^ A --> F , E BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule13: Not E ^ Not B ^ A --> F , Not E BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 42.3813 sec.
[1 th iter] Elapsed: 40.8209 sec.
Run 470 batches
grad norm 0.08602409004748746 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.657672204150328
Params  [tensor([0.1154], dtype=torch.float64, requires_grad=True), tensor([0.0733], dtype=torch.float64, requires_grad=True), tensor([0.6181], dtype=torch.float64, requires_grad=True), tensor([0.1160], dtype=torch.float64, requires_grad=True), tensor([0.0639], dtype=torch.float64, requires_grad=True), tensor([0.0637], dtype=torch.float64, requires_grad=True), tensor([0.5649], dtype=torch.float64, requires_grad=True), tensor([0.0194], dtype=torch.float64, requires_grad=True), tensor([0.0520], dtype=torch.float64, requires_grad=True), tensor([0.0202], dtype=torch.float64, requires_grad=True), tensor([0.0522], dtype=torch.float64, requires_grad=True), tensor([0.0164], dtype=torch.float64, requires_grad=True), tensor([0.0143], dtype=torch.float64, requires_grad=True), tensor([0.0053], dtype=torch.float64, requires_grad=True), tensor([0.0034], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3868 min.
Update Log-likelihood (torch)=  -5.657672204150328
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1154,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0733.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6181.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1160.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0639.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0637.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5649.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0194.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0520.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0202.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0522.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0164.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0143.
Rule12: E ^ Not B ^ A --> F , E BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0053.
Rule13: Not E ^ Not B ^ A --> F , Not E BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0034.
delete these rules: [12, 13]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1154
Rule0: C --> F , C BEFORE F, weight=0.0733
Rule1: Not C --> F , Not C BEFORE F, weight=0.6181
Rule2: B --> F , B EQUAL F, weight=0.1160
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0639
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0637
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5649
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0194
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0520
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0202
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0522
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0164
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0143
[0 th iter] Elapsed: 33.1382 sec.
[1 th iter] Elapsed: 31.4773 sec.
Run 301 batches
grad norm 0.032563590619764986 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.500707739237211
Params  [tensor([0.1175], dtype=torch.float64, requires_grad=True), tensor([0.0726], dtype=torch.float64, requires_grad=True), tensor([0.6169], dtype=torch.float64, requires_grad=True), tensor([0.1198], dtype=torch.float64, requires_grad=True), tensor([0.0688], dtype=torch.float64, requires_grad=True), tensor([0.0682], dtype=torch.float64, requires_grad=True), tensor([0.5719], dtype=torch.float64, requires_grad=True), tensor([0.0192], dtype=torch.float64, requires_grad=True), tensor([0.0614], dtype=torch.float64, requires_grad=True), tensor([0.0320], dtype=torch.float64, requires_grad=True), tensor([0.0529], dtype=torch.float64, requires_grad=True), tensor([0.0229], dtype=torch.float64, requires_grad=True), tensor([0.0245], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.0770 min.
update Log-likelihood (torch)=  -5.500707739237211
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1175,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0726.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6169.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1198.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0688.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0682.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5719.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0192.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0614.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0320.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0529.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0229.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0245.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 27 candidate rules.
[multiprocess log-grad] Elapsed: 2.8455 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05995, std=2.01757, Rule = C ^ Not B ^ A --> F , C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05953, std=1.98368, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05064, std=1.09953, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04799, std=0.41831, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04472, std=2.28011, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04360, std=0.93528, Rule = C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04236, std=1.11520, Rule = D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04215, std=0.94141, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04172, std=1.14921, Rule = E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03640, std=1.14025, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03295, std=0.61734, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02822, std=0.69377, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02682, std=1.01214, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02613, std=1.31119, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02381, std=1.01059, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02348, std=0.48399, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02081, std=0.46195, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01957, std=1.21594, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01928, std=1.20682, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01819, std=1.30076, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01819, std=0.65072, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01797, std=0.47993, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01606, std=0.40205, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00939, std=0.56888, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00935, std=0.50700, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00665, std=0.48836, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00398, std=0.52374, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: C ^ Not B ^ A --> F , C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.059954230461840126
new rule added.
Best rule is: Not C ^ Not B ^ A --> F , Not C BEFORE F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.059527075438870855
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1175
Rule0: C --> F , C BEFORE F, weight=0.0726
Rule1: Not C --> F , Not C BEFORE F, weight=0.6169
Rule2: B --> F , B EQUAL F, weight=0.1198
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0688
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0682
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5719
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0192
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0614
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0320
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0529
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0229
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0245
Rule12: C ^ Not B ^ A --> F , C BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule13: Not C ^ Not B ^ A --> F , Not C BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 40.5585 sec.
[1 th iter] Elapsed: 47.4888 sec.
Run 327 batches
grad norm 0.06418268400990945 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.323274843438594
Params  [tensor([0.1145], dtype=torch.float64, requires_grad=True), tensor([0.0707], dtype=torch.float64, requires_grad=True), tensor([0.6241], dtype=torch.float64, requires_grad=True), tensor([0.1138], dtype=torch.float64, requires_grad=True), tensor([0.0662], dtype=torch.float64, requires_grad=True), tensor([0.0656], dtype=torch.float64, requires_grad=True), tensor([0.5751], dtype=torch.float64, requires_grad=True), tensor([0.0177], dtype=torch.float64, requires_grad=True), tensor([0.0514], dtype=torch.float64, requires_grad=True), tensor([0.0278], dtype=torch.float64, requires_grad=True), tensor([0.0476], dtype=torch.float64, requires_grad=True), tensor([0.0159], dtype=torch.float64, requires_grad=True), tensor([0.0226], dtype=torch.float64, requires_grad=True), tensor([0.0025], dtype=torch.float64, requires_grad=True), tensor([0.0044], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.4676 min.
Update Log-likelihood (torch)=  -5.323274843438594
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1145,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0707.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6241.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1138.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0662.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0656.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5751.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0177.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0514.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0278.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0476.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0159.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0226.
Rule12: C ^ Not B ^ A --> F , C BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0025.
Rule13: Not C ^ Not B ^ A --> F , Not C BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0044.
delete these rules: [12, 13]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1145
Rule0: C --> F , C BEFORE F, weight=0.0707
Rule1: Not C --> F , Not C BEFORE F, weight=0.6241
Rule2: B --> F , B EQUAL F, weight=0.1138
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0662
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0656
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5751
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0177
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0514
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0278
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0476
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0159
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0226
[0 th iter] Elapsed: 40.2984 sec.
[1 th iter] Elapsed: 40.6870 sec.
[2 th iter] Elapsed: 37.8782 sec.
Run 585 batches
grad norm 0.03273137779345935 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.167491768652506
Params  [tensor([0.1155], dtype=torch.float64, requires_grad=True), tensor([0.0671], dtype=torch.float64, requires_grad=True), tensor([0.6247], dtype=torch.float64, requires_grad=True), tensor([0.1150], dtype=torch.float64, requires_grad=True), tensor([0.0626], dtype=torch.float64, requires_grad=True), tensor([0.0707], dtype=torch.float64, requires_grad=True), tensor([0.5781], dtype=torch.float64, requires_grad=True), tensor([0.0184], dtype=torch.float64, requires_grad=True), tensor([0.0479], dtype=torch.float64, requires_grad=True), tensor([0.0374], dtype=torch.float64, requires_grad=True), tensor([0.0496], dtype=torch.float64, requires_grad=True), tensor([0.0161], dtype=torch.float64, requires_grad=True), tensor([0.0277], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.9812 min.
update Log-likelihood (torch)=  -5.167491768652506
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1155,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0671.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6247.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1150.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0626.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0707.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5781.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0184.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0479.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0374.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0496.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0161.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0277.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 24 candidate rules.
[multiprocess log-grad] Elapsed: 2.2770 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.09044, std=2.23933, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07237, std=1.08421, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06576, std=1.09785, Rule = D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06472, std=1.13355, Rule = E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06240, std=0.91721, Rule = C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05978, std=0.92569, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05899, std=1.12019, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05195, std=0.41377, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04901, std=1.29297, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04573, std=0.99289, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04320, std=1.19491, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04215, std=1.18123, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04168, std=0.99290, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03996, std=1.27668, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03744, std=0.61279, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03309, std=0.68954, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02898, std=0.47659, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02612, std=0.45671, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02368, std=0.64665, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02192, std=0.47520, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02075, std=0.39420, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01532, std=0.55337, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01496, std=0.50199, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01187, std=0.48132, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.09043925889735567
new rule added.
Best rule is: Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.07236789839949832
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1155
Rule0: C --> F , C BEFORE F, weight=0.0671
Rule1: Not C --> F , Not C BEFORE F, weight=0.6247
Rule2: B --> F , B EQUAL F, weight=0.1150
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0626
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0707
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5781
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0184
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0479
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0374
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0496
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0161
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0277
Rule12: Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule13: Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 51.7344 sec.
[1 th iter] Elapsed: 51.6876 sec.
Run 351 batches
grad norm 0.0788537140069913 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.283248160396698
Params  [tensor([0.1190], dtype=torch.float64, requires_grad=True), tensor([0.0637], dtype=torch.float64, requires_grad=True), tensor([0.6225], dtype=torch.float64, requires_grad=True), tensor([0.1098], dtype=torch.float64, requires_grad=True), tensor([0.0615], dtype=torch.float64, requires_grad=True), tensor([0.0707], dtype=torch.float64, requires_grad=True), tensor([0.5792], dtype=torch.float64, requires_grad=True), tensor([0.0216], dtype=torch.float64, requires_grad=True), tensor([0.0441], dtype=torch.float64, requires_grad=True), tensor([0.0407], dtype=torch.float64, requires_grad=True), tensor([0.0458], dtype=torch.float64, requires_grad=True), tensor([0.0160], dtype=torch.float64, requires_grad=True), tensor([0.0310], dtype=torch.float64, requires_grad=True), tensor([0.0041], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.7238 min.
Update Log-likelihood (torch)=  -5.283248160396698
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1190,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0637.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6225.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1098.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0615.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0707.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5792.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0216.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0441.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0407.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0458.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0160.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0310.
Rule12: Not D ^ Not B ^ A --> F , Not D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0041.
Rule13: Not E ^ Not B ^ A --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0003.
delete these rules: [12, 13]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1190
Rule0: C --> F , C BEFORE F, weight=0.0637
Rule1: Not C --> F , Not C BEFORE F, weight=0.6225
Rule2: B --> F , B EQUAL F, weight=0.1098
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0615
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0707
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5792
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0216
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0441
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0407
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0458
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0160
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0310
[0 th iter] Elapsed: 41.4517 sec.
[1 th iter] Elapsed: 38.4425 sec.
Run 351 batches
grad norm 0.03624600129529744 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.041064683363052
Params  [tensor([0.1126], dtype=torch.float64, requires_grad=True), tensor([0.0640], dtype=torch.float64, requires_grad=True), tensor([0.6255], dtype=torch.float64, requires_grad=True), tensor([0.1094], dtype=torch.float64, requires_grad=True), tensor([0.0583], dtype=torch.float64, requires_grad=True), tensor([0.0723], dtype=torch.float64, requires_grad=True), tensor([0.5814], dtype=torch.float64, requires_grad=True), tensor([0.0140], dtype=torch.float64, requires_grad=True), tensor([0.0485], dtype=torch.float64, requires_grad=True), tensor([0.0414], dtype=torch.float64, requires_grad=True), tensor([0.0428], dtype=torch.float64, requires_grad=True), tensor([0.0147], dtype=torch.float64, requires_grad=True), tensor([0.0365], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3317 min.
update Log-likelihood (torch)=  -5.041064683363052
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1126,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0640.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6255.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1094.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0583.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0723.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5814.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0140.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0485.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0414.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0428.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0147.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0365.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 22 candidate rules.
[multiprocess log-grad] Elapsed: 2.3504 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05912, std=0.91884, Rule = C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05848, std=1.10258, Rule = D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05765, std=1.14023, Rule = E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05653, std=0.92644, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05198, std=1.12586, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05189, std=0.41296, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04273, std=0.99428, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04186, std=1.30554, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03859, std=0.99635, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03648, std=1.20011, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03638, std=0.61447, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03574, std=1.18627, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03296, std=1.28968, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03189, std=0.68985, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02695, std=0.47876, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02453, std=0.45790, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02280, std=0.64655, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02144, std=0.48044, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02039, std=0.39454, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01337, std=0.55641, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01322, std=0.50438, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01022, std=0.48221, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.05911653818829854
new rule added.
Best rule is: D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.05848114646217974
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1126
Rule0: C --> F , C BEFORE F, weight=0.0640
Rule1: Not C --> F , Not C BEFORE F, weight=0.6255
Rule2: B --> F , B EQUAL F, weight=0.1094
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0583
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0723
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5814
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0140
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0485
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0414
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0428
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight=0.0147
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0365
Rule12: C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule13: D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 48.6287 sec.
[1 th iter] Elapsed: 52.5229 sec.
[2 th iter] Elapsed: 52.1593 sec.
Run 514 batches
grad norm 0.035461534825106 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.211092805026063
Params  [tensor([0.1165], dtype=torch.float64, requires_grad=True), tensor([0.0673], dtype=torch.float64, requires_grad=True), tensor([0.6284], dtype=torch.float64, requires_grad=True), tensor([0.1093], dtype=torch.float64, requires_grad=True), tensor([0.0600], dtype=torch.float64, requires_grad=True), tensor([0.0713], dtype=torch.float64, requires_grad=True), tensor([0.5829], dtype=torch.float64, requires_grad=True), tensor([0.0193], dtype=torch.float64, requires_grad=True), tensor([0.0396], dtype=torch.float64, requires_grad=True), tensor([0.0387], dtype=torch.float64, requires_grad=True), tensor([0.0416], dtype=torch.float64, requires_grad=True), tensor([0.0089], dtype=torch.float64, requires_grad=True), tensor([0.0303], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.5554 min.
Update Log-likelihood (torch)=  -5.211092805026063
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1163,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0669.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6277.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1086.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0600.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0720.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5839.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0184.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0401.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0394.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0426.
Rule10: Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0095.
Rule11: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0304.
Rule12: C ^ Not B ^ A --> F , C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0003.
Rule13: D ^ Not B ^ A --> F , D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0000.
delete these rules: [10, 12, 13]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1163
Rule0: C --> F , C BEFORE F, weight=0.0669
Rule1: Not C --> F , Not C BEFORE F, weight=0.6277
Rule2: B --> F , B EQUAL F, weight=0.1086
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0600
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0720
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5839
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0184
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0401
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0394
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0426
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0304
[0 th iter] Elapsed: 36.7558 sec.
[1 th iter] Elapsed: 36.9625 sec.
Run 301 batches
grad norm 0.07243258811411804 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.284527979450843
Params  [tensor([0.1166], dtype=torch.float64, requires_grad=True), tensor([0.0699], dtype=torch.float64, requires_grad=True), tensor([0.6271], dtype=torch.float64, requires_grad=True), tensor([0.1067], dtype=torch.float64, requires_grad=True), tensor([0.0569], dtype=torch.float64, requires_grad=True), tensor([0.0651], dtype=torch.float64, requires_grad=True), tensor([0.5925], dtype=torch.float64, requires_grad=True), tensor([0.0236], dtype=torch.float64, requires_grad=True), tensor([0.0373], dtype=torch.float64, requires_grad=True), tensor([0.0389], dtype=torch.float64, requires_grad=True), tensor([0.0398], dtype=torch.float64, requires_grad=True), tensor([0.0361], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.2287 min.
update Log-likelihood (torch)=  -5.284527979450843
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1166,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0699.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6271.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1067.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0569.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0651.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5925.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0236.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0373.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0389.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0398.
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0361.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 20 candidate rules.
[multiprocess log-grad] Elapsed: 2.3524 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.08256, std=1.12208, Rule = E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07287, std=0.91521, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07254, std=1.11072, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06704, std=1.26845, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05875, std=0.97795, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05833, std=1.24426, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05727, std=1.18245, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05655, std=1.16188, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05514, std=0.97653, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05400, std=0.41197, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03856, std=0.61191, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03571, std=0.68836, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03159, std=0.47408, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02873, std=0.45449, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02639, std=0.64483, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02469, std=0.38990, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02398, std=0.46641, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02121, std=0.53453, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01995, std=0.49414, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01477, std=0.47699, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.08256490298934882
new rule added.
Best rule is: Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.07286972983216247
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1166
Rule0: C --> F , C BEFORE F, weight=0.0699
Rule1: Not C --> F , Not C BEFORE F, weight=0.6271
Rule2: B --> F , B EQUAL F, weight=0.1067
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0569
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0651
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5925
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0236
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0373
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0389
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0398
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0361
Rule11: E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule12: Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 39.8011 sec.
[1 th iter] Elapsed: 47.6533 sec.
Run 447 batches
grad norm 0.029786393157579808 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -4.934218821906257
Params  [tensor([0.1159], dtype=torch.float64, requires_grad=True), tensor([0.0690], dtype=torch.float64, requires_grad=True), tensor([0.6261], dtype=torch.float64, requires_grad=True), tensor([0.1097], dtype=torch.float64, requires_grad=True), tensor([0.0609], dtype=torch.float64, requires_grad=True), tensor([0.0643], dtype=torch.float64, requires_grad=True), tensor([0.5959], dtype=torch.float64, requires_grad=True), tensor([0.0206], dtype=torch.float64, requires_grad=True), tensor([0.0390], dtype=torch.float64, requires_grad=True), tensor([0.0445], dtype=torch.float64, requires_grad=True), tensor([0.0416], dtype=torch.float64, requires_grad=True), tensor([0.0433], dtype=torch.float64, requires_grad=True), tensor([0.0016], dtype=torch.float64, requires_grad=True), tensor([0.0023], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.4577 min.
Update Log-likelihood (torch)=  -4.934218821906257
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1159,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0690.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6261.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1097.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0609.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0643.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5959.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0206.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0390.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0445.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0416.
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0433.
Rule11: E ^ Not B ^ A --> F , E BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0016.
Rule12: Not C ^ Not B ^ A --> F , Not C BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0023.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1159
Rule0: C --> F , C BEFORE F, weight=0.0690
Rule1: Not C --> F , Not C BEFORE F, weight=0.6261
Rule2: B --> F , B EQUAL F, weight=0.1097
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0609
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0643
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5959
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0206
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0390
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0445
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0416
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0433
[0 th iter] Elapsed: 33.8743 sec.
[1 th iter] Elapsed: 38.0173 sec.
[2 th iter] Elapsed: 37.1980 sec.
Run 717 batches
grad norm 0.0379361659007407 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.288063419519086
Params  [tensor([0.1195], dtype=torch.float64, requires_grad=True), tensor([0.0696], dtype=torch.float64, requires_grad=True), tensor([0.6272], dtype=torch.float64, requires_grad=True), tensor([0.1215], dtype=torch.float64, requires_grad=True), tensor([0.0579], dtype=torch.float64, requires_grad=True), tensor([0.0718], dtype=torch.float64, requires_grad=True), tensor([0.5947], dtype=torch.float64, requires_grad=True), tensor([0.0166], dtype=torch.float64, requires_grad=True), tensor([0.0361], dtype=torch.float64, requires_grad=True), tensor([0.0495], dtype=torch.float64, requires_grad=True), tensor([0.0318], dtype=torch.float64, requires_grad=True), tensor([0.0416], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.8183 min.
update Log-likelihood (torch)=  -5.288063419519086
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1195,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0696.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6272.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1215.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0579.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0718.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5947.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0166.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0361.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0495.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0318.
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0416.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 18 candidate rules.
[multiprocess log-grad] Elapsed: 2.5173 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05793, std=1.12419, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05128, std=0.41502, Rule = C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04659, std=1.31430, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04510, std=0.99399, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04163, std=1.19852, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04149, std=1.17911, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04144, std=0.99959, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03807, std=1.29119, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03576, std=0.61564, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03263, std=0.69145, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02805, std=0.47865, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02551, std=0.45831, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02358, std=0.64719, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02127, std=0.39400, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01997, std=0.48883, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01565, std=0.54577, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01446, std=0.50749, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01156, std=0.48116, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.057927895474005904
new rule added.
Best rule is: C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.051278512390501164
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1195
Rule0: C --> F , C BEFORE F, weight=0.0696
Rule1: Not C --> F , Not C BEFORE F, weight=0.6272
Rule2: B --> F , B EQUAL F, weight=0.1215
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0579
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0718
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5947
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0166
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0361
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0495
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0318
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0416
Rule11: Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule12: C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 42.0536 sec.
[1 th iter] Elapsed: 38.2714 sec.
Run 305 batches
grad norm 0.03763194023194145 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.636613192010565
Params  [tensor([0.1209], dtype=torch.float64, requires_grad=True), tensor([0.0724], dtype=torch.float64, requires_grad=True), tensor([0.6335], dtype=torch.float64, requires_grad=True), tensor([0.1210], dtype=torch.float64, requires_grad=True), tensor([0.0607], dtype=torch.float64, requires_grad=True), tensor([0.0725], dtype=torch.float64, requires_grad=True), tensor([0.5879], dtype=torch.float64, requires_grad=True), tensor([0.0178], dtype=torch.float64, requires_grad=True), tensor([0.0343], dtype=torch.float64, requires_grad=True), tensor([0.0478], dtype=torch.float64, requires_grad=True), tensor([0.0212], dtype=torch.float64, requires_grad=True), tensor([0.0439], dtype=torch.float64, requires_grad=True), tensor([-0.0007], dtype=torch.float64, requires_grad=True), tensor([9.9501e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3390 min.
Update Log-likelihood (torch)=  -5.636613192010565
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1209,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0724.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6335.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1210.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0607.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0725.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5879.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0178.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0343.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0478.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0212.
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0439.
Rule11: Not D ^ Not B ^ A --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0007.
Rule12: C ^ Not B ^ A --> F , C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0001.
delete these rules: [11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1209
Rule0: C --> F , C BEFORE F, weight=0.0724
Rule1: Not C --> F , Not C BEFORE F, weight=0.6335
Rule2: B --> F , B EQUAL F, weight=0.1210
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0607
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0725
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5879
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0178
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0343
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0478
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0212
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0439
[0 th iter] Elapsed: 31.1852 sec.
[1 th iter] Elapsed: 36.8955 sec.
Run 301 batches
grad norm 0.073007104691454 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.425159019801893
Params  [tensor([0.1147], dtype=torch.float64, requires_grad=True), tensor([0.0724], dtype=torch.float64, requires_grad=True), tensor([0.6368], dtype=torch.float64, requires_grad=True), tensor([0.1164], dtype=torch.float64, requires_grad=True), tensor([0.0642], dtype=torch.float64, requires_grad=True), tensor([0.0790], dtype=torch.float64, requires_grad=True), tensor([0.5878], dtype=torch.float64, requires_grad=True), tensor([0.0124], dtype=torch.float64, requires_grad=True), tensor([0.0374], dtype=torch.float64, requires_grad=True), tensor([0.0503], dtype=torch.float64, requires_grad=True), tensor([0.0144], dtype=torch.float64, requires_grad=True), tensor([0.0529], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.1348 min.
update Log-likelihood (torch)=  -5.425159019801893
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1147,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0724.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6368.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1164.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0642.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0790.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5878.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0124.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0374.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0503.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0144.
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0529.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 16 candidate rules.
[multiprocess log-grad] Elapsed: 1.6865 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03386, std=0.61684, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03081, std=1.00278, Rule = C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02876, std=0.69204, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02699, std=1.32643, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02681, std=1.00939, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02365, std=1.19057, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02334, std=1.20784, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02307, std=0.48268, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02156, std=0.46056, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01934, std=0.64855, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01888, std=1.30660, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01830, std=0.49178, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01626, std=0.39757, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00978, std=0.55503, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00930, std=0.51040, Rule = E ^ Not B ^ A --> F , E EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00682, std=0.48402, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.03386394463839998
new rule added.
Best rule is: C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.030806466092064284
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1147
Rule0: C --> F , C BEFORE F, weight=0.0724
Rule1: Not C --> F , Not C BEFORE F, weight=0.6368
Rule2: B --> F , B EQUAL F, weight=0.1164
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0642
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0790
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5878
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0124
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0374
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0503
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0144
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0529
Rule11: Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule12: C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 47.3471 sec.
[1 th iter] Elapsed: 47.7298 sec.
Run 303 batches
grad norm 0.028986096096838134 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.475514926009362
Params  [tensor([0.1103], dtype=torch.float64, requires_grad=True), tensor([0.0710], dtype=torch.float64, requires_grad=True), tensor([0.6349], dtype=torch.float64, requires_grad=True), tensor([0.1175], dtype=torch.float64, requires_grad=True), tensor([0.0656], dtype=torch.float64, requires_grad=True), tensor([0.0729], dtype=torch.float64, requires_grad=True), tensor([0.5892], dtype=torch.float64, requires_grad=True), tensor([0.0073], dtype=torch.float64, requires_grad=True), tensor([0.0366], dtype=torch.float64, requires_grad=True), tensor([0.0404], dtype=torch.float64, requires_grad=True), tensor([0.0078], dtype=torch.float64, requires_grad=True), tensor([0.0489], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([-7.4700e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.5848 min.
Update Log-likelihood (torch)=  -5.475514926009362
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1103,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0710.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6349.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1175.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0656.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0729.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5892.
Rule6: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0073.
Rule7: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0366.
Rule8: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0404.
Rule9: D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0078.
Rule10: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0489.
Rule11: Not C ^ Not B ^ A --> F , Not C EQUAL F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0002.
Rule12: C ^ Not B ^ A --> F , C BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0001.
delete these rules: [6, 9, 11, 12]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1103
Rule0: C --> F , C BEFORE F, weight=0.0710
Rule1: Not C --> F , Not C BEFORE F, weight=0.6349
Rule2: B --> F , B EQUAL F, weight=0.1175
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0656
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0729
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5892
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0366
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0404
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0489
[0 th iter] Elapsed: 34.0235 sec.
[1 th iter] Elapsed: 34.5619 sec.
[2 th iter] Elapsed: 36.2697 sec.
Run 518 batches
grad norm 0.04652022982872512 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.136095511739056
Params  [tensor([0.1142], dtype=torch.float64, requires_grad=True), tensor([0.0715], dtype=torch.float64, requires_grad=True), tensor([0.6360], dtype=torch.float64, requires_grad=True), tensor([0.1152], dtype=torch.float64, requires_grad=True), tensor([0.0657], dtype=torch.float64, requires_grad=True), tensor([0.0745], dtype=torch.float64, requires_grad=True), tensor([0.5981], dtype=torch.float64, requires_grad=True), tensor([0.0347], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True), tensor([0.0522], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.7481 min.
update Log-likelihood (torch)=  -5.136095511739056
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1140,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0720.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6363.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1150.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0658.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0750.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5982.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0350.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0515.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0527.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 11 workers, process 11 candidate rules.
[multiprocess log-grad] Elapsed: 1.9179 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.04840, std=1.18867, Rule = D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04775, std=1.31581, Rule = E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04767, std=1.17076, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04416, std=0.99951, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03874, std=1.29469, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03476, std=0.68734, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03018, std=0.47596, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02883, std=0.45377, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02411, std=0.64604, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02290, std=0.48966, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02099, std=0.39176, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.048400717467873895
new rule added.
Best rule is: E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.04774668243055247
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1140
Rule0: C --> F , C BEFORE F, weight=0.0720
Rule1: Not C --> F , Not C BEFORE F, weight=0.6363
Rule2: B --> F , B EQUAL F, weight=0.1150
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0658
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0750
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5982
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0350
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0515
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0527
Rule9: D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule10: E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 48.3864 sec.
[1 th iter] Elapsed: 49.6151 sec.
Run 475 batches
grad norm 0.043213241110243654 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.376085817938935
Params  [tensor([0.1142], dtype=torch.float64, requires_grad=True), tensor([0.0744], dtype=torch.float64, requires_grad=True), tensor([0.6403], dtype=torch.float64, requires_grad=True), tensor([0.1099], dtype=torch.float64, requires_grad=True), tensor([0.0675], dtype=torch.float64, requires_grad=True), tensor([0.0686], dtype=torch.float64, requires_grad=True), tensor([0.6037], dtype=torch.float64, requires_grad=True), tensor([0.0337], dtype=torch.float64, requires_grad=True), tensor([0.0470], dtype=torch.float64, requires_grad=True), tensor([0.0556], dtype=torch.float64, requires_grad=True), tensor([-0.0004], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.6336 min.
Update Log-likelihood (torch)=  -5.376085817938935
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1142,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0744.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6403.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1099.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0675.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0686.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6037.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0337.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0470.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0556.
Rule9: D ^ Not B ^ A --> F , D BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0004.
Rule10: E ^ Not B ^ A --> F , E BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0003.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1142
Rule0: C --> F , C BEFORE F, weight=0.0744
Rule1: Not C --> F , Not C BEFORE F, weight=0.6403
Rule2: B --> F , B EQUAL F, weight=0.1099
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0675
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0686
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6037
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0337
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0470
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0556
[0 th iter] Elapsed: 38.0109 sec.
[1 th iter] Elapsed: 38.1590 sec.
[2 th iter] Elapsed: 38.8095 sec.
Run 649 batches
grad norm 0.16808120801089804 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.311381810117266
Params  [tensor([0.1246], dtype=torch.float64, requires_grad=True), tensor([0.0750], dtype=torch.float64, requires_grad=True), tensor([0.6405], dtype=torch.float64, requires_grad=True), tensor([0.1067], dtype=torch.float64, requires_grad=True), tensor([0.0684], dtype=torch.float64, requires_grad=True), tensor([0.0696], dtype=torch.float64, requires_grad=True), tensor([0.6058], dtype=torch.float64, requires_grad=True), tensor([0.0289], dtype=torch.float64, requires_grad=True), tensor([0.0550], dtype=torch.float64, requires_grad=True), tensor([0.0566], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.9166 min.
update Log-likelihood (torch)=  -5.311381810117266
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1246,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0750.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6405.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1067.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0684.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0696.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6058.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0289.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0550.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0566.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 9 workers, process 9 candidate rules.
[multiprocess log-grad] Elapsed: 1.8132 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03349, std=1.19278, Rule = Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03152, std=0.69387, Rule = Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03096, std=1.02514, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02691, std=0.48274, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02510, std=0.46002, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02480, std=1.33006, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02087, std=0.65104, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01791, std=0.50786, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01757, std=0.39872, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.033490771327132234
new rule added.
Best rule is: Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.031516077149888196
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1246
Rule0: C --> F , C BEFORE F, weight=0.0750
Rule1: Not C --> F , Not C BEFORE F, weight=0.6405
Rule2: B --> F , B EQUAL F, weight=0.1067
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0684
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0696
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6058
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0289
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0550
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0566
Rule9: Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule10: Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 47.7260 sec.
[1 th iter] Elapsed: 47.7021 sec.
Run 308 batches
grad norm 0.07146679657027043 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.44056279023618
Params  [tensor([0.1186], dtype=torch.float64, requires_grad=True), tensor([0.0737], dtype=torch.float64, requires_grad=True), tensor([0.6349], dtype=torch.float64, requires_grad=True), tensor([0.1068], dtype=torch.float64, requires_grad=True), tensor([0.0678], dtype=torch.float64, requires_grad=True), tensor([0.0648], dtype=torch.float64, requires_grad=True), tensor([0.6087], dtype=torch.float64, requires_grad=True), tensor([0.0307], dtype=torch.float64, requires_grad=True), tensor([0.0543], dtype=torch.float64, requires_grad=True), tensor([0.0593], dtype=torch.float64, requires_grad=True), tensor([4.3905e-06], dtype=torch.float64, requires_grad=True), tensor([-2.9322e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.5907 min.
Update Log-likelihood (torch)=  -5.44056279023618
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1186,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0737.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6349.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1068.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0678.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0648.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6087.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0307.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0543.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0593.
Rule9: Not D ^ Not B ^ A --> F , Not D BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0000.
Rule10: Not D ^ Not B ^ A --> F , Not D EQUAL F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0000.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1186
Rule0: C --> F , C BEFORE F, weight=0.0737
Rule1: Not C --> F , Not C BEFORE F, weight=0.6349
Rule2: B --> F , B EQUAL F, weight=0.1068
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0678
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0648
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6087
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0307
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0543
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0593
[0 th iter] Elapsed: 42.2960 sec.
[1 th iter] Elapsed: 37.2705 sec.
Run 302 batches
grad norm 0.04510248573611487 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -4.906853061005874
Params  [tensor([0.1158], dtype=torch.float64, requires_grad=True), tensor([0.0720], dtype=torch.float64, requires_grad=True), tensor([0.6360], dtype=torch.float64, requires_grad=True), tensor([0.1001], dtype=torch.float64, requires_grad=True), tensor([0.0648], dtype=torch.float64, requires_grad=True), tensor([0.0632], dtype=torch.float64, requires_grad=True), tensor([0.6064], dtype=torch.float64, requires_grad=True), tensor([0.0330], dtype=torch.float64, requires_grad=True), tensor([0.0501], dtype=torch.float64, requires_grad=True), tensor([0.0662], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3262 min.
update Log-likelihood (torch)=  -4.906853061005874
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1158,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0720.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6360.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1001.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0648.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0632.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6064.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0330.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0501.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0662.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 7 workers, process 7 candidate rules.
[multiprocess log-grad] Elapsed: 1.7340 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03327, std=1.01050, Rule = Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02599, std=1.30785, Rule = Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02467, std=0.48456, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02328, std=0.46042, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02039, std=0.64925, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01978, std=0.49334, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01905, std=0.39710, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.03327479935400126
new rule added.
Best rule is: Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.025987239695254623
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1158
Rule0: C --> F , C BEFORE F, weight=0.0720
Rule1: Not C --> F , Not C BEFORE F, weight=0.6360
Rule2: B --> F , B EQUAL F, weight=0.1001
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0648
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0632
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6064
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0330
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0501
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0662
Rule9: Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule10: Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 53.5567 sec.
[1 th iter] Elapsed: 1.2478 min.
[2 th iter] Elapsed: 41.6297 sec.
Run 520 batches
grad norm 0.02072975082961347 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.239257806004774
Params  [tensor([0.1121], dtype=torch.float64, requires_grad=True), tensor([0.0763], dtype=torch.float64, requires_grad=True), tensor([0.6362], dtype=torch.float64, requires_grad=True), tensor([0.1037], dtype=torch.float64, requires_grad=True), tensor([0.0594], dtype=torch.float64, requires_grad=True), tensor([0.0600], dtype=torch.float64, requires_grad=True), tensor([0.6083], dtype=torch.float64, requires_grad=True), tensor([0.0300], dtype=torch.float64, requires_grad=True), tensor([0.0525], dtype=torch.float64, requires_grad=True), tensor([0.0635], dtype=torch.float64, requires_grad=True), tensor([-7.5992e-05], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.8344 min.
Update Log-likelihood (torch)=  -5.239257806004774
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1121,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0763.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6362.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1037.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0594.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0600.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6083.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0300.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0525.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0635.
Rule9: Not C ^ Not B ^ A --> F , Not C BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0001.
Rule10: Not E ^ Not B ^ A --> F , Not E BEFORE A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0002.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1121
Rule0: C --> F , C BEFORE F, weight=0.0763
Rule1: Not C --> F , Not C BEFORE F, weight=0.6362
Rule2: B --> F , B EQUAL F, weight=0.1037
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0594
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0600
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6083
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0300
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0525
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0635
[0 th iter] Elapsed: 29.0028 sec.
[1 th iter] Elapsed: 28.3767 sec.
Run 480 batches
grad norm 0.05471193324356152 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.208812116243384
Params  [tensor([0.1107], dtype=torch.float64, requires_grad=True), tensor([0.0718], dtype=torch.float64, requires_grad=True), tensor([0.6398], dtype=torch.float64, requires_grad=True), tensor([0.1127], dtype=torch.float64, requires_grad=True), tensor([0.0565], dtype=torch.float64, requires_grad=True), tensor([0.0641], dtype=torch.float64, requires_grad=True), tensor([0.6070], dtype=torch.float64, requires_grad=True), tensor([0.0276], dtype=torch.float64, requires_grad=True), tensor([0.0514], dtype=torch.float64, requires_grad=True), tensor([0.0606], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 57.3859 sec.
update Log-likelihood (torch)=  -5.208812116243384
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1107,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0718.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6398.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1127.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0565.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0641.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6070.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0276.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0514.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0606.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 5 workers, process 5 candidate rules.
[multiprocess log-grad] Elapsed: 1.0600 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03095, std=0.47462, Rule = D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02957, std=0.45288, Rule = D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02579, std=0.64410, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02444, std=0.48309, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02389, std=0.38802, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
Best rule is: D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.030947486184649025
new rule added.
Best rule is: D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F
Best log-likelihood-grad(all-data) = 0.02957396522816378
new rule added.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1107
Rule0: C --> F , C BEFORE F, weight=0.0718
Rule1: Not C --> F , Not C BEFORE F, weight=0.6398
Rule2: B --> F , B EQUAL F, weight=0.1127
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0565
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0641
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6070
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0276
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0514
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0606
Rule9: D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
Rule10: D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 39.7032 sec.
[1 th iter] Elapsed: 39.8942 sec.
Run 388 batches
grad norm 0.03388893833455755 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.030960192238384
Params  [tensor([0.1190], dtype=torch.float64, requires_grad=True), tensor([0.0762], dtype=torch.float64, requires_grad=True), tensor([0.6410], dtype=torch.float64, requires_grad=True), tensor([0.1232], dtype=torch.float64, requires_grad=True), tensor([0.0556], dtype=torch.float64, requires_grad=True), tensor([0.0648], dtype=torch.float64, requires_grad=True), tensor([0.6145], dtype=torch.float64, requires_grad=True), tensor([0.0277], dtype=torch.float64, requires_grad=True), tensor([0.0543], dtype=torch.float64, requires_grad=True), tensor([0.0637], dtype=torch.float64, requires_grad=True), tensor([0.0005], dtype=torch.float64, requires_grad=True), tensor([-7.0924e-05], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 1.3267 min.
Update Log-likelihood (torch)=  -5.030960192238384
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1190,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0762.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6410.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1232.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0556.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0648.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6145.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0277.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0543.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0637.
Rule9: D ^ Not B ^ A --> F , D EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0005.
Rule10: D ^ Not B ^ A --> F , D EQUAL A ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=-0.0001.
delete these rules: [9, 10]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1190
Rule0: C --> F , C BEFORE F, weight=0.0762
Rule1: Not C --> F , Not C BEFORE F, weight=0.6410
Rule2: B --> F , B EQUAL F, weight=0.1232
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0556
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0648
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6145
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0277
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0543
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0637
[0 th iter] Elapsed: 28.1939 sec.
[1 th iter] Elapsed: 28.0687 sec.
Run 301 batches
grad norm 0.046747506941106826 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.087111755358196
Params  [tensor([0.1241], dtype=torch.float64, requires_grad=True), tensor([0.0800], dtype=torch.float64, requires_grad=True), tensor([0.6430], dtype=torch.float64, requires_grad=True), tensor([0.1213], dtype=torch.float64, requires_grad=True), tensor([0.0521], dtype=torch.float64, requires_grad=True), tensor([0.0603], dtype=torch.float64, requires_grad=True), tensor([0.6148], dtype=torch.float64, requires_grad=True), tensor([0.0292], dtype=torch.float64, requires_grad=True), tensor([0.0522], dtype=torch.float64, requires_grad=True), tensor([0.0630], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 56.2690 sec.
update Log-likelihood (torch)=  -5.087111755358196
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1241,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0800.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.6430.
Rule2: B --> F , B EQUAL F, weight(torch)=0.1213.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0521.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0603.
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.6148.
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0292.
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0522.
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight(torch)=0.0630.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 3 workers, process 3 candidate rules.
[multiprocess log-grad] Elapsed: 1.0189 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01981, std=0.65053, Rule = Not E ^ Not B ^ A --> F , Not E EQUAL F ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01847, std=0.39752, Rule = Not C ^ Not B ^ A --> F , Not C EQUAL Not B ^ Not B BEFORE F ^ A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01754, std=0.50092, Rule = C ^ Not B ^ A --> F , C EQUAL A ^ Not B BEFORE F ^ A BEFORE F
-------------
best gain 0.019812314187987245 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
Train finished, rule set is:
Head = F, base = 0.1241
Rule0: C --> F , C BEFORE F, weight=0.0800
Rule1: Not C --> F , Not C BEFORE F, weight=0.6430
Rule2: B --> F , B EQUAL F, weight=0.1213
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0521
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0603
Rule5: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6148
Rule6: Not B ^ A --> F , Not B BEFORE F ^ A BEFORE F, weight=0.0292
Rule7: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0522
Rule8: D ^ Not B ^ A --> F , D BEFORE F ^ Not B BEFORE F ^ A BEFORE F, weight=0.0630
delete these rules: [0, 3, 4, 6, 7, 8]
start re-fit weights
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1241
Rule0: Not C --> F , Not C BEFORE F, weight=0.6430
Rule1: B --> F , B EQUAL F, weight=0.1213
Rule2: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.6148
[0 th iter] Elapsed: 9.7042 sec.
[1 th iter] Elapsed: 9.3695 sec.
Run 301 batches
grad norm 0.21856846131273608 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.215051766453823
Params  [tensor([0.1170], dtype=torch.float64, requires_grad=True), tensor([0.7211], dtype=torch.float64, requires_grad=True), tensor([0.1366], dtype=torch.float64, requires_grad=True), tensor([0.7007], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 19.0778 sec.
update Log-likelihood (torch)=  -5.215051766453823
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1170,
Rule0: Not C --> F , Not C BEFORE F, weight(torch)=0.7211.
Rule1: B --> F , B EQUAL F, weight(torch)=0.1366.
Rule2: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.7007.
---- start optimize_log_likelihood multi-process----
Rule set is:
Head = F, base = 0.1170
Rule0: Not C --> F , Not C BEFORE F, weight=0.7211
Rule1: B --> F , B EQUAL F, weight=0.1366
Rule2: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.7007
[0 th iter] Elapsed: 8.6969 sec.
[1 th iter] Elapsed: 8.4188 sec.
[2 th iter] Elapsed: 8.3884 sec.
3 th iter
grad norm=0.09407166597526799. num_batch_no_update =158
Head = F, base = 0.1172
Rule0: Not C --> F , Not C BEFORE F, weight=0.7643
Rule1: B --> F , B EQUAL F, weight=0.1421
Rule2: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.7479
[3 th iter] Elapsed: 8.4633 sec.
Run 892 batches
grad norm 0.08729489626093653 <= epsilon 0.003. OR, num_batch_no_update 300 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.3628553970871495
Params  [tensor([0.1096], dtype=torch.float64, requires_grad=True), tensor([0.7694], dtype=torch.float64, requires_grad=True), tensor([0.1404], dtype=torch.float64, requires_grad=True), tensor([0.7580], dtype=torch.float64, requires_grad=True)]
--------
----- exit search_algorithm -----
[search_algorithm] Elapsed: 12.3809 hour.
Finish time is 2021-03-02 11:02:18.855934
