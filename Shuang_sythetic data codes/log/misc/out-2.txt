Start time is 2021-03-01 16:36:16.611705
dataset path is  data-2.npy
dataset size is 1000
----- start search_algorithm -----
-----key model information----
num_formula=0
Time_tolerance=0.1
integral_resolution=0.1
decay_rate=1
batch_size=64
num_batch_check_for_feature=1
num_batch_check_for_gradient=20
num_batch_no_update_limit_opt=300
num_batch_no_update_limit_ucb=4
num_iter=5
epsilon=0.003
gain_threshold=0.02
low_grad_threshold=0.01
low_grad_tolerance=2
weight_threshold=0.01
strict_weight_threshold=0.1
learning_rate=0.005
max_rule_body_length=3
max_num_rule=30
batch_size_cp=1000
batch_size_grad=1000
batch_size_init_ucb=5
explore_rule_num_ucb=8
explore_batch_size_ucb=500
use_cp=False
worker_num=16
best_N=2
----
----- start initialize_rule_set -----
start enumerating candicate rules
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = -0.2000
Rule0: A --> F , A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 34.9770 sec.
[1 th iter] Elapsed: 23.3247 sec.
[2 th iter] Elapsed: 22.4126 sec.
3 th iter
grad norm=2.179641598311508. num_batch_no_update =0
Head = F, base = -0.2099
Rule0: A --> F , A BEFORE F, weight=0.2253
[3 th iter] Elapsed: 22.7997 sec.
[4 th iter] Elapsed: 25.2425 sec.
Run 75 batches
reach max iter num.
grad norm=1.8954641620269166. num_batch_no_update =0
Finish optimize_log_likelihood, the log likelihood is -8.203185062538866
Params  [tensor([-0.1310], dtype=torch.float64, requires_grad=True), tensor([0.3586], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 2.1466 min.
Current rule is: A --> F , A BEFORE F
log-likelihood is  -8.203185062538866
weight = 0.3171899914741516
base = -0.15290100872516632
----
NOTE: Random initialization for fast result.
------Select best rule-------
Best initial rule is: A --> F , A BEFORE F
Best log-likelihood = -8.203185062538866
NOTE: Random initialization for fast result.
----- exit initialize_rule_set -----
Initialize with this rule:
Head = F, base(torch) = -0.1529,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3172.
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 13.3048 sec.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 39 candidate rules.
[multiprocess log-grad] Elapsed: 1.4114 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 4.57366, std=1.77597, Rule = C --> F , C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 4.48865, std=1.71635, Rule = Not C --> F , Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.88705, std=1.78011, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.86493, std=1.82966, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.73368, std=1.73012, Rule = Not E --> F , Not E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.70794, std=1.74099, Rule = Not B --> F , Not B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.68656, std=1.84705, Rule = B --> F , B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.65928, std=1.70900, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 3.58711, std=1.54345, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.69602, std=0.75762, Rule = B --> F , B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.64071, std=0.71570, Rule = C --> F , C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.45585, std=0.74646, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.44197, std=0.67898, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.42921, std=0.72278, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.41871, std=0.73522, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.41751, std=0.69156, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.40678, std=0.74035, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.40147, std=0.67973, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.40143, std=0.70186, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.40143, std=0.70186, Rule = Not D --> Not F , Not D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.40147, std=0.67973, Rule = Not A --> Not F , Not A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.40678, std=0.74035, Rule = A --> Not F , A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.41751, std=0.69156, Rule = D --> Not F , D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.41871, std=0.73522, Rule = Not B --> Not F , Not B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.42921, std=0.72278, Rule = Not E --> Not F , Not E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.44197, std=0.67898, Rule = Not C --> Not F , Not C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.45585, std=0.74646, Rule = E --> Not F , E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.64071, std=0.71570, Rule = C --> Not F , C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.69602, std=0.75762, Rule = B --> Not F , B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -3.58711, std=1.54345, Rule = Not A --> Not F , Not A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.65928, std=1.70900, Rule = Not D --> Not F , Not D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.68656, std=1.84705, Rule = B --> Not F , B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.70794, std=1.74099, Rule = Not B --> Not F , Not B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.73368, std=1.73012, Rule = Not E --> Not F , Not E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.78981, std=1.63541, Rule = A --> Not F , A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.86493, std=1.82966, Rule = E --> Not F , E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -3.88705, std=1.78011, Rule = D --> Not F , D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -4.48865, std=1.71635, Rule = Not C --> Not F , Not C BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -4.57366, std=1.77597, Rule = C --> Not F , C BEFORE Not F
-------------
Best rule is: C --> F , C BEFORE F
Best log-likelihood-grad(all-data) = 4.573660658320851
new rule added.
Best rule is: Not C --> F , Not C BEFORE F
Best log-likelihood-grad(all-data) = 4.488654867881395
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = -0.1529
Rule0: A --> F , A BEFORE F, weight=0.3172
Rule1: C --> F , C BEFORE F, weight=0.0100
Rule2: Not C --> F , Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 58.1282 sec.
[1 th iter] Elapsed: 36.1386 sec.
[2 th iter] Elapsed: 34.3587 sec.
3 th iter
grad norm=1.0217305376529853. num_batch_no_update =0
Head = F, base = 0.0366
Rule0: A --> F , A BEFORE F, weight=0.5184
Rule1: C --> F , C BEFORE F, weight=0.2164
Rule2: Not C --> F , Not C BEFORE F, weight=0.2169
[3 th iter] Elapsed: 35.1800 sec.
[4 th iter] Elapsed: 36.3403 sec.
Run 75 batches
reach max iter num.
grad norm=0.5176367014018107. num_batch_no_update =3
Finish optimize_log_likelihood, the log likelihood is -5.877097886922628
Params  [tensor([0.1083], dtype=torch.float64, requires_grad=True), tensor([0.5919], dtype=torch.float64, requires_grad=True), tensor([0.3111], dtype=torch.float64, requires_grad=True), tensor([0.3150], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 3.3364 min.
Update Log-likelihood (torch)=  -5.877097886922628
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.0926,
Rule0: A --> F , A BEFORE F, weight(torch)=0.5743.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2847.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2872.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 23.0552 sec.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 37 candidate rules.
[multiprocess log-grad] Elapsed: 1.3244 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.91754, std=2.09547, Rule = Not B --> F , Not B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.89847, std=2.08277, Rule = Not E --> F , Not E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.88126, std=2.20115, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.84227, std=2.10437, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.83555, std=2.21556, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.72128, std=2.26941, Rule = B --> F , B BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.67156, std=2.12266, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.36502, std=0.76075, Rule = B --> F , B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.30215, std=0.71915, Rule = C --> F , C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.10878, std=0.69602, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.09222, std=0.78424, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.08289, std=0.76170, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.08171, std=0.76117, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06711, std=0.77688, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06522, std=0.73686, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06134, std=0.73080, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03922, std=0.71007, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03922, std=0.71007, Rule = Not A --> Not F , Not A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.06134, std=0.73080, Rule = D --> Not F , D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.06522, std=0.73686, Rule = Not D --> Not F , Not D EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.06711, std=0.77688, Rule = A --> Not F , A EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.08171, std=0.76117, Rule = Not E --> Not F , Not E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.08289, std=0.76170, Rule = Not B --> Not F , Not B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.09222, std=0.78424, Rule = E --> Not F , E EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.10878, std=0.69602, Rule = Not C --> Not F , Not C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.30215, std=0.71915, Rule = C --> Not F , C EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.36502, std=0.76075, Rule = B --> Not F , B EQUAL Not F
-------------
log-likelihood-grad(all-data) mean= -0.55499, std=2.32061, Rule = A --> Not F , A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.67156, std=2.12266, Rule = Not A --> Not F , Not A BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.72128, std=2.26941, Rule = B --> Not F , B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.83555, std=2.21556, Rule = E --> Not F , E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.84227, std=2.10437, Rule = Not D --> Not F , Not D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.88126, std=2.20115, Rule = D --> Not F , D BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.89847, std=2.08277, Rule = Not E --> Not F , Not E BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -0.91754, std=2.09547, Rule = Not B --> Not F , Not B BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -1.32711, std=1.73359, Rule = C --> Not F , C BEFORE Not F
-------------
log-likelihood-grad(all-data) mean= -1.43983, std=1.58824, Rule = Not C --> Not F , Not C BEFORE Not F
-------------
Best rule is: Not B --> F , Not B BEFORE F
Best log-likelihood-grad(all-data) = 0.9175385906587578
new rule added.
Best rule is: Not E --> F , Not E BEFORE F
Best log-likelihood-grad(all-data) = 0.8984709303829027
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.0926
Rule0: A --> F , A BEFORE F, weight=0.5743
Rule1: C --> F , C BEFORE F, weight=0.2847
Rule2: Not C --> F , Not C BEFORE F, weight=0.2872
Rule3: Not B --> F , Not B BEFORE F, weight=0.0100
Rule4: Not E --> F , Not E BEFORE F, weight=0.0100
[0 th iter] Elapsed: 1.2280 min.
[1 th iter] Elapsed: 50.2063 sec.
[2 th iter] Elapsed: 49.1933 sec.
3 th iter
grad norm=0.08807257111990749. num_batch_no_update =2
Head = F, base = 0.1261
Rule0: A --> F , A BEFORE F, weight=0.4762
Rule1: C --> F , C BEFORE F, weight=0.4303
Rule2: Not C --> F , Not C BEFORE F, weight=0.4572
Rule3: Not B --> F , Not B BEFORE F, weight=0.0277
Rule4: Not E --> F , Not E BEFORE F, weight=0.0156
[3 th iter] Elapsed: 45.5270 sec.
[4 th iter] Elapsed: 44.8985 sec.
Run 75 batches
reach max iter num.
grad norm=0.05024174365888632. num_batch_no_update =5
Finish optimize_log_likelihood, the log likelihood is -5.588807203616114
Params  [tensor([0.1328], dtype=torch.float64, requires_grad=True), tensor([0.4182], dtype=torch.float64, requires_grad=True), tensor([0.4685], dtype=torch.float64, requires_grad=True), tensor([0.5304], dtype=torch.float64, requires_grad=True), tensor([0.0109], dtype=torch.float64, requires_grad=True), tensor([-0.0136], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 4.3927 min.
Update Log-likelihood (torch)=  -5.588807203616114
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1359,
Rule0: A --> F , A BEFORE F, weight(torch)=0.4369.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4615.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5108.
Rule3: Not B --> F , Not B BEFORE F, weight(torch)=0.0202.
Rule4: Not E --> F , Not E BEFORE F, weight(torch)=-0.0038.
delete these rules: [4]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1359
Rule0: A --> F , A BEFORE F, weight=0.4369
Rule1: C --> F , C BEFORE F, weight=0.4615
Rule2: Not C --> F , Not C BEFORE F, weight=0.5108
Rule3: Not B --> F , Not B BEFORE F, weight=0.0202
[0 th iter] Elapsed: 41.8771 sec.
[1 th iter] Elapsed: 40.9759 sec.
[2 th iter] Elapsed: 40.2201 sec.
3 th iter
grad norm=0.04401667691884601. num_batch_no_update =44
Head = F, base = 0.1273
Rule0: A --> F , A BEFORE F, weight=0.3738
Rule1: C --> F , C BEFORE F, weight=0.4656
Rule2: Not C --> F , Not C BEFORE F, weight=0.6247
Rule3: Not B --> F , Not B BEFORE F, weight=-0.0021
[3 th iter] Elapsed: 40.0741 sec.
[4 th iter] Elapsed: 40.1499 sec.
Run 75 batches
reach max iter num.
grad norm=0.026895853152830274. num_batch_no_update =74
Finish optimize_log_likelihood, the log likelihood is -5.526928945685391
Params  [tensor([0.1304], dtype=torch.float64, requires_grad=True), tensor([0.3673], dtype=torch.float64, requires_grad=True), tensor([0.4477], dtype=torch.float64, requires_grad=True), tensor([0.6514], dtype=torch.float64, requires_grad=True), tensor([-0.0005], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 3.3893 min.
update Log-likelihood (torch)=  -5.526928945685391
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1255,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3588.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4461.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.6384.
Rule3: Not B --> F , Not B BEFORE F, weight(torch)=-0.0061.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 26.7655 sec.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 15 candidate rules.
[multiprocess log-grad] Elapsed: 36.3536 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.26839, std=0.76643, Rule = B --> F , B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.18822, std=0.73651, Rule = C --> F , C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.07194, std=2.16939, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01889, std=0.71470, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01876, std=0.80287, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.02346, std=0.77843, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.02529, std=0.78801, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03672, std=0.72731, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.04152, std=0.76669, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.05119, std=0.76117, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.05177, std=2.29857, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.05283, std=2.39723, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.06992, std=0.79920, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.12178, std=2.45304, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.20400, std=2.53206, Rule = B --> F , B BEFORE F
-------------
Best rule is: B --> F , B EQUAL F
Best log-likelihood-grad(all-data) = 0.26839339701236964
new rule added.
Best rule is: C --> F , C EQUAL F
Best log-likelihood-grad(all-data) = 0.18822013410136373
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1255
Rule0: A --> F , A BEFORE F, weight=0.3588
Rule1: C --> F , C BEFORE F, weight=0.4461
Rule2: Not C --> F , Not C BEFORE F, weight=0.6384
Rule3: Not B --> F , Not B BEFORE F, weight=-0.0061
Rule4: B --> F , B EQUAL F, weight=0.0100
Rule5: C --> F , C EQUAL F, weight=0.0100
[0 th iter] Elapsed: 1.2072 min.
[1 th iter] Elapsed: 51.8503 sec.
[2 th iter] Elapsed: 50.4082 sec.
3 th iter
grad norm=0.029560495966280107. num_batch_no_update =24
Head = F, base = 0.1269
Rule0: A --> F , A BEFORE F, weight=0.3473
Rule1: C --> F , C BEFORE F, weight=0.4183
Rule2: Not C --> F , Not C BEFORE F, weight=0.6397
Rule3: Not B --> F , Not B BEFORE F, weight=-0.0259
Rule4: B --> F , B EQUAL F, weight=0.1865
Rule5: C --> F , C EQUAL F, weight=0.1704
[3 th iter] Elapsed: 50.2963 sec.
[4 th iter] Elapsed: 50.7738 sec.
Run 75 batches
reach max iter num.
grad norm=0.027595767396007918. num_batch_no_update =54
Finish optimize_log_likelihood, the log likelihood is -5.5226595076265275
Params  [tensor([0.1235], dtype=torch.float64, requires_grad=True), tensor([0.3491], dtype=torch.float64, requires_grad=True), tensor([0.4144], dtype=torch.float64, requires_grad=True), tensor([0.6515], dtype=torch.float64, requires_grad=True), tensor([-0.0193], dtype=torch.float64, requires_grad=True), tensor([0.2787], dtype=torch.float64, requires_grad=True), tensor([0.2306], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 4.5967 min.
Update Log-likelihood (torch)=  -5.5226595076265275
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1227,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3546.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4205.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.6525.
Rule3: Not B --> F , Not B BEFORE F, weight(torch)=-0.0171.
Rule4: B --> F , B EQUAL F, weight(torch)=0.2545.
Rule5: C --> F , C EQUAL F, weight(torch)=0.2143.
delete these rules: [3]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1227
Rule0: A --> F , A BEFORE F, weight=0.3546
Rule1: C --> F , C BEFORE F, weight=0.4205
Rule2: Not C --> F , Not C BEFORE F, weight=0.6525
Rule3: B --> F , B EQUAL F, weight=0.2545
Rule4: C --> F , C EQUAL F, weight=0.2143
[0 th iter] Elapsed: 46.1468 sec.
[1 th iter] Elapsed: 45.7870 sec.
[2 th iter] Elapsed: 46.5283 sec.
3 th iter
grad norm=0.011182866189362737. num_batch_no_update =22
Head = F, base = 0.1222
Rule0: A --> F , A BEFORE F, weight=0.3357
Rule1: C --> F , C BEFORE F, weight=0.4083
Rule2: Not C --> F , Not C BEFORE F, weight=0.6445
Rule3: B --> F , B EQUAL F, weight=0.3511
Rule4: C --> F , C EQUAL F, weight=0.2476
[3 th iter] Elapsed: 45.0194 sec.
[4 th iter] Elapsed: 46.6450 sec.
Run 75 batches
reach max iter num.
grad norm=0.009853984932381528. num_batch_no_update =20
Finish optimize_log_likelihood, the log likelihood is -5.464679401727738
Params  [tensor([0.1160], dtype=torch.float64, requires_grad=True), tensor([0.3296], dtype=torch.float64, requires_grad=True), tensor([0.4047], dtype=torch.float64, requires_grad=True), tensor([0.6502], dtype=torch.float64, requires_grad=True), tensor([0.3818], dtype=torch.float64, requires_grad=True), tensor([0.2491], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 3.8364 min.
update Log-likelihood (torch)=  -5.464679401727738
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1187,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3289.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4038.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.6486.
Rule3: B --> F , B EQUAL F, weight(torch)=0.3695.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2539.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
----- start generate_rule_via_column_generation -----
start calculate intensity log and integral.
[calculate intensity log and integral] Elapsed: 32.2750 sec.
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 13 candidate rules.
[multiprocess log-grad] Elapsed: 34.0435 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03771, std=2.16067, Rule = Not A --> F , Not A BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00028, std=0.71157, Rule = Not C --> F , Not C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03404, std=0.80206, Rule = E --> F , E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.03880, std=0.78767, Rule = Not E --> F , Not E EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.04173, std=0.72310, Rule = Not A --> F , Not A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.05114, std=0.76646, Rule = Not D --> F , Not D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.05408, std=0.78124, Rule = Not B --> F , Not B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.06603, std=0.76540, Rule = D --> F , D EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.08771, std=0.80140, Rule = A --> F , A EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.11548, std=2.30230, Rule = Not D --> F , Not D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.13240, std=2.39831, Rule = D --> F , D BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.20901, std=2.46569, Rule = E --> F , E BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.25491, std=2.53247, Rule = B --> F , B BEFORE F
-------------
Best rule is: Not A --> F , Not A BEFORE F
Best log-likelihood-grad(all-data) = 0.037705565436023034
new rule added.
best gain 0.0002838221772076768 does not meet thershold 0.02.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1187
Rule0: A --> F , A BEFORE F, weight=0.3289
Rule1: C --> F , C BEFORE F, weight=0.4038
Rule2: Not C --> F , Not C BEFORE F, weight=0.6486
Rule3: B --> F , B EQUAL F, weight=0.3695
Rule4: C --> F , C EQUAL F, weight=0.2539
Rule5: Not A --> F , Not A BEFORE F, weight=0.0100
[0 th iter] Elapsed: 1.1290 min.
[1 th iter] Elapsed: 50.8315 sec.
[2 th iter] Elapsed: 49.8171 sec.
3 th iter
grad norm=0.015473308159159645. num_batch_no_update =44
Head = F, base = 0.1193
Rule0: A --> F , A BEFORE F, weight=0.3177
Rule1: C --> F , C BEFORE F, weight=0.3930
Rule2: Not C --> F , Not C BEFORE F, weight=0.6498
Rule3: B --> F , B EQUAL F, weight=0.3851
Rule4: C --> F , C EQUAL F, weight=0.2522
Rule5: Not A --> F , Not A BEFORE F, weight=0.0129
[3 th iter] Elapsed: 51.3545 sec.
[4 th iter] Elapsed: 51.0775 sec.
Run 75 batches
reach max iter num.
grad norm=0.01232015015032967. num_batch_no_update =74
Finish optimize_log_likelihood, the log likelihood is -5.4301344017495
Params  [tensor([0.1193], dtype=torch.float64, requires_grad=True), tensor([0.3220], dtype=torch.float64, requires_grad=True), tensor([0.3953], dtype=torch.float64, requires_grad=True), tensor([0.6583], dtype=torch.float64, requires_grad=True), tensor([0.3911], dtype=torch.float64, requires_grad=True), tensor([0.2487], dtype=torch.float64, requires_grad=True), tensor([0.0182], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 4.5144 min.
Update Log-likelihood (torch)=  -5.4301344017495
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1215,
Rule0: A --> F , A BEFORE F, weight(torch)=0.3234.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3989.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.6580.
Rule3: B --> F , B EQUAL F, weight(torch)=0.3901.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2526.
Rule5: Not A --> F , Not A BEFORE F, weight(torch)=0.0210.
----- exit select_and_add_new_rule -----
----- exit generate_rule_via_column_generation -----
start to extend this rule: Not C --> F , Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 32 candidate rules.
[multiprocess log-grad] Elapsed: 1.3911 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.29331, std=1.65450, Rule = A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.20160, std=1.68309, Rule = Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09979, std=0.61910, Rule = B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09366, std=0.85930, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09356, std=0.89094, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08569, std=1.98909, Rule = Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07328, std=1.92524, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05902, std=1.87371, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05601, std=2.02749, Rule = E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04343, std=2.04391, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03411, std=0.43209, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02921, std=1.03664, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02656, std=0.44642, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02298, std=0.43297, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02156, std=0.98562, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02048, std=0.61488, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01928, std=1.01956, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01851, std=1.03967, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01566, std=0.48021, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01411, std=0.58392, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00851, std=1.09282, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00776, std=1.11769, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00565, std=0.46059, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00056, std=0.49168, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01148, std=0.49022, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01150, std=0.59076, Rule = D ^ Not C --> F , D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01627, std=0.49551, Rule = B ^ Not C --> F , B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02418, std=0.64407, Rule = Not D ^ Not C --> F , Not D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02510, std=0.63675, Rule = Not E ^ Not C --> F , Not E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02986, std=0.62655, Rule = Not B ^ Not C --> F , Not B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03068, std=0.61221, Rule = A ^ Not C --> F , A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04671, std=2.09644, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
Best rule is: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.29331344815066285
new rule added.
Best rule is: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.20160489530881512
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1215
Rule0: A --> F , A BEFORE F, weight=0.3234
Rule1: C --> F , C BEFORE F, weight=0.3989
Rule2: Not C --> F , Not C BEFORE F, weight=0.6580
Rule3: B --> F , B EQUAL F, weight=0.3901
Rule4: C --> F , C EQUAL F, weight=0.2526
Rule5: Not A --> F , Not A BEFORE F, weight=0.0210
Rule6: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule7: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 1.6148 min.
[1 th iter] Elapsed: 1.0792 min.
[2 th iter] Elapsed: 1.0324 min.
3 th iter
grad norm=0.0253405099832495. num_batch_no_update =43
Head = F, base = 0.1263
Rule0: A --> F , A BEFORE F, weight=0.2819
Rule1: C --> F , C BEFORE F, weight=0.3629
Rule2: Not C --> F , Not C BEFORE F, weight=0.5939
Rule3: B --> F , B EQUAL F, weight=0.3841
Rule4: C --> F , C EQUAL F, weight=0.2345
Rule5: Not A --> F , Not A BEFORE F, weight=-0.0253
Rule6: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1353
Rule7: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.1047
[3 th iter] Elapsed: 1.0945 min.
[4 th iter] Elapsed: 1.1122 min.
Run 75 batches
reach max iter num.
grad norm=0.02231648846676282. num_batch_no_update =73
Finish optimize_log_likelihood, the log likelihood is -5.382991189191378
Params  [tensor([0.1259], dtype=torch.float64, requires_grad=True), tensor([0.2597], dtype=torch.float64, requires_grad=True), tensor([0.3744], dtype=torch.float64, requires_grad=True), tensor([0.5485], dtype=torch.float64, requires_grad=True), tensor([0.4159], dtype=torch.float64, requires_grad=True), tensor([0.2363], dtype=torch.float64, requires_grad=True), tensor([-0.0412], dtype=torch.float64, requires_grad=True), tensor([0.2006], dtype=torch.float64, requires_grad=True), tensor([0.1325], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 5.9344 min.
Update Log-likelihood (torch)=  -5.382991189191378
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1279,
Rule0: A --> F , A BEFORE F, weight(torch)=0.2689.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3722.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.5640.
Rule3: B --> F , B EQUAL F, weight(torch)=0.4086.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2386.
Rule5: Not A --> F , Not A BEFORE F, weight(torch)=-0.0375.
Rule6: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1839.
Rule7: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1259.
delete these rules: [5]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1279
Rule0: A --> F , A BEFORE F, weight=0.2689
Rule1: C --> F , C BEFORE F, weight=0.3722
Rule2: Not C --> F , Not C BEFORE F, weight=0.5640
Rule3: B --> F , B EQUAL F, weight=0.4086
Rule4: C --> F , C EQUAL F, weight=0.2386
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1839
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.1259
[0 th iter] Elapsed: 57.1734 sec.
[1 th iter] Elapsed: 56.8372 sec.
[2 th iter] Elapsed: 56.8239 sec.
3 th iter
grad norm=0.019690097677743164. num_batch_no_update =13
Head = F, base = 0.1235
Rule0: A --> F , A BEFORE F, weight=0.2064
Rule1: C --> F , C BEFORE F, weight=0.3778
Rule2: Not C --> F , Not C BEFORE F, weight=0.4931
Rule3: B --> F , B EQUAL F, weight=0.4166
Rule4: C --> F , C EQUAL F, weight=0.2455
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2583
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.1159
[3 th iter] Elapsed: 1.3441 min.
[4 th iter] Elapsed: 1.8488 min.
Run 75 batches
reach max iter num.
grad norm=0.018388182082350955. num_batch_no_update =6
Finish optimize_log_likelihood, the log likelihood is -5.3517671515533305
Params  [tensor([0.1288], dtype=torch.float64, requires_grad=True), tensor([0.1881], dtype=torch.float64, requires_grad=True), tensor([0.4006], dtype=torch.float64, requires_grad=True), tensor([0.4559], dtype=torch.float64, requires_grad=True), tensor([0.4271], dtype=torch.float64, requires_grad=True), tensor([0.2481], dtype=torch.float64, requires_grad=True), tensor([0.3133], dtype=torch.float64, requires_grad=True), tensor([0.1145], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 6.0418 min.
update Log-likelihood (torch)=  -5.3517671515533305
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1252,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1994.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4003.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.4712.
Rule3: B --> F , B EQUAL F, weight(torch)=0.4215.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2475.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3014.
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1195.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 2.4309 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.09258, std=0.61788, Rule = B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02593, std=0.43239, Rule = Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01716, std=2.01483, Rule = Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00967, std=0.63345, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00606, std=0.47544, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00446, std=0.59362, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00212, std=1.98640, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00029, std=0.46292, Rule = D ^ Not C --> F , D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00483, std=2.04665, Rule = E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00770, std=0.48959, Rule = E ^ Not C --> F , E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01311, std=0.58961, Rule = D ^ Not C --> F , D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01800, std=0.49416, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01833, std=1.93073, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01954, std=0.48520, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02269, std=0.49793, Rule = Not B ^ Not C --> F , Not B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02476, std=0.50415, Rule = B ^ Not C --> F , B EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02735, std=0.97636, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02865, std=2.07914, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02900, std=1.07655, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02951, std=1.01236, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03188, std=0.66434, Rule = Not D ^ Not C --> F , Not D EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03402, std=0.62434, Rule = A ^ Not C --> F , A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03433, std=0.65083, Rule = Not E ^ Not C --> F , Not E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03743, std=0.64587, Rule = Not B ^ Not C --> F , Not B EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03768, std=1.06962, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03816, std=1.02149, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03837, std=1.05929, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04512, std=1.13155, Rule = B ^ Not C --> F , B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04531, std=1.13912, Rule = E ^ Not C --> F , E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.10923, std=2.13773, Rule = B ^ Not C --> F , B BEFORE F ^ Not C BEFORE F
-------------
Best rule is: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.09258466344187977
new rule added.
Best rule is: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.025929606324638116
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1252
Rule0: A --> F , A BEFORE F, weight=0.1994
Rule1: C --> F , C BEFORE F, weight=0.4003
Rule2: Not C --> F , Not C BEFORE F, weight=0.4712
Rule3: B --> F , B EQUAL F, weight=0.4215
Rule4: C --> F , C EQUAL F, weight=0.2475
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3014
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.1195
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0100
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 2.9126 min.
[1 th iter] Elapsed: 2.0706 min.
[2 th iter] Elapsed: 2.0097 min.
3 th iter
grad norm=0.011988202316370745. num_batch_no_update =34
Head = F, base = 0.1328
Rule0: A --> F , A BEFORE F, weight=0.1706
Rule1: C --> F , C BEFORE F, weight=0.4302
Rule2: Not C --> F , Not C BEFORE F, weight=0.4067
Rule3: B --> F , B EQUAL F, weight=0.4008
Rule4: C --> F , C EQUAL F, weight=0.2631
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3601
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.1086
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1404
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0725
[3 th iter] Elapsed: 2.0216 min.
[4 th iter] Elapsed: 1.9895 min.
Run 75 batches
reach max iter num.
grad norm=0.012845204852762505. num_batch_no_update =20
Finish optimize_log_likelihood, the log likelihood is -5.338615732266166
Params  [tensor([0.1233], dtype=torch.float64, requires_grad=True), tensor([0.1592], dtype=torch.float64, requires_grad=True), tensor([0.4391], dtype=torch.float64, requires_grad=True), tensor([0.3676], dtype=torch.float64, requires_grad=True), tensor([0.3681], dtype=torch.float64, requires_grad=True), tensor([0.2626], dtype=torch.float64, requires_grad=True), tensor([0.3976], dtype=torch.float64, requires_grad=True), tensor([0.0991], dtype=torch.float64, requires_grad=True), tensor([0.2100], dtype=torch.float64, requires_grad=True), tensor([0.0789], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 11.0065 min.
Update Log-likelihood (torch)=  -5.338615732266166
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1222,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1635.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4336.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3766.
Rule3: B --> F , B EQUAL F, weight(torch)=0.3735.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2610.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3868.
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1017.
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.1836.
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0689.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 16 candidate rules.
[multiprocess log-grad] Elapsed: 1.4570 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.09633, std=1.96764, Rule = Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07711, std=2.00082, Rule = E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07521, std=1.95600, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05011, std=1.90258, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04199, std=2.05500, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01933, std=0.62926, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01552, std=0.46587, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01020, std=0.58970, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00708, std=1.05895, Rule = D ^ Not C --> F , D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00010, std=0.96573, Rule = Not A ^ Not C --> F , Not A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00035, std=1.00029, Rule = Not D ^ Not C --> F , Not D BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00149, std=1.04915, Rule = Not E ^ Not C --> F , Not E BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00339, std=1.00422, Rule = A ^ Not C --> F , A BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00427, std=1.04798, Rule = Not B ^ Not C --> F , Not B BEFORE Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01178, std=0.48068, Rule = Not A ^ Not C --> F , Not A EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01492, std=0.49257, Rule = A ^ Not C --> F , A EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.09632714439616447
new rule added.
Best rule is: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.07710822745010742
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1222
Rule0: A --> F , A BEFORE F, weight=0.1635
Rule1: C --> F , C BEFORE F, weight=0.4336
Rule2: Not C --> F , Not C BEFORE F, weight=0.3766
Rule3: B --> F , B EQUAL F, weight=0.3735
Rule4: C --> F , C EQUAL F, weight=0.2610
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3868
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.1017
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1836
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0689
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 3.4539 min.
[1 th iter] Elapsed: 2.3121 min.
[2 th iter] Elapsed: 2.3635 min.
3 th iter
grad norm=0.008254501941567686. num_batch_no_update =44
Head = F, base = 0.1356
Rule0: A --> F , A BEFORE F, weight=0.1513
Rule1: C --> F , C BEFORE F, weight=0.4435
Rule2: Not C --> F , Not C BEFORE F, weight=0.3436
Rule3: B --> F , B EQUAL F, weight=0.3214
Rule4: C --> F , C EQUAL F, weight=0.2722
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.4135
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0879
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.2810
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0920
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0294
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0186
[3 th iter] Elapsed: 2.3561 min.
[4 th iter] Elapsed: 2.4964 min.
Run 75 batches
reach max iter num.
grad norm=0.009282847709577387. num_batch_no_update =74
Finish optimize_log_likelihood, the log likelihood is -5.327056515986165
Params  [tensor([0.1315], dtype=torch.float64, requires_grad=True), tensor([0.1483], dtype=torch.float64, requires_grad=True), tensor([0.4580], dtype=torch.float64, requires_grad=True), tensor([0.3176], dtype=torch.float64, requires_grad=True), tensor([0.2957], dtype=torch.float64, requires_grad=True), tensor([0.2746], dtype=torch.float64, requires_grad=True), tensor([0.4311], dtype=torch.float64, requires_grad=True), tensor([0.0778], dtype=torch.float64, requires_grad=True), tensor([0.3230], dtype=torch.float64, requires_grad=True), tensor([0.0991], dtype=torch.float64, requires_grad=True), tensor([0.0332], dtype=torch.float64, requires_grad=True), tensor([0.0192], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 12.9829 min.
Update Log-likelihood (torch)=  -5.327056515986165
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1258,
Rule0: A --> F , A BEFORE F, weight(torch)=0.1480.
Rule1: C --> F , C BEFORE F, weight(torch)=0.4536.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3262.
Rule3: B --> F , B EQUAL F, weight(torch)=0.3048.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2793.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.4245.
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0786.
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.3094.
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0971.
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0323.
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0201.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 6 candidate rules.
[multiprocess log-grad] Elapsed: 30.4702 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01127, std=0.63514, Rule = E ^ Not C --> F , E EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00117, std=0.59638, Rule = Not A ^ Not C --> F , Not A EQUAL F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00086, std=2.00484, Rule = D ^ Not C --> F , D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00169, std=0.49313, Rule = Not E ^ Not C --> F , Not E EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02202, std=1.95147, Rule = Not D ^ Not C --> F , Not D BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03093, std=2.11821, Rule = Not B ^ Not C --> F , Not B BEFORE F ^ Not C BEFORE F
-------------
best gain 0.011265933800321136 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: C --> F , C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 32 candidate rules.
[multiprocess log-grad] Elapsed: 1.4730 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.24457, std=1.89769, Rule = A ^ C --> F , A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.14706, std=1.85355, Rule = Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10452, std=0.99421, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.10009, std=0.92674, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08912, std=2.06265, Rule = D ^ C --> F , D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08267, std=2.03513, Rule = Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07546, std=2.02665, Rule = Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07307, std=1.97982, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06865, std=0.74047, Rule = B ^ C --> F , B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06111, std=1.05082, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05739, std=0.43975, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05483, std=0.99511, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04327, std=0.41984, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04296, std=1.02305, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03379, std=2.10623, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03197, std=0.66607, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02735, std=1.06945, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02543, std=1.04548, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01783, std=0.48643, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01622, std=0.51366, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01609, std=1.08517, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01403, std=0.48197, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01387, std=0.62033, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01070, std=0.51300, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00750, std=0.48456, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00071, std=0.48006, Rule = Not E ^ C --> F , Not E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00574, std=0.64530, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01223, std=0.59423, Rule = D ^ C --> F , D EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01422, std=2.11489, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02316, std=0.65563, Rule = A ^ C --> F , A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02463, std=0.67131, Rule = Not D ^ C --> F , Not D EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03051, std=0.65537, Rule = Not B ^ C --> F , Not B EQUAL F ^ C BEFORE F
-------------
Best rule is: A ^ C --> F , A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.24456636499791154
new rule added.
Best rule is: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.14705836221555796
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1258
Rule0: A --> F , A BEFORE F, weight=0.1480
Rule1: C --> F , C BEFORE F, weight=0.4536
Rule2: Not C --> F , Not C BEFORE F, weight=0.3262
Rule3: B --> F , B EQUAL F, weight=0.3048
Rule4: C --> F , C EQUAL F, weight=0.2793
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.4245
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0786
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.3094
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0971
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0323
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0201
Rule11: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.0100
Rule12: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 2.0985 min.
[1 th iter] Elapsed: 1.5156 min.
[2 th iter] Elapsed: 1.4811 min.
3 th iter
grad norm=0.014406761210801271. num_batch_no_update =41
Head = F, base = 0.1376
Rule0: A --> F , A BEFORE F, weight=0.0929
Rule1: C --> F , C BEFORE F, weight=0.4158
Rule2: Not C --> F , Not C BEFORE F, weight=0.2703
Rule3: B --> F , B EQUAL F, weight=0.2646
Rule4: C --> F , C EQUAL F, weight=0.2932
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.4118
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0276
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.3859
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0944
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0391
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0139
Rule11: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1460
Rule12: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0840
[3 th iter] Elapsed: 1.4773 min.
[4 th iter] Elapsed: 1.4816 min.
Run 75 batches
reach max iter num.
grad norm=0.02102897221764085. num_batch_no_update =24
Finish optimize_log_likelihood, the log likelihood is -5.320991202485144
Params  [tensor([0.1326], dtype=torch.float64, requires_grad=True), tensor([0.0722], dtype=torch.float64, requires_grad=True), tensor([0.3928], dtype=torch.float64, requires_grad=True), tensor([0.2631], dtype=torch.float64, requires_grad=True), tensor([0.2435], dtype=torch.float64, requires_grad=True), tensor([0.3267], dtype=torch.float64, requires_grad=True), tensor([0.4132], dtype=torch.float64, requires_grad=True), tensor([0.0146], dtype=torch.float64, requires_grad=True), tensor([0.4249], dtype=torch.float64, requires_grad=True), tensor([0.1256], dtype=torch.float64, requires_grad=True), tensor([0.0581], dtype=torch.float64, requires_grad=True), tensor([0.0300], dtype=torch.float64, requires_grad=True), tensor([0.2048], dtype=torch.float64, requires_grad=True), tensor([0.1104], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 8.0550 min.
Update Log-likelihood (torch)=  -5.320991202485144
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1308,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0680.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3909.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2556.
Rule3: B --> F , B EQUAL F, weight(torch)=0.2458.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3094.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.4040.
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0110.
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.4085.
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1152.
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0442.
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0157.
Rule11: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.1796.
Rule12: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0963.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 1.7815 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.19081, std=2.04227, Rule = D ^ C --> F , D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17445, std=1.99931, Rule = Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.17368, std=1.98508, Rule = Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.16764, std=1.97242, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.13588, std=2.07319, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.09259, std=2.06780, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08943, std=1.02611, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08563, std=0.95752, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08238, std=1.04456, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.08005, std=0.73667, Rule = B ^ C --> F , B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.07408, std=0.98907, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05981, std=1.01632, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04988, std=1.06150, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04526, std=0.46264, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04323, std=0.66988, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04291, std=1.04219, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03714, std=1.07856, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03311, std=0.42493, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02599, std=0.47493, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02589, std=0.50552, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02394, std=0.61999, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01828, std=0.51283, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01801, std=0.49470, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01751, std=0.47779, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00817, std=0.63811, Rule = Not E ^ C --> F , Not E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00678, std=0.47482, Rule = Not E ^ C --> F , Not E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00132, std=0.59047, Rule = D ^ C --> F , D EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00694, std=0.65396, Rule = A ^ C --> F , A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01320, std=0.67614, Rule = Not D ^ C --> F , Not D EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01714, std=0.65247, Rule = Not B ^ C --> F , Not B EQUAL F ^ C BEFORE F
-------------
Best rule is: D ^ C --> F , D BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.19080526153122315
new rule added.
Best rule is: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.17444630544295953
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1308
Rule0: A --> F , A BEFORE F, weight=0.0680
Rule1: C --> F , C BEFORE F, weight=0.3909
Rule2: Not C --> F , Not C BEFORE F, weight=0.2556
Rule3: B --> F , B EQUAL F, weight=0.2458
Rule4: C --> F , C EQUAL F, weight=0.3094
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.4040
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0110
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4085
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1152
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0442
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0157
Rule11: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.1796
Rule12: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0963
Rule13: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0100
Rule14: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 2.3263 min.
[1 th iter] Elapsed: 1.7227 min.
[2 th iter] Elapsed: 1.7168 min.
3 th iter
grad norm=0.010529168871074374. num_batch_no_update =44
Head = F, base = 0.1306
Rule0: A --> F , A BEFORE F, weight=0.0580
Rule1: C --> F , C BEFORE F, weight=0.3560
Rule2: Not C --> F , Not C BEFORE F, weight=0.2448
Rule3: B --> F , B EQUAL F, weight=0.2250
Rule4: C --> F , C EQUAL F, weight=0.3347
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.4026
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight=0.0004
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4441
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1248
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0534
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0216
Rule11: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2303
Rule12: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.1071
Rule13: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0311
Rule14: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0123
[3 th iter] Elapsed: 1.6969 min.
[4 th iter] Elapsed: 1.6562 min.
Run 75 batches
reach max iter num.
grad norm=0.01188751426437464. num_batch_no_update =74
Finish optimize_log_likelihood, the log likelihood is -5.24665193172549
Params  [tensor([0.1293], dtype=torch.float64, requires_grad=True), tensor([0.0521], dtype=torch.float64, requires_grad=True), tensor([0.3274], dtype=torch.float64, requires_grad=True), tensor([0.2438], dtype=torch.float64, requires_grad=True), tensor([0.2204], dtype=torch.float64, requires_grad=True), tensor([0.3334], dtype=torch.float64, requires_grad=True), tensor([0.4073], dtype=torch.float64, requires_grad=True), tensor([0.0029], dtype=torch.float64, requires_grad=True), tensor([0.4727], dtype=torch.float64, requires_grad=True), tensor([0.1309], dtype=torch.float64, requires_grad=True), tensor([0.0669], dtype=torch.float64, requires_grad=True), tensor([0.0296], dtype=torch.float64, requires_grad=True), tensor([0.2676], dtype=torch.float64, requires_grad=True), tensor([0.1108], dtype=torch.float64, requires_grad=True), tensor([0.0366], dtype=torch.float64, requires_grad=True), tensor([0.0136], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 9.1197 min.
Update Log-likelihood (torch)=  -5.24665193172549
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1255,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0508.
Rule1: C --> F , C BEFORE F, weight(torch)=0.3343.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2400.
Rule3: B --> F , B EQUAL F, weight(torch)=0.2217.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3314.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.4019.
Rule6: Not A ^ Not C --> F , Not A BEFORE F ^ Not C BEFORE F, weight(torch)=-0.0025.
Rule7: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.4646.
Rule8: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1265.
Rule9: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0588.
Rule10: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0230.
Rule11: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.2536.
Rule12: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.1071.
Rule13: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0363.
Rule14: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight(torch)=0.0108.
delete these rules: [6]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1255
Rule0: A --> F , A BEFORE F, weight=0.0508
Rule1: C --> F , C BEFORE F, weight=0.3343
Rule2: Not C --> F , Not C BEFORE F, weight=0.2400
Rule3: B --> F , B EQUAL F, weight=0.2217
Rule4: C --> F , C EQUAL F, weight=0.3314
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.4019
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4646
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1265
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0588
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0230
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.2536
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.1071
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0363
Rule13: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0108
[0 th iter] Elapsed: 1.5887 min.
[1 th iter] Elapsed: 1.5864 min.
[2 th iter] Elapsed: 1.6013 min.
3 th iter
grad norm=0.006732704974989108. num_batch_no_update =41
Head = F, base = 0.1259
Rule0: A --> F , A BEFORE F, weight=0.0305
Rule1: C --> F , C BEFORE F, weight=0.2971
Rule2: Not C --> F , Not C BEFORE F, weight=0.2396
Rule3: B --> F , B EQUAL F, weight=0.2077
Rule4: C --> F , C EQUAL F, weight=0.3472
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3917
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4892
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1348
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0666
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0326
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3026
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.1027
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0428
Rule13: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0121
[3 th iter] Elapsed: 1.5899 min.
[4 th iter] Elapsed: 1.5765 min.
Run 75 batches
reach max iter num.
grad norm=0.005392482522478926. num_batch_no_update =71
Finish optimize_log_likelihood, the log likelihood is -5.267181337927513
Params  [tensor([0.1303], dtype=torch.float64, requires_grad=True), tensor([0.0206], dtype=torch.float64, requires_grad=True), tensor([0.2746], dtype=torch.float64, requires_grad=True), tensor([0.2418], dtype=torch.float64, requires_grad=True), tensor([0.2083], dtype=torch.float64, requires_grad=True), tensor([0.3537], dtype=torch.float64, requires_grad=True), tensor([0.3777], dtype=torch.float64, requires_grad=True), tensor([0.5087], dtype=torch.float64, requires_grad=True), tensor([0.1411], dtype=torch.float64, requires_grad=True), tensor([0.0710], dtype=torch.float64, requires_grad=True), tensor([0.0387], dtype=torch.float64, requires_grad=True), tensor([0.3322], dtype=torch.float64, requires_grad=True), tensor([0.1008], dtype=torch.float64, requires_grad=True), tensor([0.0472], dtype=torch.float64, requires_grad=True), tensor([0.0149], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 7.9442 min.
update Log-likelihood (torch)=  -5.267181337927513
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1337,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0225.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2801.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2413.
Rule3: B --> F , B EQUAL F, weight(torch)=0.2085.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3523.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3816.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.5059.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1386.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0700.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0372.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3227.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0994.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0441.
Rule13: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight(torch)=0.0131.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 22 candidate rules.
[multiprocess log-grad] Elapsed: 1.3015 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.10155, std=2.04950, Rule = Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06197, std=0.76574, Rule = B ^ C --> F , B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.06111, std=2.10022, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03480, std=0.68659, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03094, std=1.03974, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02997, std=1.11071, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02975, std=2.12677, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02832, std=1.09857, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02523, std=0.50899, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02290, std=1.03900, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01901, std=0.44115, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01885, std=2.21181, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01819, std=0.48736, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01370, std=0.48447, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01340, std=0.63240, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01285, std=0.52925, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00843, std=1.10656, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00255, std=0.53680, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00196, std=0.54744, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00138, std=1.08877, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00070, std=1.08962, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02073, std=1.15550, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
Best rule is: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.10154794638018481
new rule added.
Best rule is: B ^ C --> F , B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.06197416317854575
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1337
Rule0: A --> F , A BEFORE F, weight=0.0225
Rule1: C --> F , C BEFORE F, weight=0.2801
Rule2: Not C --> F , Not C BEFORE F, weight=0.2413
Rule3: B --> F , B EQUAL F, weight=0.2085
Rule4: C --> F , C EQUAL F, weight=0.3523
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3816
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.5059
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1386
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0700
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0372
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3227
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0994
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0441
Rule13: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0131
Rule14: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0100
Rule15: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 2.3308 min.
[1 th iter] Elapsed: 1.7516 min.
[2 th iter] Elapsed: 1.7686 min.
3 th iter
grad norm=0.005684552518542605. num_batch_no_update =35
Head = F, base = 0.1298
Rule0: A --> F , A BEFORE F, weight=0.0319
Rule1: C --> F , C BEFORE F, weight=0.2538
Rule2: Not C --> F , Not C BEFORE F, weight=0.2552
Rule3: B --> F , B EQUAL F, weight=0.1862
Rule4: C --> F , C EQUAL F, weight=0.3570
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3657
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4876
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1313
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0749
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0418
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3544
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0935
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0535
Rule13: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight=0.0067
Rule14: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0345
Rule15: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0846
[3 th iter] Elapsed: 1.7562 min.
[4 th iter] Elapsed: 1.8016 min.
Run 75 batches
reach max iter num.
grad norm=0.010491154318873673. num_batch_no_update =20
Finish optimize_log_likelihood, the log likelihood is -5.284934603490625
Params  [tensor([0.1329], dtype=torch.float64, requires_grad=True), tensor([0.0193], dtype=torch.float64, requires_grad=True), tensor([0.2305], dtype=torch.float64, requires_grad=True), tensor([0.2529], dtype=torch.float64, requires_grad=True), tensor([0.1615], dtype=torch.float64, requires_grad=True), tensor([0.3558], dtype=torch.float64, requires_grad=True), tensor([0.3530], dtype=torch.float64, requires_grad=True), tensor([0.4721], dtype=torch.float64, requires_grad=True), tensor([0.1322], dtype=torch.float64, requires_grad=True), tensor([0.0740], dtype=torch.float64, requires_grad=True), tensor([0.0367], dtype=torch.float64, requires_grad=True), tensor([0.3687], dtype=torch.float64, requires_grad=True), tensor([0.0866], dtype=torch.float64, requires_grad=True), tensor([0.0515], dtype=torch.float64, requires_grad=True), tensor([-0.0002], dtype=torch.float64, requires_grad=True), tensor([0.0301], dtype=torch.float64, requires_grad=True), tensor([0.1173], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 9.4096 min.
Update Log-likelihood (torch)=  -5.284934603490625
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1316,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0265.
Rule1: C --> F , C BEFORE F, weight(torch)=0.2391.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2543.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1677.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3540.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3603.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.4750.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1335.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0756.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0384.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.3672.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0914.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0509.
Rule13: Not E ^ C --> F , Not E BEFORE F ^ C BEFORE F, weight(torch)=0.0033.
Rule14: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0328.
Rule15: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.1046.
delete these rules: [13]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1316
Rule0: A --> F , A BEFORE F, weight=0.0265
Rule1: C --> F , C BEFORE F, weight=0.2391
Rule2: Not C --> F , Not C BEFORE F, weight=0.2543
Rule3: B --> F , B EQUAL F, weight=0.1677
Rule4: C --> F , C EQUAL F, weight=0.3540
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3603
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4750
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1335
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0756
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0384
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3672
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0914
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0509
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0328
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.1046
[0 th iter] Elapsed: 1.7519 min.
[1 th iter] Elapsed: 1.7064 min.
[2 th iter] Elapsed: 1.7071 min.
3 th iter
grad norm=0.0070728271987557205. num_batch_no_update =11
Head = F, base = 0.1354
Rule0: A --> F , A BEFORE F, weight=0.0174
Rule1: C --> F , C BEFORE F, weight=0.2030
Rule2: Not C --> F , Not C BEFORE F, weight=0.2575
Rule3: B --> F , B EQUAL F, weight=0.1384
Rule4: C --> F , C EQUAL F, weight=0.3572
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3416
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4543
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1415
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0795
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0368
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.3940
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0834
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0464
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0429
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.1564
[3 th iter] Elapsed: 1.6795 min.
[4 th iter] Elapsed: 1.6618 min.
Run 75 batches
reach max iter num.
grad norm=0.01068079593029889. num_batch_no_update =8
Finish optimize_log_likelihood, the log likelihood is -5.217807528933093
Params  [tensor([0.1340], dtype=torch.float64, requires_grad=True), tensor([0.0217], dtype=torch.float64, requires_grad=True), tensor([0.1951], dtype=torch.float64, requires_grad=True), tensor([0.2667], dtype=torch.float64, requires_grad=True), tensor([0.1301], dtype=torch.float64, requires_grad=True), tensor([0.3615], dtype=torch.float64, requires_grad=True), tensor([0.3322], dtype=torch.float64, requires_grad=True), tensor([0.4562], dtype=torch.float64, requires_grad=True), tensor([0.1587], dtype=torch.float64, requires_grad=True), tensor([0.0806], dtype=torch.float64, requires_grad=True), tensor([0.0385], dtype=torch.float64, requires_grad=True), tensor([0.4177], dtype=torch.float64, requires_grad=True), tensor([0.0818], dtype=torch.float64, requires_grad=True), tensor([0.0580], dtype=torch.float64, requires_grad=True), tensor([0.0473], dtype=torch.float64, requires_grad=True), tensor([0.1927], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 8.5081 min.
update Log-likelihood (torch)=  -5.217807528933093
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1339,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0172.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1983.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2633.
Rule3: B --> F , B EQUAL F, weight(torch)=0.1368.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3610.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3316.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.4610.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1550.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0794.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0377.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4073.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0774.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0553.
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0466.
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.1860.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 20 candidate rules.
[multiprocess log-grad] Elapsed: 1.1743 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05323, std=2.11800, Rule = Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03711, std=0.68611, Rule = E ^ C --> F , E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02580, std=1.04733, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02295, std=2.23264, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02274, std=1.12253, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02142, std=1.11109, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02137, std=0.51705, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01863, std=0.44577, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01678, std=1.04833, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01501, std=0.53291, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00933, std=0.64393, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00826, std=0.50746, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00735, std=2.15751, Rule = B ^ C --> F , B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00694, std=0.49851, Rule = B ^ C --> F , B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00123, std=0.55034, Rule = D ^ C --> F , D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00070, std=0.54100, Rule = Not D ^ C --> F , Not D EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00251, std=1.10360, Rule = Not E ^ C --> F , Not E BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00577, std=1.12878, Rule = B ^ C --> F , B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01764, std=1.11521, Rule = Not B ^ C --> F , Not B BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02330, std=1.17204, Rule = E ^ C --> F , E BEFORE C ^ C BEFORE F
-------------
Best rule is: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.05322903934606038
new rule added.
Best rule is: E ^ C --> F , E EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.037105801769934145
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1339
Rule0: A --> F , A BEFORE F, weight=0.0172
Rule1: C --> F , C BEFORE F, weight=0.1983
Rule2: Not C --> F , Not C BEFORE F, weight=0.2633
Rule3: B --> F , B EQUAL F, weight=0.1368
Rule4: C --> F , C EQUAL F, weight=0.3610
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3316
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4610
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1550
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0794
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0377
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4073
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0774
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0553
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0466
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.1860
Rule15: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F, weight=0.0100
Rule16: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 2.4407 min.
[1 th iter] Elapsed: 1.8565 min.
[2 th iter] Elapsed: 1.8762 min.
3 th iter
grad norm=0.011350110797924171. num_batch_no_update =36
Head = F, base = 0.1325
Rule0: A --> F , A BEFORE F, weight=0.0197
Rule1: C --> F , C BEFORE F, weight=0.1799
Rule2: Not C --> F , Not C BEFORE F, weight=0.2698
Rule3: B --> F , B EQUAL F, weight=0.1053
Rule4: C --> F , C EQUAL F, weight=0.3655
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3238
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4455
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1492
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0813
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0420
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4329
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0822
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0470
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0478
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2458
Rule15: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F, weight=0.0023
Rule16: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0309
[3 th iter] Elapsed: 1.9022 min.
[4 th iter] Elapsed: 1.8944 min.
Run 75 batches
reach max iter num.
grad norm=0.00515426942130533. num_batch_no_update =66
Finish optimize_log_likelihood, the log likelihood is -5.243454388191741
Params  [tensor([0.1383], dtype=torch.float64, requires_grad=True), tensor([0.0116], dtype=torch.float64, requires_grad=True), tensor([0.1663], dtype=torch.float64, requires_grad=True), tensor([0.2782], dtype=torch.float64, requires_grad=True), tensor([0.0840], dtype=torch.float64, requires_grad=True), tensor([0.3642], dtype=torch.float64, requires_grad=True), tensor([0.3116], dtype=torch.float64, requires_grad=True), tensor([0.4216], dtype=torch.float64, requires_grad=True), tensor([0.1646], dtype=torch.float64, requires_grad=True), tensor([0.0833], dtype=torch.float64, requires_grad=True), tensor([0.0476], dtype=torch.float64, requires_grad=True), tensor([0.4404], dtype=torch.float64, requires_grad=True), tensor([0.0746], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.0376], dtype=torch.float64, requires_grad=True), tensor([0.2551], dtype=torch.float64, requires_grad=True), tensor([0.0020], dtype=torch.float64, requires_grad=True), tensor([0.0427], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 9.9710 min.
Update Log-likelihood (torch)=  -5.243454388191741
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1368,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0167.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1713.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2768.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0858.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3627.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.3174.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.4245.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1625.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0835.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0470.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4411.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0791.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0492.
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0426.
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2474.
Rule15: Not D ^ C --> F , Not D BEFORE F ^ C BEFORE F, weight(torch)=0.0038.
Rule16: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0436.
delete these rules: [15]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1368
Rule0: A --> F , A BEFORE F, weight=0.0167
Rule1: C --> F , C BEFORE F, weight=0.1713
Rule2: Not C --> F , Not C BEFORE F, weight=0.2768
Rule3: B --> F , B EQUAL F, weight=0.0858
Rule4: C --> F , C EQUAL F, weight=0.3627
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.3174
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4245
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1625
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0835
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0470
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4411
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0791
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0492
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0426
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2474
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0436
[0 th iter] Elapsed: 1.7437 min.
[1 th iter] Elapsed: 1.7269 min.
[2 th iter] Elapsed: 1.8711 min.
3 th iter
grad norm=0.006116316827756389. num_batch_no_update =4
Head = F, base = 0.1293
Rule0: A --> F , A BEFORE F, weight=0.0165
Rule1: C --> F , C BEFORE F, weight=0.1541
Rule2: Not C --> F , Not C BEFORE F, weight=0.2833
Rule3: B --> F , B EQUAL F, weight=0.0778
Rule4: C --> F , C EQUAL F, weight=0.3673
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2971
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4144
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1714
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0827
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0432
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4614
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0681
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0589
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0446
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2836
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0410
[3 th iter] Elapsed: 1.7552 min.
[4 th iter] Elapsed: 1.7986 min.
Run 75 batches
reach max iter num.
grad norm=0.012728337950158935. num_batch_no_update =34
Finish optimize_log_likelihood, the log likelihood is -5.231199756975129
Params  [tensor([0.1356], dtype=torch.float64, requires_grad=True), tensor([0.0156], dtype=torch.float64, requires_grad=True), tensor([0.1399], dtype=torch.float64, requires_grad=True), tensor([0.2904], dtype=torch.float64, requires_grad=True), tensor([0.0668], dtype=torch.float64, requires_grad=True), tensor([0.3636], dtype=torch.float64, requires_grad=True), tensor([0.2922], dtype=torch.float64, requires_grad=True), tensor([0.3953], dtype=torch.float64, requires_grad=True), tensor([0.1559], dtype=torch.float64, requires_grad=True), tensor([0.0779], dtype=torch.float64, requires_grad=True), tensor([0.0370], dtype=torch.float64, requires_grad=True), tensor([0.4723], dtype=torch.float64, requires_grad=True), tensor([0.0729], dtype=torch.float64, requires_grad=True), tensor([0.0560], dtype=torch.float64, requires_grad=True), tensor([0.0432], dtype=torch.float64, requires_grad=True), tensor([0.2926], dtype=torch.float64, requires_grad=True), tensor([0.0416], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 8.8965 min.
update Log-likelihood (torch)=  -5.231199756975129
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1360,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0200.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1489.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.2931.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0734.
Rule4: C --> F , C EQUAL F, weight(torch)=0.3688.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2983.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.4020.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1626.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0843.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0436.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4723.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0757.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0595.
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0480.
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2911.
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0430.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 10 candidate rules.
[multiprocess log-grad] Elapsed: 40.6602 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.00630, std=0.46136, Rule = Not A ^ C --> F , Not A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00429, std=0.55287, Rule = A ^ C --> F , A EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00335, std=0.54964, Rule = E ^ C --> F , E EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00088, std=0.52045, Rule = Not B ^ C --> F , Not B EQUAL C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00201, std=0.65760, Rule = Not A ^ C --> F , Not A EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01702, std=1.10679, Rule = Not A ^ C --> F , Not A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01997, std=1.15011, Rule = D ^ C --> F , D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02144, std=1.08511, Rule = Not D ^ C --> F , Not D BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02552, std=1.18276, Rule = A ^ C --> F , A BEFORE C ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.06605, std=2.32644, Rule = E ^ C --> F , E BEFORE F ^ C BEFORE F
-------------
best gain 0.006297272337459357 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: C --> F , C EQUAL F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 32 candidate rules.
[multiprocess log-grad] Elapsed: 1.5218 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.11994, std=0.70718, Rule = D ^ C --> F , D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.11174, std=0.65749, Rule = D ^ C --> F , D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.09306, std=0.66688, Rule = Not D ^ C --> F , Not D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.08448, std=0.62863, Rule = Not D ^ C --> F , Not D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05578, std=0.69256, Rule = B ^ C --> F , B BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05528, std=0.67919, Rule = Not B ^ C --> F , Not B BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.05257, std=0.65341, Rule = B ^ C --> F , B BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04970, std=0.63563, Rule = Not A ^ C --> F , Not A BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04748, std=0.64159, Rule = Not B ^ C --> F , Not B BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04602, std=0.66010, Rule = Not E ^ C --> F , Not E BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04409, std=0.62721, Rule = Not E ^ C --> F , Not E BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.04162, std=0.64913, Rule = A ^ C --> F , A BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03996, std=0.59280, Rule = Not A ^ C --> F , Not A BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03495, std=0.59222, Rule = A ^ C --> F , A BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.03041, std=0.69297, Rule = E ^ C --> F , E BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02662, std=0.72748, Rule = E ^ C --> F , E BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02085, std=0.30236, Rule = Not D ^ C --> F , Not D EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01516, std=0.29762, Rule = Not B ^ C --> F , Not B EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01228, std=0.25001, Rule = Not D ^ C --> F , Not D EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00783, std=0.27335, Rule = Not A ^ C --> F , Not A EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00737, std=0.25842, Rule = Not B ^ C --> F , Not B EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00598, std=0.25459, Rule = E ^ C --> F , E EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00244, std=0.33749, Rule = B ^ C --> F , B EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00219, std=0.28973, Rule = E ^ C --> F , E EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00078, std=0.29939, Rule = B ^ C --> F , B EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00191, std=0.23409, Rule = Not A ^ C --> F , Not A EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00286, std=0.31865, Rule = D ^ C --> F , D EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00295, std=0.29251, Rule = Not E ^ C --> F , Not E EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00488, std=0.25084, Rule = Not E ^ C --> F , Not E EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01107, std=0.27562, Rule = D ^ C --> F , D EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01205, std=0.28296, Rule = A ^ C --> F , A EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01872, std=0.24126, Rule = A ^ C --> F , A EQUAL F ^ C EQUAL F
-------------
Best rule is: D ^ C --> F , D BEFORE F ^ C EQUAL F
Best log-likelihood-grad(all-data) = 0.11994094070721656
new rule added.
Best rule is: D ^ C --> F , D BEFORE C ^ C EQUAL F
Best log-likelihood-grad(all-data) = 0.11173526447396821
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1360
Rule0: A --> F , A BEFORE F, weight=0.0200
Rule1: C --> F , C BEFORE F, weight=0.1489
Rule2: Not C --> F , Not C BEFORE F, weight=0.2931
Rule3: B --> F , B EQUAL F, weight=0.0734
Rule4: C --> F , C EQUAL F, weight=0.3688
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2983
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.4020
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1626
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0843
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0436
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4723
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0757
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0595
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0480
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2911
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0430
Rule16: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.0100
Rule17: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.0100
[0 th iter] Elapsed: 2.5639 min.
[1 th iter] Elapsed: 1.9657 min.
[2 th iter] Elapsed: 1.9843 min.
3 th iter
grad norm=0.007107771024181074. num_batch_no_update =9
Head = F, base = 0.1387
Rule0: A --> F , A BEFORE F, weight=0.0101
Rule1: C --> F , C BEFORE F, weight=0.1358
Rule2: Not C --> F , Not C BEFORE F, weight=0.3007
Rule3: B --> F , B EQUAL F, weight=0.0623
Rule4: C --> F , C EQUAL F, weight=0.2441
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2801
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.3934
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1438
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0735
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0403
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4814
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0685
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0541
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0425
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.3082
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0439
Rule16: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.1306
Rule17: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1451
[3 th iter] Elapsed: 1.9255 min.
[4 th iter] Elapsed: 1.9276 min.
Run 75 batches
reach max iter num.
grad norm=0.010800576267318748. num_batch_no_update =39
Finish optimize_log_likelihood, the log likelihood is -5.199949733281224
Params  [tensor([0.1237], dtype=torch.float64, requires_grad=True), tensor([0.0034], dtype=torch.float64, requires_grad=True), tensor([0.1289], dtype=torch.float64, requires_grad=True), tensor([0.3063], dtype=torch.float64, requires_grad=True), tensor([0.0550], dtype=torch.float64, requires_grad=True), tensor([0.1817], dtype=torch.float64, requires_grad=True), tensor([0.2661], dtype=torch.float64, requires_grad=True), tensor([0.3757], dtype=torch.float64, requires_grad=True), tensor([0.1209], dtype=torch.float64, requires_grad=True), tensor([0.0744], dtype=torch.float64, requires_grad=True), tensor([0.0382], dtype=torch.float64, requires_grad=True), tensor([0.4969], dtype=torch.float64, requires_grad=True), tensor([0.0713], dtype=torch.float64, requires_grad=True), tensor([0.0427], dtype=torch.float64, requires_grad=True), tensor([0.0420], dtype=torch.float64, requires_grad=True), tensor([0.3217], dtype=torch.float64, requires_grad=True), tensor([0.0533], dtype=torch.float64, requires_grad=True), tensor([0.1639], dtype=torch.float64, requires_grad=True), tensor([0.1742], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 10.3680 min.
Update Log-likelihood (torch)=  -5.199949733281224
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1265,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0107.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1395.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3130.
Rule3: B --> F , B EQUAL F, weight(torch)=0.0628.
Rule4: C --> F , C EQUAL F, weight(torch)=0.2045.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2759.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.3845.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1296.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0807.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0454.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.4982.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0753.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0547.
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0504.
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.3252.
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0536.
Rule16: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.1587.
Rule17: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1708.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 1.4108 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01827, std=0.69018, Rule = Not D ^ C --> F , Not D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01346, std=0.65094, Rule = Not D ^ C --> F , Not D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01179, std=0.70239, Rule = B ^ C --> F , B BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01013, std=0.30949, Rule = Not D ^ C --> F , Not D EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00919, std=0.66409, Rule = B ^ C --> F , B BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00887, std=0.69358, Rule = Not B ^ C --> F , Not B BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00885, std=0.29590, Rule = Not B ^ C --> F , Not B EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00818, std=0.64580, Rule = Not A ^ C --> F , Not A BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00531, std=0.25653, Rule = Not D ^ C --> F , Not D EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00338, std=0.65520, Rule = Not B ^ C --> F , Not B BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00336, std=0.25657, Rule = Not B ^ C --> F , Not B EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00267, std=0.25847, Rule = E ^ C --> F , E EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00083, std=0.27625, Rule = Not A ^ C --> F , Not A EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00028, std=0.60241, Rule = Not A ^ C --> F , Not A BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00037, std=0.66123, Rule = A ^ C --> F , A BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00092, std=0.64078, Rule = Not E ^ C --> F , Not E BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00106, std=0.33501, Rule = B ^ C --> F , B EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00116, std=0.67435, Rule = Not E ^ C --> F , Not E BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00190, std=0.29257, Rule = E ^ C --> F , E EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00366, std=0.29688, Rule = B ^ C --> F , B EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00434, std=0.59942, Rule = A ^ C --> F , A BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00707, std=0.23962, Rule = Not A ^ C --> F , Not A EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00757, std=0.31968, Rule = D ^ C --> F , D EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01026, std=0.25844, Rule = Not E ^ C --> F , Not E EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01050, std=0.29925, Rule = Not E ^ C --> F , Not E EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01192, std=0.27568, Rule = D ^ C --> F , D EQUAL F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01503, std=0.70995, Rule = E ^ C --> F , E BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01897, std=0.28396, Rule = A ^ C --> F , A EQUAL C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01960, std=0.74474, Rule = E ^ C --> F , E BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.02294, std=0.24178, Rule = A ^ C --> F , A EQUAL F ^ C EQUAL F
-------------
best gain 0.01827451508214466 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: B --> F , B EQUAL F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 30 candidate rules.
[multiprocess log-grad] Elapsed: 1.8654 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.08668, std=0.73347, Rule = A ^ B --> F , A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.07718, std=0.76469, Rule = D ^ B --> F , D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.07656, std=0.79333, Rule = D ^ B --> F , D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.07416, std=0.74873, Rule = Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.07113, std=0.71129, Rule = Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06990, std=0.67701, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06731, std=0.69305, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.06046, std=0.66225, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02821, std=0.77897, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02470, std=0.80504, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02209, std=0.28663, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02014, std=0.81434, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01978, std=0.84945, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01944, std=0.33097, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01911, std=0.78143, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01525, std=0.30636, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00897, std=0.29654, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00794, std=0.25135, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00568, std=0.72153, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00331, std=0.29036, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00295, std=0.28039, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00029, std=0.25398, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00048, std=0.27589, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00057, std=0.27130, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00118, std=0.29120, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00153, std=0.24609, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00366, std=0.29688, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00390, std=0.25254, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00540, std=0.31956, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01206, std=0.38372, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
Best rule is: A ^ B --> F , A BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.08667752664211943
new rule added.
Best rule is: D ^ B --> F , D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.0771802816874383
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1265
Rule0: A --> F , A BEFORE F, weight=0.0107
Rule1: C --> F , C BEFORE F, weight=0.1395
Rule2: Not C --> F , Not C BEFORE F, weight=0.3130
Rule3: B --> F , B EQUAL F, weight=0.0628
Rule4: C --> F , C EQUAL F, weight=0.2045
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2759
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.3845
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1296
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0807
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0454
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.4982
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0753
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0547
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0504
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.3252
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0536
Rule16: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.1587
Rule17: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1708
Rule18: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0100
Rule19: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 4.6189 min.
[1 th iter] Elapsed: 3.6518 min.
[2 th iter] Elapsed: 3.5510 min.
3 th iter
grad norm=0.008391119311753978. num_batch_no_update =41
Head = F, base = 0.1328
Rule0: A --> F , A BEFORE F, weight=0.0055
Rule1: C --> F , C BEFORE F, weight=0.1280
Rule2: Not C --> F , Not C BEFORE F, weight=0.3283
Rule3: B --> F , B EQUAL F, weight=0.0139
Rule4: C --> F , C EQUAL F, weight=0.1234
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2622
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.3275
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1375
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0849
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0488
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5108
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0715
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0418
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0511
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.3133
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0429
Rule16: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2173
Rule17: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2183
Rule18: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1352
Rule19: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1107
[3 th iter] Elapsed: 3.5573 min.
[4 th iter] Elapsed: 3.6440 min.
Run 75 batches
reach max iter num.
grad norm=0.00914549293119572. num_batch_no_update =71
Finish optimize_log_likelihood, the log likelihood is -5.1978229134591
Params  [tensor([0.1313], dtype=torch.float64, requires_grad=True), tensor([0.0041], dtype=torch.float64, requires_grad=True), tensor([0.1272], dtype=torch.float64, requires_grad=True), tensor([0.3363], dtype=torch.float64, requires_grad=True), tensor([-0.0193], dtype=torch.float64, requires_grad=True), tensor([0.0764], dtype=torch.float64, requires_grad=True), tensor([0.2498], dtype=torch.float64, requires_grad=True), tensor([0.2855], dtype=torch.float64, requires_grad=True), tensor([0.1379], dtype=torch.float64, requires_grad=True), tensor([0.0845], dtype=torch.float64, requires_grad=True), tensor([0.0524], dtype=torch.float64, requires_grad=True), tensor([0.5232], dtype=torch.float64, requires_grad=True), tensor([0.0721], dtype=torch.float64, requires_grad=True), tensor([0.0400], dtype=torch.float64, requires_grad=True), tensor([0.0507], dtype=torch.float64, requires_grad=True), tensor([0.3099], dtype=torch.float64, requires_grad=True), tensor([0.0417], dtype=torch.float64, requires_grad=True), tensor([0.2309], dtype=torch.float64, requires_grad=True), tensor([0.2216], dtype=torch.float64, requires_grad=True), tensor([0.1779], dtype=torch.float64, requires_grad=True), tensor([0.1399], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 19.0245 min.
Update Log-likelihood (torch)=  -5.1978229134591
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1306,
Rule0: A --> F , A BEFORE F, weight(torch)=0.0024.
Rule1: C --> F , C BEFORE F, weight(torch)=0.1228.
Rule2: Not C --> F , Not C BEFORE F, weight(torch)=0.3275.
Rule3: B --> F , B EQUAL F, weight(torch)=-0.0164.
Rule4: C --> F , C EQUAL F, weight(torch)=0.0925.
Rule5: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2495.
Rule6: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.2934.
Rule7: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1370.
Rule8: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0784.
Rule9: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0456.
Rule10: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5180.
Rule11: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0687.
Rule12: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0359.
Rule13: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0454.
Rule14: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.3068.
Rule15: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0410.
Rule16: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2280.
Rule17: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2218.
Rule18: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.1639.
Rule19: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1292.
delete these rules: [0, 3]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1306
Rule0: C --> F , C BEFORE F, weight=0.1228
Rule1: Not C --> F , Not C BEFORE F, weight=0.3275
Rule2: C --> F , C EQUAL F, weight=0.0925
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2495
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.2934
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1370
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0784
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0456
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5180
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0687
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0359
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0454
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.3068
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0410
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2280
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2218
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1639
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1292
[0 th iter] Elapsed: 3.4540 min.
[1 th iter] Elapsed: 3.3927 min.
[2 th iter] Elapsed: 2.0363 min.
3 th iter
grad norm=0.004806061789053016. num_batch_no_update =44
Head = F, base = 0.1383
Rule0: C --> F , C BEFORE F, weight=0.1201
Rule1: Not C --> F , Not C BEFORE F, weight=0.3502
Rule2: C --> F , C EQUAL F, weight=0.0390
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2425
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.2484
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1532
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0834
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0454
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5307
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0697
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0337
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0493
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2972
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0445
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2379
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2213
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1906
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1640
[3 th iter] Elapsed: 1.9994 min.
[4 th iter] Elapsed: 1.0347 min.
Run 67 batches
grad norm 0.0027222968334823182 <= epsilon 0.003. OR, num_batch_no_update 66 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.194174152380073
Params  [tensor([0.1353], dtype=torch.float64, requires_grad=True), tensor([0.1147], dtype=torch.float64, requires_grad=True), tensor([0.3519], dtype=torch.float64, requires_grad=True), tensor([0.0278], dtype=torch.float64, requires_grad=True), tensor([0.2318], dtype=torch.float64, requires_grad=True), tensor([0.2216], dtype=torch.float64, requires_grad=True), tensor([0.1370], dtype=torch.float64, requires_grad=True), tensor([0.0815], dtype=torch.float64, requires_grad=True), tensor([0.0426], dtype=torch.float64, requires_grad=True), tensor([0.5377], dtype=torch.float64, requires_grad=True), tensor([0.0662], dtype=torch.float64, requires_grad=True), tensor([0.0221], dtype=torch.float64, requires_grad=True), tensor([0.0475], dtype=torch.float64, requires_grad=True), tensor([0.2938], dtype=torch.float64, requires_grad=True), tensor([0.0376], dtype=torch.float64, requires_grad=True), tensor([0.2537], dtype=torch.float64, requires_grad=True), tensor([0.2330], dtype=torch.float64, requires_grad=True), tensor([0.1907], dtype=torch.float64, requires_grad=True), tensor([0.1698], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 11.9182 min.
update Log-likelihood (torch)=  -5.194174152380073
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1346,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1183.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.3508.
Rule2: C --> F , C EQUAL F, weight(torch)=0.0351.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2344.
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.2330.
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1413.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0845.
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0447.
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5351.
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0671.
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0261.
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0496.
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2956.
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0378.
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2469.
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2281.
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.1902.
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1654.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 28 candidate rules.
[multiprocess log-grad] Elapsed: 1.4104 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02919, std=0.76073, Rule = Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02845, std=0.72374, Rule = Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02439, std=0.72710, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02260, std=0.80427, Rule = D ^ B --> F , D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02144, std=0.71261, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01790, std=0.69575, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01789, std=0.28512, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01690, std=0.67973, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01607, std=0.32338, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00658, std=0.31458, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00558, std=0.67671, Rule = Not C ^ B --> F , Not C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00482, std=0.24881, Rule = Not E ^ B --> F , Not E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00383, std=0.29612, Rule = Not E ^ B --> F , Not E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00212, std=0.26979, Rule = D ^ B --> F , D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00336, std=0.28961, Rule = D ^ B --> F , D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00371, std=0.29201, Rule = C ^ B --> F , C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00374, std=0.24898, Rule = A ^ B --> F , A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00393, std=0.28097, Rule = Not A ^ B --> F , Not A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00403, std=0.28252, Rule = E ^ B --> F , E EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00405, std=0.29261, Rule = Not D ^ B --> F , Not D EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00479, std=0.25740, Rule = Not D ^ B --> F , Not D EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00697, std=0.80273, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00847, std=0.25097, Rule = Not A ^ B --> F , Not A EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01065, std=0.77104, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01077, std=0.32329, Rule = E ^ B --> F , E EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01084, std=0.36607, Rule = C ^ B --> F , C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01164, std=0.80564, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01371, std=0.84701, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
Best rule is: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.029188379536640822
new rule added.
Best rule is: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.02844823679028148
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1346
Rule0: C --> F , C BEFORE F, weight=0.1183
Rule1: Not C --> F , Not C BEFORE F, weight=0.3508
Rule2: C --> F , C EQUAL F, weight=0.0351
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2344
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.2330
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1413
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0845
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0447
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5351
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0671
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0261
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0496
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2956
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0378
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2469
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2281
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1902
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1654
Rule18: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0100
Rule19: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 2.7277 min.
[1 th iter] Elapsed: 2.1253 min.
[2 th iter] Elapsed: 2.0472 min.
3 th iter
grad norm=0.006294444669944698. num_batch_no_update =42
Head = F, base = 0.1320
Rule0: C --> F , C BEFORE F, weight=0.1141
Rule1: Not C --> F , Not C BEFORE F, weight=0.3635
Rule2: C --> F , C EQUAL F, weight=0.0203
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2206
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1894
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1397
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0806
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0406
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5453
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0662
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0141
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0502
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2918
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0509
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2791
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2504
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.2046
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1666
Rule18: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0301
Rule19: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0279
[3 th iter] Elapsed: 1.3821 min.
Run 55 batches
grad norm 0.0029439258567842247 <= epsilon 0.003. OR, num_batch_no_update 52 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.170427519341131
Params  [tensor([0.1307], dtype=torch.float64, requires_grad=True), tensor([0.1153], dtype=torch.float64, requires_grad=True), tensor([0.3716], dtype=torch.float64, requires_grad=True), tensor([0.0101], dtype=torch.float64, requires_grad=True), tensor([0.2205], dtype=torch.float64, requires_grad=True), tensor([0.1825], dtype=torch.float64, requires_grad=True), tensor([0.1417], dtype=torch.float64, requires_grad=True), tensor([0.0883], dtype=torch.float64, requires_grad=True), tensor([0.0460], dtype=torch.float64, requires_grad=True), tensor([0.5483], dtype=torch.float64, requires_grad=True), tensor([0.0685], dtype=torch.float64, requires_grad=True), tensor([0.0153], dtype=torch.float64, requires_grad=True), tensor([0.0506], dtype=torch.float64, requires_grad=True), tensor([0.2928], dtype=torch.float64, requires_grad=True), tensor([0.0574], dtype=torch.float64, requires_grad=True), tensor([0.2798], dtype=torch.float64, requires_grad=True), tensor([0.2485], dtype=torch.float64, requires_grad=True), tensor([0.2073], dtype=torch.float64, requires_grad=True), tensor([0.1668], dtype=torch.float64, requires_grad=True), tensor([0.0370], dtype=torch.float64, requires_grad=True), tensor([0.0330], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 8.2836 min.
Update Log-likelihood (torch)=  -5.170427519341131
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1311,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1152.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.3654.
Rule2: C --> F , C EQUAL F, weight(torch)=0.0188.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2220.
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.1887.
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1405.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0830.
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0422.
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5464.
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0677.
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0146.
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0506.
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2910.
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0525.
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2793.
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2505.
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.2058.
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1662.
Rule18: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0310.
Rule19: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0284.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 12 candidate rules.
[multiprocess log-grad] Elapsed: 42.3986 sec.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01899, std=0.72022, Rule = C ^ B --> F , C BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01590, std=0.28636, Rule = Not C ^ B --> F , Not C EQUAL F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01427, std=0.32340, Rule = Not C ^ B --> F , Not C EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00739, std=0.71924, Rule = Not A ^ B --> F , Not A BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00391, std=0.31612, Rule = A ^ B --> F , A EQUAL B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00361, std=0.68563, Rule = Not A ^ B --> F , Not A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00354, std=0.81364, Rule = D ^ B --> F , D BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00352, std=0.70248, Rule = A ^ B --> F , A BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01974, std=0.80582, Rule = E ^ B --> F , E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.02292, std=0.77330, Rule = Not E ^ B --> F , Not E BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.02461, std=0.80819, Rule = Not E ^ B --> F , Not E BEFORE F ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.02710, std=0.85004, Rule = E ^ B --> F , E BEFORE F ^ B EQUAL F
-------------
best gain 0.01899387209694942 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: A ^ C --> F , A BEFORE F ^ C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.6068 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06470, std=0.65182, Rule = B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03776, std=2.46649, Rule = Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02967, std=0.44487, Rule = Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02696, std=1.03810, Rule = Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02439, std=2.05123, Rule = Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02338, std=2.24883, Rule = D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02084, std=0.52898, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01839, std=1.09303, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01521, std=0.41317, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01433, std=0.59520, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01335, std=1.09837, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01306, std=1.21240, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01226, std=1.08677, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01140, std=2.44752, Rule = E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00951, std=0.65623, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00919, std=0.65070, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00810, std=1.28005, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00708, std=0.55992, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00633, std=0.47909, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00622, std=0.43691, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00535, std=0.54104, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00527, std=0.40820, Rule = Not D ^ A ^ C --> F , Not D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00443, std=1.25127, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00399, std=2.23945, Rule = Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00257, std=0.55871, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00064, std=1.24753, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00196, std=0.65642, Rule = Not E ^ A ^ C --> F , Not E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00567, std=0.60757, Rule = Not D ^ A ^ C --> F , Not D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00581, std=0.46131, Rule = B ^ A ^ C --> F , B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00835, std=0.62920, Rule = Not B ^ A ^ C --> F , Not B EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00897, std=1.34957, Rule = E ^ A ^ C --> F , E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01025, std=1.16016, Rule = B ^ A ^ C --> F , B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01062, std=1.17019, Rule = Not B ^ A ^ C --> F , Not B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01432, std=2.03635, Rule = B ^ A ^ C --> F , B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01857, std=0.71964, Rule = Not D ^ A ^ C --> F , Not D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03307, std=1.19968, Rule = Not B ^ A ^ C --> F , Not B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.0646984176870993
new rule added.
Best rule is: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.037764057093253825
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1311
Rule0: C --> F , C BEFORE F, weight=0.1152
Rule1: Not C --> F , Not C BEFORE F, weight=0.3654
Rule2: C --> F , C EQUAL F, weight=0.0188
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2220
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1887
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1405
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0830
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0422
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5464
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0677
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0146
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0506
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2910
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0525
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2793
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2505
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.2058
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1662
Rule18: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0310
Rule19: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0284
Rule20: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule21: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 4.0397 min.
[1 th iter] Elapsed: 2.3331 min.
[2 th iter] Elapsed: 2.2489 min.
3 th iter
grad norm=0.00659388447219451. num_batch_no_update =42
Head = F, base = 0.1267
Rule0: C --> F , C BEFORE F, weight=0.1128
Rule1: Not C --> F , Not C BEFORE F, weight=0.3833
Rule2: C --> F , C EQUAL F, weight=0.0068
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2138
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1539
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1316
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0725
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0480
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5480
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0617
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0142
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0474
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2850
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0531
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2848
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2457
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.2054
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1568
Rule18: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0285
Rule19: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0278
Rule20: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.1250
Rule21: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0099
[3 th iter] Elapsed: 2.3430 min.
[4 th iter] Elapsed: 2.2867 min.
Run 75 batches
reach max iter num.
grad norm=0.005812795381944802. num_batch_no_update =72
Finish optimize_log_likelihood, the log likelihood is -5.149882159630086
Params  [tensor([0.1309], dtype=torch.float64, requires_grad=True), tensor([0.1057], dtype=torch.float64, requires_grad=True), tensor([0.3906], dtype=torch.float64, requires_grad=True), tensor([-0.0050], dtype=torch.float64, requires_grad=True), tensor([0.2012], dtype=torch.float64, requires_grad=True), tensor([0.1282], dtype=torch.float64, requires_grad=True), tensor([0.1317], dtype=torch.float64, requires_grad=True), tensor([0.0699], dtype=torch.float64, requires_grad=True), tensor([0.0457], dtype=torch.float64, requires_grad=True), tensor([0.5442], dtype=torch.float64, requires_grad=True), tensor([0.0605], dtype=torch.float64, requires_grad=True), tensor([0.0116], dtype=torch.float64, requires_grad=True), tensor([0.0444], dtype=torch.float64, requires_grad=True), tensor([0.2728], dtype=torch.float64, requires_grad=True), tensor([0.0492], dtype=torch.float64, requires_grad=True), tensor([0.2846], dtype=torch.float64, requires_grad=True), tensor([0.2393], dtype=torch.float64, requires_grad=True), tensor([0.1752], dtype=torch.float64, requires_grad=True), tensor([0.1412], dtype=torch.float64, requires_grad=True), tensor([0.0143], dtype=torch.float64, requires_grad=True), tensor([0.0141], dtype=torch.float64, requires_grad=True), tensor([0.1724], dtype=torch.float64, requires_grad=True), tensor([0.0085], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 13.2524 min.
Update Log-likelihood (torch)=  -5.149882159630086
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1277,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1095.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.3903.
Rule2: C --> F , C EQUAL F, weight(torch)=0.0015.
Rule3: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.2066.
Rule4: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.1407.
Rule5: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1298.
Rule6: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0772.
Rule7: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0520.
Rule8: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5461.
Rule9: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0623.
Rule10: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0139.
Rule11: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0464.
Rule12: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2819.
Rule13: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0528.
Rule14: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2881.
Rule15: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2451.
Rule16: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.1841.
Rule17: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1485.
Rule18: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0197.
Rule19: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0199.
Rule20: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1581.
Rule21: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0122.
delete these rules: [2]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1277
Rule0: C --> F , C BEFORE F, weight=0.1095
Rule1: Not C --> F , Not C BEFORE F, weight=0.3903
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.2066
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1407
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1298
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0772
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0520
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5461
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0623
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0139
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0464
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2819
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0528
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2881
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2451
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1841
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1485
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0197
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0199
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.1581
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0122
[0 th iter] Elapsed: 2.2100 min.
[1 th iter] Elapsed: 2.2390 min.
[2 th iter] Elapsed: 2.2016 min.
3 th iter
grad norm=0.006148480100120703. num_batch_no_update =41
Head = F, base = 0.1347
Rule0: C --> F , C BEFORE F, weight=0.1075
Rule1: Not C --> F , Not C BEFORE F, weight=0.4035
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1964
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1131
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1259
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0745
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0485
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5385
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0584
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0183
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0492
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2683
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0590
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2882
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2386
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1649
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1430
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0170
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0137
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.2293
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0183
[3 th iter] Elapsed: 2.2151 min.
[4 th iter] Elapsed: 2.1933 min.
Run 75 batches
reach max iter num.
grad norm=0.0052296557530591955. num_batch_no_update =71
Finish optimize_log_likelihood, the log likelihood is -5.16357224802003
Params  [tensor([0.1284], dtype=torch.float64, requires_grad=True), tensor([0.1036], dtype=torch.float64, requires_grad=True), tensor([0.4115], dtype=torch.float64, requires_grad=True), tensor([0.1910], dtype=torch.float64, requires_grad=True), tensor([0.1013], dtype=torch.float64, requires_grad=True), tensor([0.1242], dtype=torch.float64, requires_grad=True), tensor([0.0664], dtype=torch.float64, requires_grad=True), tensor([0.0471], dtype=torch.float64, requires_grad=True), tensor([0.5435], dtype=torch.float64, requires_grad=True), tensor([0.0593], dtype=torch.float64, requires_grad=True), tensor([0.0176], dtype=torch.float64, requires_grad=True), tensor([0.0504], dtype=torch.float64, requires_grad=True), tensor([0.2563], dtype=torch.float64, requires_grad=True), tensor([0.0509], dtype=torch.float64, requires_grad=True), tensor([0.2923], dtype=torch.float64, requires_grad=True), tensor([0.2388], dtype=torch.float64, requires_grad=True), tensor([0.1503], dtype=torch.float64, requires_grad=True), tensor([0.1433], dtype=torch.float64, requires_grad=True), tensor([0.0267], dtype=torch.float64, requires_grad=True), tensor([0.0228], dtype=torch.float64, requires_grad=True), tensor([0.2696], dtype=torch.float64, requires_grad=True), tensor([0.0153], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 11.0601 min.
update Log-likelihood (torch)=  -5.16357224802003
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1350,
Rule0: C --> F , C BEFORE F, weight(torch)=0.1046.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4102.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1917.
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.1099.
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1280.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0713.
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0489.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5398.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0577.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0169.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0505.
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2649.
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0540.
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.3018.
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2493.
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.1588.
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1464.
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0277.
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0235.
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.2597.
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0160.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 3.4416 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02813, std=0.44859, Rule = Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02327, std=1.03297, Rule = Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01695, std=0.54298, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01510, std=2.23842, Rule = D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01386, std=2.08013, Rule = Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01333, std=0.59800, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01321, std=1.09691, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01208, std=0.42882, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01063, std=1.22633, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01023, std=1.08368, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01007, std=1.10411, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00863, std=0.64920, Rule = E ^ A ^ C --> F , E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00546, std=0.67948, Rule = Not E ^ A ^ C --> F , Not E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00539, std=0.55798, Rule = D ^ A ^ C --> F , D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00536, std=0.44048, Rule = Not B ^ A ^ C --> F , Not B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00489, std=0.41105, Rule = Not D ^ A ^ C --> F , Not D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00445, std=0.48334, Rule = D ^ A ^ C --> F , D EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00332, std=0.55008, Rule = D ^ A ^ C --> F , D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00118, std=1.30687, Rule = E ^ A ^ C --> F , E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00042, std=0.57292, Rule = E ^ A ^ C --> F , E EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00063, std=2.21855, Rule = Not D ^ A ^ C --> F , Not D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00419, std=1.27695, Rule = Not E ^ A ^ C --> F , Not E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00490, std=0.67428, Rule = Not E ^ A ^ C --> F , Not E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00563, std=1.26939, Rule = Not E ^ A ^ C --> F , Not E BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00636, std=0.59841, Rule = Not D ^ A ^ C --> F , Not D EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00884, std=0.62518, Rule = Not B ^ A ^ C --> F , Not B EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00945, std=2.50853, Rule = E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00982, std=0.47601, Rule = B ^ A ^ C --> F , B EQUAL A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01493, std=1.18859, Rule = Not B ^ A ^ C --> F , Not B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01499, std=1.17574, Rule = B ^ A ^ C --> F , B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01814, std=1.38039, Rule = E ^ A ^ C --> F , E BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01861, std=2.04906, Rule = B ^ A ^ C --> F , B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01912, std=0.71228, Rule = Not D ^ A ^ C --> F , Not D EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03930, std=1.22273, Rule = Not B ^ A ^ C --> F , Not B BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.02813294013060264
new rule added.
Best rule is: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.023266876530675915
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1350
Rule0: C --> F , C BEFORE F, weight=0.1046
Rule1: Not C --> F , Not C BEFORE F, weight=0.4102
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1917
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.1099
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1280
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0713
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0489
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5398
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0577
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0169
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0505
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2649
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0540
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.3018
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2493
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1588
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1464
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0277
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0235
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.2597
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0160
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 4.0190 min.
[1 th iter] Elapsed: 2.4853 min.
[2 th iter] Elapsed: 2.3144 min.
3 th iter
grad norm=0.003295187800211133. num_batch_no_update =43
Head = F, base = 0.1347
Rule0: C --> F , C BEFORE F, weight=0.0977
Rule1: Not C --> F , Not C BEFORE F, weight=0.4224
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1840
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0766
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1357
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0637
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0454
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5471
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0550
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0145
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0378
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2375
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0332
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2950
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2324
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1155
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1474
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0291
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0242
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.3237
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0299
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0421
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0183
[3 th iter] Elapsed: 18.5351 sec.
Run 47 batches
grad norm 0.00282758375757031 <= epsilon 0.003. OR, num_batch_no_update 45 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.18537188743665
Params  [tensor([0.1339], dtype=torch.float64, requires_grad=True), tensor([0.0963], dtype=torch.float64, requires_grad=True), tensor([0.4221], dtype=torch.float64, requires_grad=True), tensor([0.1823], dtype=torch.float64, requires_grad=True), tensor([0.0752], dtype=torch.float64, requires_grad=True), tensor([0.1340], dtype=torch.float64, requires_grad=True), tensor([0.0628], dtype=torch.float64, requires_grad=True), tensor([0.0448], dtype=torch.float64, requires_grad=True), tensor([0.5458], dtype=torch.float64, requires_grad=True), tensor([0.0539], dtype=torch.float64, requires_grad=True), tensor([0.0134], dtype=torch.float64, requires_grad=True), tensor([0.0369], dtype=torch.float64, requires_grad=True), tensor([0.2364], dtype=torch.float64, requires_grad=True), tensor([0.0353], dtype=torch.float64, requires_grad=True), tensor([0.2967], dtype=torch.float64, requires_grad=True), tensor([0.2339], dtype=torch.float64, requires_grad=True), tensor([0.1131], dtype=torch.float64, requires_grad=True), tensor([0.1469], dtype=torch.float64, requires_grad=True), tensor([0.0284], dtype=torch.float64, requires_grad=True), tensor([0.0236], dtype=torch.float64, requires_grad=True), tensor([0.3253], dtype=torch.float64, requires_grad=True), tensor([0.0296], dtype=torch.float64, requires_grad=True), tensor([0.0411], dtype=torch.float64, requires_grad=True), tensor([0.0166], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 9.1289 min.
Update Log-likelihood (torch)=  -5.18537188743665
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1316,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0997.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4192.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1845.
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.0782.
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1319.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0635.
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0455.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5473.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0579.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0153.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0388.
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2394.
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0313.
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2912.
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2305.
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.1201.
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1446.
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0263.
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0218.
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.3145.
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0277.
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0370.
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0220.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 10 candidate rules.
[multiprocess log-grad] Elapsed: 1.2666 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02068, std=2.09773, Rule = Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01650, std=0.55876, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01516, std=0.59755, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01497, std=2.27299, Rule = D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01245, std=0.42915, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00765, std=1.25282, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00650, std=1.11967, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00491, std=1.12215, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00438, std=1.10489, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01178, std=2.61087, Rule = E ^ A ^ C --> F , E BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
Best rule is: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.020675972354216896
new rule added.
best gain 0.016495384564095855 does not meet thershold 0.02.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1316
Rule0: C --> F , C BEFORE F, weight=0.0997
Rule1: Not C --> F , Not C BEFORE F, weight=0.4192
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1845
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0782
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1319
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0635
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0455
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5473
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0579
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0153
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0388
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2394
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0313
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2912
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2305
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.1201
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1446
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0263
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0218
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.3145
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0277
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0370
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0220
Rule23: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 3.4319 min.
[1 th iter] Elapsed: 2.5516 min.
[2 th iter] Elapsed: 2.5203 min.
3 th iter
grad norm=0.00598999813305945. num_batch_no_update =44
Head = F, base = 0.1298
Rule0: C --> F , C BEFORE F, weight=0.0860
Rule1: Not C --> F , Not C BEFORE F, weight=0.4221
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1739
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0649
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1443
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0574
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0376
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5411
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0518
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0142
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0329
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2223
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0353
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.3007
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2296
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0844
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1527
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0435
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0391
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.3842
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0059
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0734
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0091
Rule23: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0031
[3 th iter] Elapsed: 9.7774 sec.
Run 46 batches
grad norm 0.002679488979616142 <= epsilon 0.003. OR, num_batch_no_update 45 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.136697964496654
Params  [tensor([0.1301], dtype=torch.float64, requires_grad=True), tensor([0.0874], dtype=torch.float64, requires_grad=True), tensor([0.4238], dtype=torch.float64, requires_grad=True), tensor([0.1751], dtype=torch.float64, requires_grad=True), tensor([0.0646], dtype=torch.float64, requires_grad=True), tensor([0.1451], dtype=torch.float64, requires_grad=True), tensor([0.0590], dtype=torch.float64, requires_grad=True), tensor([0.0392], dtype=torch.float64, requires_grad=True), tensor([0.5426], dtype=torch.float64, requires_grad=True), tensor([0.0531], dtype=torch.float64, requires_grad=True), tensor([0.0155], dtype=torch.float64, requires_grad=True), tensor([0.0339], dtype=torch.float64, requires_grad=True), tensor([0.2227], dtype=torch.float64, requires_grad=True), tensor([0.0359], dtype=torch.float64, requires_grad=True), tensor([0.3005], dtype=torch.float64, requires_grad=True), tensor([0.2292], dtype=torch.float64, requires_grad=True), tensor([0.0847], dtype=torch.float64, requires_grad=True), tensor([0.1527], dtype=torch.float64, requires_grad=True), tensor([0.0434], dtype=torch.float64, requires_grad=True), tensor([0.0390], dtype=torch.float64, requires_grad=True), tensor([0.3868], dtype=torch.float64, requires_grad=True), tensor([0.0073], dtype=torch.float64, requires_grad=True), tensor([0.0744], dtype=torch.float64, requires_grad=True), tensor([0.0106], dtype=torch.float64, requires_grad=True), tensor([0.0042], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 8.6681 min.
Update Log-likelihood (torch)=  -5.136697964496654
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1310,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0924.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4259.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1804.
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.0740.
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1466.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0639.
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0451.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5460.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0569.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0183.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0377.
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2312.
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0317.
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2998.
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2314.
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.0982.
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1556.
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0447.
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0395.
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.3778.
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0119.
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0713.
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0115.
Rule23: Not B ^ A ^ C --> F , Not B BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0089.
delete these rules: [23]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1310
Rule0: C --> F , C BEFORE F, weight=0.0924
Rule1: Not C --> F , Not C BEFORE F, weight=0.4259
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1804
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0740
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1466
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0639
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0451
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5460
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0569
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0183
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0377
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2312
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0317
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2998
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2314
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0982
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1556
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0447
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0395
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.3778
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0119
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0713
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0115
[0 th iter] Elapsed: 2.3734 min.
[1 th iter] Elapsed: 2.3719 min.
[2 th iter] Elapsed: 2.4094 min.
3 th iter
grad norm=0.006395753454154936. num_batch_no_update =43
Head = F, base = 0.1276
Rule0: C --> F , C BEFORE F, weight=0.0851
Rule1: Not C --> F , Not C BEFORE F, weight=0.4358
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1694
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0606
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1325
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0600
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0480
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5459
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0581
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0233
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0367
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2305
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0509
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.3086
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2209
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0744
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1751
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0491
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0443
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.4534
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0264
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0839
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0183
[3 th iter] Elapsed: 2.3542 min.
[4 th iter] Elapsed: 2.3477 min.
Run 75 batches
reach max iter num.
grad norm=0.0038684352317521747. num_batch_no_update =73
Finish optimize_log_likelihood, the log likelihood is -5.138429968639986
Params  [tensor([0.1279], dtype=torch.float64, requires_grad=True), tensor([0.0862], dtype=torch.float64, requires_grad=True), tensor([0.4541], dtype=torch.float64, requires_grad=True), tensor([0.1641], dtype=torch.float64, requires_grad=True), tensor([0.0459], dtype=torch.float64, requires_grad=True), tensor([0.1270], dtype=torch.float64, requires_grad=True), tensor([0.0532], dtype=torch.float64, requires_grad=True), tensor([0.0499], dtype=torch.float64, requires_grad=True), tensor([0.5469], dtype=torch.float64, requires_grad=True), tensor([0.0574], dtype=torch.float64, requires_grad=True), tensor([0.0192], dtype=torch.float64, requires_grad=True), tensor([0.0460], dtype=torch.float64, requires_grad=True), tensor([0.2122], dtype=torch.float64, requires_grad=True), tensor([0.0510], dtype=torch.float64, requires_grad=True), tensor([0.3154], dtype=torch.float64, requires_grad=True), tensor([0.2241], dtype=torch.float64, requires_grad=True), tensor([0.0441], dtype=torch.float64, requires_grad=True), tensor([0.1651], dtype=torch.float64, requires_grad=True), tensor([0.0370], dtype=torch.float64, requires_grad=True), tensor([0.0328], dtype=torch.float64, requires_grad=True), tensor([0.4718], dtype=torch.float64, requires_grad=True), tensor([0.0214], dtype=torch.float64, requires_grad=True), tensor([0.0843], dtype=torch.float64, requires_grad=True), tensor([0.0122], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 11.8582 min.
update Log-likelihood (torch)=  -5.138429968639986
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1320,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0869.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4496.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1659.
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.0447.
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1295.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0565.
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0493.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5457.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0572.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0231.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0451.
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.2094.
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0528.
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.3133.
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2233.
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.0449.
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1608.
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0338.
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0302.
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.4577.
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0191.
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0870.
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0134.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 8 candidate rules.
[multiprocess log-grad] Elapsed: 1.1980 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01680, std=0.53730, Rule = E ^ A ^ C --> F , E EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01268, std=0.59964, Rule = Not E ^ A ^ C --> F , Not E EQUAL F ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00880, std=0.43920, Rule = B ^ A ^ C --> F , B EQUAL C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00775, std=1.21758, Rule = B ^ A ^ C --> F , B BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00402, std=1.09687, Rule = Not D ^ A ^ C --> F , Not D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00370, std=1.11489, Rule = D ^ A ^ C --> F , D BEFORE A ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00242, std=1.11170, Rule = D ^ A ^ C --> F , D BEFORE C ^ A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00186, std=2.26054, Rule = D ^ A ^ C --> F , D BEFORE F ^ A BEFORE F ^ C BEFORE F
-------------
best gain 0.016802381570393345 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: D ^ C --> F , D BEFORE F ^ C EQUAL F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.6747 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03060, std=0.66729, Rule = B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02741, std=0.63429, Rule = B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02486, std=0.69333, Rule = Not B ^ D ^ C --> F , Not B BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02241, std=0.69223, Rule = A ^ D ^ C --> F , A BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02147, std=0.68387, Rule = Not A ^ D ^ C --> F , Not A BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02077, std=0.65185, Rule = Not B ^ D ^ C --> F , Not B BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01497, std=0.62559, Rule = A ^ D ^ C --> F , A BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01476, std=0.35036, Rule = Not B ^ D ^ C --> F , Not B BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01396, std=0.62840, Rule = Not A ^ D ^ C --> F , Not A BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01356, std=0.27309, Rule = Not B ^ D ^ C --> F , Not B EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01235, std=0.31146, Rule = B ^ D ^ C --> F , B EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01087, std=0.35550, Rule = B ^ D ^ C --> F , B BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01042, std=0.34613, Rule = Not E ^ D ^ C --> F , Not E BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01013, std=0.34433, Rule = Not A ^ D ^ C --> F , Not A BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00946, std=0.23148, Rule = Not B ^ D ^ C --> F , Not B EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00916, std=0.28422, Rule = B ^ D ^ C --> F , B EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00871, std=0.34398, Rule = A ^ D ^ C --> F , A BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00679, std=0.16880, Rule = E ^ D ^ C --> F , E EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00586, std=0.27875, Rule = Not A ^ D ^ C --> F , Not A EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00563, std=0.22196, Rule = E ^ D ^ C --> F , E EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00562, std=0.24254, Rule = E ^ D ^ C --> F , E EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00430, std=0.15598, Rule = B ^ D ^ C --> F , B EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00407, std=0.37881, Rule = E ^ D ^ C --> F , E BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00336, std=0.68585, Rule = Not E ^ D ^ C --> F , Not E BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00261, std=0.65354, Rule = Not E ^ D ^ C --> F , Not E BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00009, std=0.13571, Rule = Not A ^ D ^ C --> F , Not A EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00028, std=0.16011, Rule = Not B ^ D ^ C --> F , Not B EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00165, std=0.24600, Rule = Not A ^ D ^ C --> F , Not A EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00225, std=0.71913, Rule = E ^ D ^ C --> F , E BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00226, std=0.73687, Rule = E ^ D ^ C --> F , E BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00351, std=0.17209, Rule = A ^ D ^ C --> F , A EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00575, std=0.30736, Rule = Not E ^ D ^ C --> F , Not E EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00624, std=0.28600, Rule = A ^ D ^ C --> F , A EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00649, std=0.28297, Rule = Not E ^ D ^ C --> F , Not E EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00650, std=0.16201, Rule = Not E ^ D ^ C --> F , Not E EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01368, std=0.23405, Rule = A ^ D ^ C --> F , A EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
Best rule is: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F
Best log-likelihood-grad(all-data) = 0.03060456771312063
new rule added.
Best rule is: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F
Best log-likelihood-grad(all-data) = 0.02741336612096781
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1320
Rule0: C --> F , C BEFORE F, weight=0.0869
Rule1: Not C --> F , Not C BEFORE F, weight=0.4496
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1659
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0447
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1295
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0565
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0493
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5457
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0572
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0231
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0451
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2094
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0528
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.3133
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2233
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0449
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1608
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0338
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0302
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.4577
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0191
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0870
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0134
Rule23: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0100
Rule24: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0100
[0 th iter] Elapsed: 7.2928 min.
[1 th iter] Elapsed: 4.5732 min.
[2 th iter] Elapsed: 4.4769 min.
3 th iter
grad norm=0.005566404750492965. num_batch_no_update =44
Head = F, base = 0.1361
Rule0: C --> F , C BEFORE F, weight=0.0778
Rule1: Not C --> F , Not C BEFORE F, weight=0.4619
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1632
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0288
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1339
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0516
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0453
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5503
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0626
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0202
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0408
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.2006
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0492
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2954
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2085
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0319
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1688
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0304
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0480
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.5217
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0252
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1030
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0259
Rule23: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0283
Rule24: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0228
[3 th iter] Elapsed: 2.6349 min.
Run 54 batches
grad norm 0.0026486013142576906 <= epsilon 0.003. OR, num_batch_no_update 53 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.1424307939037295
Params  [tensor([0.1254], dtype=torch.float64, requires_grad=True), tensor([0.0730], dtype=torch.float64, requires_grad=True), tensor([0.4631], dtype=torch.float64, requires_grad=True), tensor([0.1585], dtype=torch.float64, requires_grad=True), tensor([0.0248], dtype=torch.float64, requires_grad=True), tensor([0.1378], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True), tensor([0.0440], dtype=torch.float64, requires_grad=True), tensor([0.5472], dtype=torch.float64, requires_grad=True), tensor([0.0601], dtype=torch.float64, requires_grad=True), tensor([0.0144], dtype=torch.float64, requires_grad=True), tensor([0.0377], dtype=torch.float64, requires_grad=True), tensor([0.1946], dtype=torch.float64, requires_grad=True), tensor([0.0483], dtype=torch.float64, requires_grad=True), tensor([0.2972], dtype=torch.float64, requires_grad=True), tensor([0.2090], dtype=torch.float64, requires_grad=True), tensor([0.0247], dtype=torch.float64, requires_grad=True), tensor([0.1692], dtype=torch.float64, requires_grad=True), tensor([0.0305], dtype=torch.float64, requires_grad=True), tensor([0.0477], dtype=torch.float64, requires_grad=True), tensor([0.5249], dtype=torch.float64, requires_grad=True), tensor([0.0271], dtype=torch.float64, requires_grad=True), tensor([0.0956], dtype=torch.float64, requires_grad=True), tensor([0.0213], dtype=torch.float64, requires_grad=True), tensor([0.0397], dtype=torch.float64, requires_grad=True), tensor([0.0347], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 18.9795 min.
Update Log-likelihood (torch)=  -5.1424307939037295
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1334,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0752.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4602.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1611.
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=0.0273.
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1332.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0515.
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0450.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5471.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0603.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0168.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0382.
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.1985.
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0486.
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2959.
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.2093.
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.0303.
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1681.
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0300.
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0475.
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.5191.
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0242.
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0988.
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0220.
Rule23: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0295.
Rule24: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0247.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 7.5110 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01913, std=0.69521, Rule = A ^ D ^ C --> F , A BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01831, std=0.68450, Rule = Not A ^ D ^ C --> F , Not A BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01731, std=0.70046, Rule = Not B ^ D ^ C --> F , Not B BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01361, std=0.65813, Rule = Not B ^ D ^ C --> F , Not B BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01253, std=0.27519, Rule = Not B ^ D ^ C --> F , Not B EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01191, std=0.62761, Rule = A ^ D ^ C --> F , A BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01151, std=0.31290, Rule = B ^ D ^ C --> F , B EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01137, std=0.35323, Rule = Not B ^ D ^ C --> F , Not B BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01077, std=0.62997, Rule = Not A ^ D ^ C --> F , Not A BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00884, std=0.23225, Rule = Not B ^ D ^ C --> F , Not B EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00874, std=0.34779, Rule = Not E ^ D ^ C --> F , Not E BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00860, std=0.28605, Rule = B ^ D ^ C --> F , B EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00826, std=0.34540, Rule = Not A ^ D ^ C --> F , Not A BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00709, std=0.35870, Rule = B ^ D ^ C --> F , B BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00694, std=0.34530, Rule = A ^ D ^ C --> F , A BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00652, std=0.16891, Rule = E ^ D ^ C --> F , E EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00542, std=0.22245, Rule = E ^ D ^ C --> F , E EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00536, std=0.24267, Rule = E ^ D ^ C --> F , E EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00509, std=0.27966, Rule = Not A ^ D ^ C --> F , Not A EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00271, std=0.15863, Rule = B ^ D ^ C --> F , B EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00263, std=0.37896, Rule = E ^ D ^ C --> F , E BEFORE D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00081, std=0.68669, Rule = Not E ^ D ^ C --> F , Not E BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00005, std=0.65457, Rule = Not E ^ D ^ C --> F , Not E BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00037, std=0.13537, Rule = Not A ^ D ^ C --> F , Not A EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00160, std=0.16282, Rule = Not B ^ D ^ C --> F , Not B EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00245, std=0.24911, Rule = Not A ^ D ^ C --> F , Not A EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00381, std=0.17215, Rule = A ^ D ^ C --> F , A EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00433, std=0.72009, Rule = E ^ D ^ C --> F , E BEFORE C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00439, std=0.73780, Rule = E ^ D ^ C --> F , E BEFORE F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00577, std=0.30685, Rule = Not E ^ D ^ C --> F , Not E EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00653, std=0.28272, Rule = Not E ^ D ^ C --> F , Not E EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00656, std=0.28596, Rule = A ^ D ^ C --> F , A EQUAL C ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00665, std=0.16159, Rule = Not E ^ D ^ C --> F , Not E EQUAL D ^ D BEFORE F ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01378, std=0.23297, Rule = A ^ D ^ C --> F , A EQUAL F ^ D BEFORE F ^ C EQUAL F
-------------
best gain 0.01912795023275937 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: D ^ C --> F , D BEFORE C ^ C EQUAL F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.5935 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01694, std=0.61783, Rule = Not A ^ D ^ C --> F , Not A BEFORE F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01500, std=0.64568, Rule = A ^ D ^ C --> F , A BEFORE F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01355, std=0.63850, Rule = B ^ D ^ C --> F , B BEFORE F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01148, std=0.60780, Rule = B ^ D ^ C --> F , B BEFORE C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01069, std=0.26110, Rule = Not B ^ D ^ C --> F , Not B EQUAL C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01003, std=0.28954, Rule = B ^ D ^ C --> F , B EQUAL C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00940, std=0.66547, Rule = Not B ^ D ^ C --> F , Not B BEFORE F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00908, std=0.26167, Rule = Not A ^ D ^ C --> F , Not A EQUAL C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00796, std=0.26898, Rule = B ^ D ^ C --> F , B EQUAL F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00754, std=0.56999, Rule = Not A ^ D ^ C --> F , Not A BEFORE C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00703, std=0.57784, Rule = A ^ D ^ C --> F , A BEFORE C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00697, std=0.22098, Rule = Not B ^ D ^ C --> F , Not B EQUAL F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00686, std=0.30697, Rule = Not E ^ D ^ C --> F , Not E BEFORE D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00595, std=0.28675, Rule = Not A ^ D ^ C --> F , Not A BEFORE D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00569, std=0.62529, Rule = Not B ^ D ^ C --> F , Not B BEFORE C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00565, std=0.15522, Rule = E ^ D ^ C --> F , E EQUAL D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00498, std=0.31067, Rule = Not B ^ D ^ C --> F , Not B BEFORE D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00493, std=0.22710, Rule = E ^ D ^ C --> F , E EQUAL C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00457, std=0.21342, Rule = E ^ D ^ C --> F , E EQUAL F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00232, std=0.32468, Rule = E ^ D ^ C --> F , E BEFORE D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00133, std=0.29241, Rule = A ^ D ^ C --> F , A BEFORE D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00119, std=0.11555, Rule = Not A ^ D ^ C --> F , Not A EQUAL D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00098, std=0.31912, Rule = B ^ D ^ C --> F , B BEFORE D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00098, std=0.14198, Rule = B ^ D ^ C --> F , B EQUAL D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00038, std=0.63962, Rule = Not E ^ D ^ C --> F , Not E BEFORE F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00000, std=0.14327, Rule = A ^ D ^ C --> F , A EQUAL D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00032, std=0.24129, Rule = Not A ^ D ^ C --> F , Not A EQUAL F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00048, std=0.61284, Rule = Not E ^ D ^ C --> F , Not E BEFORE C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00366, std=0.26209, Rule = A ^ D ^ C --> F , A EQUAL C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00403, std=0.28138, Rule = Not E ^ D ^ C --> F , Not E EQUAL C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00424, std=0.14761, Rule = Not B ^ D ^ C --> F , Not B EQUAL D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00461, std=0.69233, Rule = E ^ D ^ C --> F , E BEFORE F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00490, std=0.26534, Rule = Not E ^ D ^ C --> F , Not E EQUAL F ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00497, std=0.67887, Rule = E ^ D ^ C --> F , E BEFORE C ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00518, std=0.14476, Rule = Not E ^ D ^ C --> F , Not E EQUAL D ^ D BEFORE C ^ C EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.01162, std=0.20756, Rule = A ^ D ^ C --> F , A EQUAL F ^ D BEFORE C ^ C EQUAL F
-------------
best gain 0.016940492091847906 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: B ^ C --> F , B EQUAL F ^ C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 35 candidate rules.
[multiprocess log-grad] Elapsed: 3.4198 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.05083, std=0.75489, Rule = D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05064, std=0.71404, Rule = Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04985, std=0.74646, Rule = D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04705, std=0.69128, Rule = Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03585, std=0.63861, Rule = Not A ^ B ^ C --> F , Not A BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03203, std=0.61144, Rule = Not A ^ B ^ C --> F , Not A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03099, std=0.64893, Rule = A ^ B ^ C --> F , A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02449, std=0.33101, Rule = Not D ^ B ^ C --> F , Not D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01890, std=0.34929, Rule = Not A ^ B ^ C --> F , Not A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01625, std=0.78868, Rule = E ^ B ^ C --> F , E BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01615, std=0.38943, Rule = D ^ B ^ C --> F , D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01480, std=0.23377, Rule = E ^ B ^ C --> F , E EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01395, std=0.34656, Rule = A ^ B ^ C --> F , A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01313, std=0.79316, Rule = Not E ^ B ^ C --> F , Not E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01136, std=0.29138, Rule = A ^ B ^ C --> F , A EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01127, std=0.81801, Rule = E ^ B ^ C --> F , E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00983, std=0.26617, Rule = E ^ B ^ C --> F , E EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00948, std=0.76859, Rule = Not E ^ B ^ C --> F , Not E BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00811, std=0.21106, Rule = A ^ B ^ C --> F , A EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00785, std=0.24918, Rule = Not E ^ B ^ C --> F , Not E EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00780, std=0.16208, Rule = Not E ^ B ^ C --> F , Not E EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00764, std=0.20217, Rule = D ^ B ^ C --> F , D EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00714, std=0.43551, Rule = E ^ B ^ C --> F , E BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00601, std=0.41179, Rule = Not E ^ B ^ C --> F , Not E BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00574, std=0.18471, Rule = E ^ B ^ C --> F , E EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00420, std=0.21512, Rule = Not E ^ B ^ C --> F , Not E EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00216, std=0.17008, Rule = A ^ B ^ C --> F , A EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00158, std=0.17040, Rule = Not D ^ B ^ C --> F , Not D EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00020, std=0.29359, Rule = Not D ^ B ^ C --> F , Not D EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00062, std=0.27805, Rule = D ^ B ^ C --> F , D EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00115, std=0.15731, Rule = Not A ^ B ^ C --> F , Not A EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00160, std=0.29421, Rule = D ^ B ^ C --> F , D EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00339, std=0.29932, Rule = Not D ^ B ^ C --> F , Not D EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00383, std=0.28530, Rule = Not A ^ B ^ C --> F , Not A EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00765, std=0.29429, Rule = Not A ^ B ^ C --> F , Not A EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
Best rule is: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.05083391564675879
new rule added.
Best rule is: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.0506389363140926
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1334
Rule0: C --> F , C BEFORE F, weight=0.0752
Rule1: Not C --> F , Not C BEFORE F, weight=0.4602
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1611
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0273
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1332
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0515
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0450
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5471
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0603
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0168
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0382
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.1985
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0486
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2959
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.2093
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=0.0303
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1681
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0300
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0475
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.5191
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0242
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.0988
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0220
Rule23: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0295
Rule24: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0247
Rule25: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.0100
Rule26: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 4.5272 min.
[1 th iter] Elapsed: 2.9940 min.
[2 th iter] Elapsed: 2.8851 min.
3 th iter
grad norm=0.00982251871466351. num_batch_no_update =5
Head = F, base = 0.1286
Rule0: C --> F , C BEFORE F, weight=0.0673
Rule1: Not C --> F , Not C BEFORE F, weight=0.4643
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1492
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight=0.0012
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1288
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0467
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0396
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5463
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0535
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight=0.0034
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0325
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.1558
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0488
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2893
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1958
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight=-0.0001
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1385
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0200
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0350
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.5856
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0283
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1029
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0142
Rule23: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0443
Rule24: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0349
Rule25: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.0776
Rule26: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.0953
[3 th iter] Elapsed: 2.7808 min.
[4 th iter] Elapsed: 55.9477 sec.
Run 65 batches
grad norm 0.0025926398973228765 <= epsilon 0.003. OR, num_batch_no_update 25 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.1425603811208065
Params  [tensor([0.1296], dtype=torch.float64, requires_grad=True), tensor([0.0705], dtype=torch.float64, requires_grad=True), tensor([0.4792], dtype=torch.float64, requires_grad=True), tensor([0.1552], dtype=torch.float64, requires_grad=True), tensor([-0.0027], dtype=torch.float64, requires_grad=True), tensor([0.1323], dtype=torch.float64, requires_grad=True), tensor([0.0512], dtype=torch.float64, requires_grad=True), tensor([0.0497], dtype=torch.float64, requires_grad=True), tensor([0.5518], dtype=torch.float64, requires_grad=True), tensor([0.0606], dtype=torch.float64, requires_grad=True), tensor([0.0101], dtype=torch.float64, requires_grad=True), tensor([0.0343], dtype=torch.float64, requires_grad=True), tensor([0.1306], dtype=torch.float64, requires_grad=True), tensor([0.0552], dtype=torch.float64, requires_grad=True), tensor([0.2813], dtype=torch.float64, requires_grad=True), tensor([0.1843], dtype=torch.float64, requires_grad=True), tensor([-0.0022], dtype=torch.float64, requires_grad=True), tensor([0.1311], dtype=torch.float64, requires_grad=True), tensor([0.0092], dtype=torch.float64, requires_grad=True), tensor([0.0217], dtype=torch.float64, requires_grad=True), tensor([0.5937], dtype=torch.float64, requires_grad=True), tensor([0.0318], dtype=torch.float64, requires_grad=True), tensor([0.1040], dtype=torch.float64, requires_grad=True), tensor([0.0125], dtype=torch.float64, requires_grad=True), tensor([0.0450], dtype=torch.float64, requires_grad=True), tensor([0.0322], dtype=torch.float64, requires_grad=True), tensor([0.0914], dtype=torch.float64, requires_grad=True), tensor([0.1094], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 14.1208 min.
Update Log-likelihood (torch)=  -5.1425603811208065
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1342,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0707.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4735.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1533.
Rule3: B ^ Not C --> F , B EQUAL F ^ Not C BEFORE F, weight(torch)=-0.0008.
Rule4: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1268.
Rule5: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0505.
Rule6: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0474.
Rule7: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5503.
Rule8: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0598.
Rule9: D ^ C --> F , D BEFORE F ^ C BEFORE F, weight(torch)=0.0065.
Rule10: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0320.
Rule11: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.1429.
Rule12: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0530.
Rule13: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2823.
Rule14: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1867.
Rule15: A ^ B --> F , A BEFORE F ^ B EQUAL F, weight(torch)=0.0004.
Rule16: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1344.
Rule17: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0143.
Rule18: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0280.
Rule19: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.5915.
Rule20: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0319.
Rule21: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1001.
Rule22: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0130.
Rule23: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0421.
Rule24: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0313.
Rule25: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0851.
Rule26: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1024.
delete these rules: [3, 9, 15]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1342
Rule0: C --> F , C BEFORE F, weight=0.0707
Rule1: Not C --> F , Not C BEFORE F, weight=0.4735
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1533
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1268
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0505
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0474
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5503
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0598
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0320
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.1429
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0530
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2823
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1867
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1344
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0143
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0280
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.5915
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0319
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1001
Rule19: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0130
Rule20: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0421
Rule21: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0313
Rule22: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.0851
Rule23: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1024
[0 th iter] Elapsed: 2.6482 min.
[1 th iter] Elapsed: 2.6342 min.
[2 th iter] Elapsed: 2.5265 min.
3 th iter
grad norm=0.006513401027463104. num_batch_no_update =4
Head = F, base = 0.1369
Rule0: C --> F , C BEFORE F, weight=0.0732
Rule1: Not C --> F , Not C BEFORE F, weight=0.4947
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1529
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1362
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0515
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0467
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5595
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0654
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0412
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0997
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0583
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2735
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1680
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1236
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0012
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0126
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6109
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0384
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1081
Rule19: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0155
Rule20: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0619
Rule21: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0432
Rule22: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1004
Rule23: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1238
[3 th iter] Elapsed: 2.5029 min.
[4 th iter] Elapsed: 2.4851 min.
Run 75 batches
reach max iter num.
grad norm=0.00836912081799489. num_batch_no_update =34
Finish optimize_log_likelihood, the log likelihood is -5.137010341553358
Params  [tensor([0.1311], dtype=torch.float64, requires_grad=True), tensor([0.0701], dtype=torch.float64, requires_grad=True), tensor([0.5024], dtype=torch.float64, requires_grad=True), tensor([0.1478], dtype=torch.float64, requires_grad=True), tensor([0.1298], dtype=torch.float64, requires_grad=True), tensor([0.0469], dtype=torch.float64, requires_grad=True), tensor([0.0460], dtype=torch.float64, requires_grad=True), tensor([0.5595], dtype=torch.float64, requires_grad=True), tensor([0.0621], dtype=torch.float64, requires_grad=True), tensor([0.0376], dtype=torch.float64, requires_grad=True), tensor([0.0884], dtype=torch.float64, requires_grad=True), tensor([0.0421], dtype=torch.float64, requires_grad=True), tensor([0.2807], dtype=torch.float64, requires_grad=True), tensor([0.1694], dtype=torch.float64, requires_grad=True), tensor([0.1267], dtype=torch.float64, requires_grad=True), tensor([-0.0011], dtype=torch.float64, requires_grad=True), tensor([0.0117], dtype=torch.float64, requires_grad=True), tensor([0.6375], dtype=torch.float64, requires_grad=True), tensor([0.0385], dtype=torch.float64, requires_grad=True), tensor([0.1134], dtype=torch.float64, requires_grad=True), tensor([0.0143], dtype=torch.float64, requires_grad=True), tensor([0.0814], dtype=torch.float64, requires_grad=True), tensor([0.0561], dtype=torch.float64, requires_grad=True), tensor([0.1346], dtype=torch.float64, requires_grad=True), tensor([0.1526], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 12.7989 min.
update Log-likelihood (torch)=  -5.137010341553358
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1333,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0641.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.4925.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1458.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1314.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0401.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0386.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5564.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0602.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0308.
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.0950.
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0413.
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2749.
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1660.
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1294.
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0019.
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0156.
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6332.
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0349.
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1146.
Rule19: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0140.
Rule20: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0724.
Rule21: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0486.
Rule22: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1295.
Rule23: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1476.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 33 candidate rules.
[multiprocess log-grad] Elapsed: 3.7308 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02296, std=0.82193, Rule = D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02081, std=0.76493, Rule = Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02071, std=0.68052, Rule = Not A ^ B ^ C --> F , Not A BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01758, std=0.65182, Rule = Not A ^ B ^ C --> F , Not A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01396, std=0.69916, Rule = A ^ B ^ C --> F , A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01306, std=0.24136, Rule = E ^ B ^ C --> F , E EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01176, std=0.36755, Rule = Not D ^ B ^ C --> F , Not D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01028, std=0.37753, Rule = Not A ^ B ^ C --> F , Not A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00751, std=0.27516, Rule = E ^ B ^ C --> F , E EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00743, std=0.32950, Rule = A ^ B ^ C --> F , A EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00576, std=0.16498, Rule = Not E ^ B ^ C --> F , Not E EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00514, std=0.26308, Rule = Not E ^ B ^ C --> F , Not E EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00444, std=0.23917, Rule = A ^ B ^ C --> F , A EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00420, std=0.37163, Rule = A ^ B ^ C --> F , A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00354, std=0.21334, Rule = D ^ B ^ C --> F , D EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00336, std=0.19132, Rule = E ^ B ^ C --> F , E EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00192, std=0.23046, Rule = Not E ^ B ^ C --> F , Not E EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00151, std=0.17414, Rule = A ^ B ^ C --> F , A EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00127, std=0.44587, Rule = D ^ B ^ C --> F , D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00165, std=0.83365, Rule = E ^ B ^ C --> F , E BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00311, std=0.18594, Rule = Not D ^ B ^ C --> F , Not D EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00328, std=0.16877, Rule = Not A ^ B ^ C --> F , Not A EQUAL C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00362, std=0.30723, Rule = D ^ B ^ C --> F , D EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00395, std=0.46497, Rule = E ^ B ^ C --> F , E BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00428, std=0.44233, Rule = Not E ^ B ^ C --> F , Not E BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00444, std=0.31671, Rule = Not D ^ B ^ C --> F , Not D EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00484, std=0.83933, Rule = Not E ^ B ^ C --> F , Not E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00505, std=0.29567, Rule = D ^ B ^ C --> F , D EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00613, std=0.31993, Rule = Not D ^ B ^ C --> F , Not D EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00720, std=0.86474, Rule = E ^ B ^ C --> F , E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00738, std=0.31003, Rule = Not A ^ B ^ C --> F , Not A EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00806, std=0.81519, Rule = Not E ^ B ^ C --> F , Not E BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01051, std=0.31697, Rule = Not A ^ B ^ C --> F , Not A EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
Best rule is: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.022964075828827847
new rule added.
Best rule is: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.020806388153716375
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1333
Rule0: C --> F , C BEFORE F, weight=0.0641
Rule1: Not C --> F , Not C BEFORE F, weight=0.4925
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1458
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1314
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0401
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0386
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5564
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0602
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0308
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0950
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0413
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2749
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1660
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1294
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0019
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0156
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6332
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0349
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1146
Rule19: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight=0.0140
Rule20: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0724
Rule21: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0486
Rule22: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1295
Rule23: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1476
Rule24: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0100
Rule25: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 4.5256 min.
[1 th iter] Elapsed: 2.8273 min.
[2 th iter] Elapsed: 1.4658 min.
Run 38 batches
grad norm 0.002887765604248186 <= epsilon 0.003. OR, num_batch_no_update 37 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.130223149001584
Params  [tensor([0.1354], dtype=torch.float64, requires_grad=True), tensor([0.0703], dtype=torch.float64, requires_grad=True), tensor([0.5039], dtype=torch.float64, requires_grad=True), tensor([0.1362], dtype=torch.float64, requires_grad=True), tensor([0.1315], dtype=torch.float64, requires_grad=True), tensor([0.0461], dtype=torch.float64, requires_grad=True), tensor([0.0444], dtype=torch.float64, requires_grad=True), tensor([0.5507], dtype=torch.float64, requires_grad=True), tensor([0.0615], dtype=torch.float64, requires_grad=True), tensor([0.0290], dtype=torch.float64, requires_grad=True), tensor([0.0505], dtype=torch.float64, requires_grad=True), tensor([0.0509], dtype=torch.float64, requires_grad=True), tensor([0.2821], dtype=torch.float64, requires_grad=True), tensor([0.1617], dtype=torch.float64, requires_grad=True), tensor([0.1093], dtype=torch.float64, requires_grad=True), tensor([0.0056], dtype=torch.float64, requires_grad=True), tensor([0.0064], dtype=torch.float64, requires_grad=True), tensor([0.6386], dtype=torch.float64, requires_grad=True), tensor([0.0288], dtype=torch.float64, requires_grad=True), tensor([0.1242], dtype=torch.float64, requires_grad=True), tensor([0.0062], dtype=torch.float64, requires_grad=True), tensor([0.0715], dtype=torch.float64, requires_grad=True), tensor([0.0448], dtype=torch.float64, requires_grad=True), tensor([0.1377], dtype=torch.float64, requires_grad=True), tensor([0.1444], dtype=torch.float64, requires_grad=True), tensor([0.0264], dtype=torch.float64, requires_grad=True), tensor([0.0214], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 8.8198 min.
Update Log-likelihood (torch)=  -5.130223149001584
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1339,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0677.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5031.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1387.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1358.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0490.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0461.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5477.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0595.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0253.
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.0650.
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0503.
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2893.
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1686.
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.1176.
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0137.
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0158.
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6412.
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0308.
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1199.
Rule19: Not D ^ A ^ C --> F , Not D BEFORE C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0055.
Rule20: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0731.
Rule21: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0483.
Rule22: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1401.
Rule23: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1478.
Rule24: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0270.
Rule25: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0248.
delete these rules: [19]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1339
Rule0: C --> F , C BEFORE F, weight=0.0677
Rule1: Not C --> F , Not C BEFORE F, weight=0.5031
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1387
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1358
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0490
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0461
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5477
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0595
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0253
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0650
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0503
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2893
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1686
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.1176
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0137
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0158
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6412
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0308
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1199
Rule19: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0731
Rule20: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0483
Rule21: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1401
Rule22: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1478
Rule23: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0270
Rule24: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0248
[0 th iter] Elapsed: 2.7342 min.
[1 th iter] Elapsed: 2.7971 min.
[2 th iter] Elapsed: 2.6642 min.
3 th iter
grad norm=0.006522054660637959. num_batch_no_update =44
Head = F, base = 0.1324
Rule0: C --> F , C BEFORE F, weight=0.0543
Rule1: Not C --> F , Not C BEFORE F, weight=0.5022
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1239
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1273
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0458
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0470
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5490
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0704
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0280
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=0.0145
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0493
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2836
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1484
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0946
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0132
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0117
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6555
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0477
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1278
Rule19: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0764
Rule20: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0387
Rule21: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1543
Rule22: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1624
Rule23: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0221
Rule24: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0352
[3 th iter] Elapsed: 2.7669 min.
[4 th iter] Elapsed: 2.7604 min.
Run 75 batches
reach max iter num.
grad norm=0.011046532666026981. num_batch_no_update =74
Finish optimize_log_likelihood, the log likelihood is -5.156006808273524
Params  [tensor([0.1307], dtype=torch.float64, requires_grad=True), tensor([0.0680], dtype=torch.float64, requires_grad=True), tensor([0.5205], dtype=torch.float64, requires_grad=True), tensor([0.1252], dtype=torch.float64, requires_grad=True), tensor([0.1319], dtype=torch.float64, requires_grad=True), tensor([0.0425], dtype=torch.float64, requires_grad=True), tensor([0.0476], dtype=torch.float64, requires_grad=True), tensor([0.5578], dtype=torch.float64, requires_grad=True), tensor([0.0742], dtype=torch.float64, requires_grad=True), tensor([0.0338], dtype=torch.float64, requires_grad=True), tensor([-0.0024], dtype=torch.float64, requires_grad=True), tensor([0.0492], dtype=torch.float64, requires_grad=True), tensor([0.2989], dtype=torch.float64, requires_grad=True), tensor([0.1599], dtype=torch.float64, requires_grad=True), tensor([0.0852], dtype=torch.float64, requires_grad=True), tensor([0.0023], dtype=torch.float64, requires_grad=True), tensor([0.0025], dtype=torch.float64, requires_grad=True), tensor([0.6599], dtype=torch.float64, requires_grad=True), tensor([0.0401], dtype=torch.float64, requires_grad=True), tensor([0.1290], dtype=torch.float64, requires_grad=True), tensor([0.0901], dtype=torch.float64, requires_grad=True), tensor([0.0493], dtype=torch.float64, requires_grad=True), tensor([0.1554], dtype=torch.float64, requires_grad=True), tensor([0.1636], dtype=torch.float64, requires_grad=True), tensor([0.0276], dtype=torch.float64, requires_grad=True), tensor([0.0344], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 13.7243 min.
update Log-likelihood (torch)=  -5.156006808273524
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1255,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0590.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5094.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1184.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1356.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0375.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0416.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5490.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0686.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0293.
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=-0.0000.
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0463.
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2918.
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1552.
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0881.
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0041.
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0030.
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6592.
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0366.
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1258.
Rule19: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0814.
Rule20: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0421.
Rule21: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1572.
Rule22: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1652.
Rule23: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0276.
Rule24: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0364.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 12 candidate rules.
[multiprocess log-grad] Elapsed: 2.0757 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.03405, std=0.66080, Rule = Not A ^ B ^ C --> F , Not A BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03004, std=0.63220, Rule = Not A ^ B ^ C --> F , Not A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02899, std=0.67530, Rule = A ^ B ^ C --> F , A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01707, std=0.35782, Rule = Not D ^ B ^ C --> F , Not D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01653, std=0.79796, Rule = E ^ B ^ C --> F , E BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01593, std=0.36580, Rule = Not A ^ B ^ C --> F , Not A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01469, std=0.23910, Rule = E ^ B ^ C --> F , E EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01302, std=0.80429, Rule = Not E ^ B ^ C --> F , Not E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01228, std=0.82850, Rule = E ^ B ^ C --> F , E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01147, std=0.35935, Rule = A ^ B ^ C --> F , A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01109, std=0.31757, Rule = A ^ B ^ C --> F , A EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00834, std=0.43078, Rule = D ^ B ^ C --> F , D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
Best rule is: Not A ^ B ^ C --> F , Not A BEFORE F ^ B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03405014876860481
new rule added.
Best rule is: Not A ^ B ^ C --> F , Not A BEFORE B ^ B EQUAL F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.03003691141016864
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1255
Rule0: C --> F , C BEFORE F, weight=0.0590
Rule1: Not C --> F , Not C BEFORE F, weight=0.5094
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1184
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1356
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0375
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0416
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5490
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0686
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0293
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight=-0.0000
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0463
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2918
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1552
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0881
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight=0.0041
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight=0.0030
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6592
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0366
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1258
Rule19: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0814
Rule20: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0421
Rule21: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1572
Rule22: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1652
Rule23: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0276
Rule24: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0364
Rule25: Not A ^ B ^ C --> F , Not A BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.0100
Rule26: Not A ^ B ^ C --> F , Not A BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 4.6819 min.
[1 th iter] Elapsed: 1.0017 min.
Run 20 batches
grad norm 0.0021578343892385333 <= epsilon 0.003. OR, num_batch_no_update 19 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.169119692590834
Params  [tensor([0.1282], dtype=torch.float64, requires_grad=True), tensor([0.0534], dtype=torch.float64, requires_grad=True), tensor([0.5084], dtype=torch.float64, requires_grad=True), tensor([0.1172], dtype=torch.float64, requires_grad=True), tensor([0.1055], dtype=torch.float64, requires_grad=True), tensor([0.0326], dtype=torch.float64, requires_grad=True), tensor([0.0355], dtype=torch.float64, requires_grad=True), tensor([0.5531], dtype=torch.float64, requires_grad=True), tensor([0.0717], dtype=torch.float64, requires_grad=True), tensor([0.0218], dtype=torch.float64, requires_grad=True), tensor([-0.0024], dtype=torch.float64, requires_grad=True), tensor([0.0515], dtype=torch.float64, requires_grad=True), tensor([0.2787], dtype=torch.float64, requires_grad=True), tensor([0.1496], dtype=torch.float64, requires_grad=True), tensor([0.0763], dtype=torch.float64, requires_grad=True), tensor([-0.0005], dtype=torch.float64, requires_grad=True), tensor([-0.0003], dtype=torch.float64, requires_grad=True), tensor([0.6566], dtype=torch.float64, requires_grad=True), tensor([0.0412], dtype=torch.float64, requires_grad=True), tensor([0.1448], dtype=torch.float64, requires_grad=True), tensor([0.0723], dtype=torch.float64, requires_grad=True), tensor([0.0414], dtype=torch.float64, requires_grad=True), tensor([0.1582], dtype=torch.float64, requires_grad=True), tensor([0.1648], dtype=torch.float64, requires_grad=True), tensor([0.0292], dtype=torch.float64, requires_grad=True), tensor([0.0341], dtype=torch.float64, requires_grad=True), tensor([0.0070], dtype=torch.float64, requires_grad=True), tensor([0.0058], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 5.6849 min.
Update Log-likelihood (torch)=  -5.169119692590834
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1266,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0585.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5118.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1234.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1166.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0381.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0418.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5566.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0754.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0286.
Rule9: B ^ C --> F , B EQUAL F ^ C BEFORE F, weight(torch)=0.0050.
Rule10: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0558.
Rule11: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2774.
Rule12: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1506.
Rule13: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0819.
Rule14: Not D ^ B --> F , Not D BEFORE F ^ B EQUAL F, weight(torch)=0.0057.
Rule15: Not D ^ B --> F , Not D BEFORE B ^ B EQUAL F, weight(torch)=0.0029.
Rule16: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6569.
Rule17: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0454.
Rule18: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1469.
Rule19: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0686.
Rule20: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0405.
Rule21: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1613.
Rule22: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1694.
Rule23: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0313.
Rule24: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0388.
Rule25: Not A ^ B ^ C --> F , Not A BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0090.
Rule26: Not A ^ B ^ C --> F , Not A BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0088.
delete these rules: [9, 14, 15, 25, 26]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1266
Rule0: C --> F , C BEFORE F, weight=0.0585
Rule1: Not C --> F , Not C BEFORE F, weight=0.5118
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1234
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1166
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0381
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0418
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5566
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0754
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0286
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0558
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2774
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1506
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0819
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6569
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0454
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1469
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0686
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0405
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1613
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1694
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0313
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0388
[0 th iter] Elapsed: 2.4163 min.
[1 th iter] Elapsed: 2.5436 min.
Run 30 batches
grad norm 0.002226781434231494 <= epsilon 0.003. OR, num_batch_no_update 19 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.151042426108706
Params  [tensor([0.1347], dtype=torch.float64, requires_grad=True), tensor([0.0624], dtype=torch.float64, requires_grad=True), tensor([0.5254], dtype=torch.float64, requires_grad=True), tensor([0.1275], dtype=torch.float64, requires_grad=True), tensor([0.1209], dtype=torch.float64, requires_grad=True), tensor([0.0388], dtype=torch.float64, requires_grad=True), tensor([0.0441], dtype=torch.float64, requires_grad=True), tensor([0.5537], dtype=torch.float64, requires_grad=True), tensor([0.0720], dtype=torch.float64, requires_grad=True), tensor([0.0270], dtype=torch.float64, requires_grad=True), tensor([0.0569], dtype=torch.float64, requires_grad=True), tensor([0.2904], dtype=torch.float64, requires_grad=True), tensor([0.1605], dtype=torch.float64, requires_grad=True), tensor([0.0792], dtype=torch.float64, requires_grad=True), tensor([0.6579], dtype=torch.float64, requires_grad=True), tensor([0.0414], dtype=torch.float64, requires_grad=True), tensor([0.1288], dtype=torch.float64, requires_grad=True), tensor([0.0802], dtype=torch.float64, requires_grad=True), tensor([0.0501], dtype=torch.float64, requires_grad=True), tensor([0.1605], dtype=torch.float64, requires_grad=True), tensor([0.1762], dtype=torch.float64, requires_grad=True), tensor([0.0315], dtype=torch.float64, requires_grad=True), tensor([0.0409], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 4.9617 min.
update Log-likelihood (torch)=  -5.151042426108706
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1301,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0626.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5224.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1249.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1276.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0379.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0431.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5520.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0713.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0284.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0599.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2869.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1577.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0825.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6591.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0421.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1250.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0719.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0433.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1608.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1745.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0301.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0395.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 9 candidate rules.
[multiprocess log-grad] Elapsed: 1.2940 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01891, std=0.69753, Rule = A ^ B ^ C --> F , A BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01301, std=0.24349, Rule = E ^ B ^ C --> F , E EQUAL F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01209, std=0.36969, Rule = Not D ^ B ^ C --> F , Not D BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01162, std=0.37700, Rule = Not A ^ B ^ C --> F , Not A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00880, std=0.32912, Rule = A ^ B ^ C --> F , A EQUAL B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00640, std=0.37007, Rule = A ^ B ^ C --> F , A BEFORE C ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00413, std=0.82470, Rule = E ^ B ^ C --> F , E BEFORE B ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00046, std=0.82993, Rule = Not E ^ B ^ C --> F , Not E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00088, std=0.85613, Rule = E ^ B ^ C --> F , E BEFORE F ^ B EQUAL F ^ C BEFORE F
-------------
best gain 0.01890828223832348 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.5839 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02654, std=0.37051, Rule = Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01832, std=0.37472, Rule = A ^ Not D ^ Not C --> F , A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01687, std=0.47535, Rule = E ^ Not D ^ Not C --> F , E BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01648, std=0.27336, Rule = Not A ^ Not D ^ Not C --> F , Not A BEFORE Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01494, std=0.42790, Rule = Not E ^ Not D ^ Not C --> F , Not E BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01426, std=0.28075, Rule = Not A ^ Not D ^ Not C --> F , Not A BEFORE Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01265, std=0.43979, Rule = Not B ^ Not D ^ Not C --> F , Not B BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01236, std=0.30975, Rule = Not B ^ Not D ^ Not C --> F , Not B BEFORE Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01142, std=0.32042, Rule = Not B ^ Not D ^ Not C --> F , Not B BEFORE Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00977, std=0.29140, Rule = A ^ Not D ^ Not C --> F , A BEFORE Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00871, std=0.32703, Rule = B ^ Not D ^ Not C --> F , B BEFORE Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00809, std=0.29520, Rule = A ^ Not D ^ Not C --> F , A BEFORE Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00733, std=0.13588, Rule = E ^ Not D ^ Not C --> F , E EQUAL Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00716, std=0.34124, Rule = B ^ Not D ^ Not C --> F , B BEFORE Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00683, std=0.34044, Rule = Not E ^ Not D ^ Not C --> F , Not E BEFORE Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00682, std=0.42767, Rule = B ^ Not D ^ Not C --> F , B BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00641, std=0.38779, Rule = E ^ Not D ^ Not C --> F , E BEFORE Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00476, std=0.34066, Rule = Not E ^ Not D ^ Not C --> F , Not E BEFORE Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00345, std=0.37306, Rule = E ^ Not D ^ Not C --> F , E BEFORE Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00243, std=0.14706, Rule = Not E ^ Not D ^ Not C --> F , Not E EQUAL Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00233, std=0.19937, Rule = B ^ Not D ^ Not C --> F , B EQUAL F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00123, std=0.14468, Rule = Not A ^ Not D ^ Not C --> F , Not A EQUAL Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00064, std=0.13409, Rule = Not A ^ Not D ^ Not C --> F , Not A EQUAL F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00028, std=0.14116, Rule = Not A ^ Not D ^ Not C --> F , Not A EQUAL Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00051, std=0.14863, Rule = E ^ Not D ^ Not C --> F , E EQUAL F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00051, std=0.13779, Rule = A ^ Not D ^ Not C --> F , A EQUAL Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00085, std=0.14308, Rule = E ^ Not D ^ Not C --> F , E EQUAL Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00141, std=0.16203, Rule = Not E ^ Not D ^ Not C --> F , Not E EQUAL Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00217, std=0.16089, Rule = A ^ Not D ^ Not C --> F , A EQUAL Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00256, std=0.14996, Rule = Not B ^ Not D ^ Not C --> F , Not B EQUAL F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00317, std=0.13754, Rule = Not E ^ Not D ^ Not C --> F , Not E EQUAL F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00434, std=0.15866, Rule = B ^ Not D ^ Not C --> F , B EQUAL Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00445, std=0.19535, Rule = Not B ^ Not D ^ Not C --> F , Not B EQUAL Not D ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00473, std=0.15323, Rule = A ^ Not D ^ Not C --> F , A EQUAL F ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00552, std=0.21411, Rule = Not B ^ Not D ^ Not C --> F , Not B EQUAL Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00782, std=0.17290, Rule = B ^ Not D ^ Not C --> F , B EQUAL Not C ^ Not D EQUAL Not C ^ Not C BEFORE F
-------------
Best rule is: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.02654118085761683
new rule added.
best gain 0.018318724854365694 does not meet thershold 0.02.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1301
Rule0: C --> F , C BEFORE F, weight=0.0626
Rule1: Not C --> F , Not C BEFORE F, weight=0.5224
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1249
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1276
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0379
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0431
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5520
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0713
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0284
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0599
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2869
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1577
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0825
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6591
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0421
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1250
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0719
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0433
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1608
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1745
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0301
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0395
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 3.3813 min.
[1 th iter] Elapsed: 1.3095 min.
Run 23 batches
grad norm 0.002528090985519726 <= epsilon 0.003. OR, num_batch_no_update 22 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.189441141461912
Params  [tensor([0.1282], dtype=torch.float64, requires_grad=True), tensor([0.0518], dtype=torch.float64, requires_grad=True), tensor([0.5203], dtype=torch.float64, requires_grad=True), tensor([0.1199], dtype=torch.float64, requires_grad=True), tensor([0.1329], dtype=torch.float64, requires_grad=True), tensor([0.0334], dtype=torch.float64, requires_grad=True), tensor([0.0384], dtype=torch.float64, requires_grad=True), tensor([0.5506], dtype=torch.float64, requires_grad=True), tensor([0.0637], dtype=torch.float64, requires_grad=True), tensor([0.0207], dtype=torch.float64, requires_grad=True), tensor([0.0580], dtype=torch.float64, requires_grad=True), tensor([0.2890], dtype=torch.float64, requires_grad=True), tensor([0.1597], dtype=torch.float64, requires_grad=True), tensor([0.0853], dtype=torch.float64, requires_grad=True), tensor([0.6612], dtype=torch.float64, requires_grad=True), tensor([0.0382], dtype=torch.float64, requires_grad=True), tensor([0.1293], dtype=torch.float64, requires_grad=True), tensor([0.0783], dtype=torch.float64, requires_grad=True), tensor([0.0475], dtype=torch.float64, requires_grad=True), tensor([0.1617], dtype=torch.float64, requires_grad=True), tensor([0.1790], dtype=torch.float64, requires_grad=True), tensor([0.0325], dtype=torch.float64, requires_grad=True), tensor([0.0431], dtype=torch.float64, requires_grad=True), tensor([0.0500], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 4.6922 min.
Update Log-likelihood (torch)=  -5.189441141461912
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1268,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0579.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5210.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1228.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1306.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0323.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0408.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5530.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0653.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0283.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0647.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2884.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1601.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0914.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6621.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0399.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1320.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0746.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0444.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1681.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1857.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0391.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0516.
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0288.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 5.8464 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.06243, std=2.22940, Rule = E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.05790, std=2.27572, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.04443, std=2.09035, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.03460, std=2.10913, Rule = D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02260, std=1.15109, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02206, std=1.98711, Rule = B ^ A ^ Not C --> F , B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02003, std=1.06804, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01804, std=0.37704, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01794, std=1.08532, Rule = D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01726, std=2.06334, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01655, std=1.15544, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01630, std=0.51219, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01576, std=0.41563, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01329, std=0.74226, Rule = B ^ A ^ Not C --> F , B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01107, std=1.17463, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01089, std=1.18517, Rule = B ^ A ^ Not C --> F , B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00892, std=1.02693, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00846, std=0.41552, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00719, std=1.12852, Rule = B ^ A ^ Not C --> F , B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00660, std=0.44944, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00539, std=0.62022, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00511, std=0.53604, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00494, std=0.39197, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00181, std=0.51568, Rule = E ^ A ^ Not C --> F , E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00103, std=1.20259, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00002, std=1.10030, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00084, std=0.45193, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00163, std=0.57547, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00259, std=0.44081, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00453, std=0.58477, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00653, std=0.45633, Rule = B ^ A ^ Not C --> F , B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00665, std=1.17480, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00894, std=1.18569, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01130, std=0.56699, Rule = E ^ A ^ Not C --> F , E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01346, std=0.72413, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01740, std=0.61504, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
Best rule is: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.062426465163143846
new rule added.
Best rule is: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F
Best log-likelihood-grad(all-data) = 0.057904122233999565
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1268
Rule0: C --> F , C BEFORE F, weight=0.0579
Rule1: Not C --> F , Not C BEFORE F, weight=0.5210
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1228
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1306
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0323
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0408
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5530
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0653
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0283
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0647
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2884
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1601
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0914
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6621
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0399
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1320
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0746
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0444
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1681
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1857
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0391
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0516
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0288
Rule23: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
Rule24: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 7.6421 min.
[1 th iter] Elapsed: 4.8550 min.
[2 th iter] Elapsed: 5.0724 min.
3 th iter
grad norm=0.004168613994762238. num_batch_no_update =18
Head = F, base = 0.1274
Rule0: C --> F , C BEFORE F, weight=0.0585
Rule1: Not C --> F , Not C BEFORE F, weight=0.5289
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1217
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1175
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0332
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0415
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5607
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0697
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0189
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0620
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2827
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1486
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0703
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6665
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0376
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1243
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0814
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0293
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1611
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1761
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0339
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0375
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0624
Rule23: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0070
Rule24: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight=0.0049
[3 th iter] Elapsed: 4.7459 min.
[4 th iter] Elapsed: 19.2562 sec.
Run 61 batches
grad norm 0.002567790880783203 <= epsilon 0.003. OR, num_batch_no_update 34 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.129521510301175
Params  [tensor([0.1278], dtype=torch.float64, requires_grad=True), tensor([0.0621], dtype=torch.float64, requires_grad=True), tensor([0.5290], dtype=torch.float64, requires_grad=True), tensor([0.1141], dtype=torch.float64, requires_grad=True), tensor([0.0974], dtype=torch.float64, requires_grad=True), tensor([0.0316], dtype=torch.float64, requires_grad=True), tensor([0.0367], dtype=torch.float64, requires_grad=True), tensor([0.5650], dtype=torch.float64, requires_grad=True), tensor([0.0725], dtype=torch.float64, requires_grad=True), tensor([0.0272], dtype=torch.float64, requires_grad=True), tensor([0.0647], dtype=torch.float64, requires_grad=True), tensor([0.2857], dtype=torch.float64, requires_grad=True), tensor([0.1514], dtype=torch.float64, requires_grad=True), tensor([0.0676], dtype=torch.float64, requires_grad=True), tensor([0.6719], dtype=torch.float64, requires_grad=True), tensor([0.0392], dtype=torch.float64, requires_grad=True), tensor([0.1316], dtype=torch.float64, requires_grad=True), tensor([0.0907], dtype=torch.float64, requires_grad=True), tensor([0.0377], dtype=torch.float64, requires_grad=True), tensor([0.1612], dtype=torch.float64, requires_grad=True), tensor([0.1743], dtype=torch.float64, requires_grad=True), tensor([0.0345], dtype=torch.float64, requires_grad=True), tensor([0.0332], dtype=torch.float64, requires_grad=True), tensor([0.0606], dtype=torch.float64, requires_grad=True), tensor([0.0003], dtype=torch.float64, requires_grad=True), tensor([0.0005], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 22.6382 min.
Update Log-likelihood (torch)=  -5.129521510301175
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1298,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0620.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5304.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1198.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1082.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0327.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0395.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5644.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0738.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0245.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0644.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2862.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1518.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0675.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6690.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0381.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1272.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0872.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0348.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1594.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1734.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0323.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0334.
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0607.
Rule23: E ^ A ^ Not C --> F , E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0036.
Rule24: Not E ^ A ^ Not C --> F , Not E BEFORE F ^ A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0028.
delete these rules: [23, 24]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1298
Rule0: C --> F , C BEFORE F, weight=0.0620
Rule1: Not C --> F , Not C BEFORE F, weight=0.5304
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1198
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1082
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0327
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0395
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5644
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0738
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0245
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0644
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2862
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1518
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0675
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6690
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0381
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1272
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0872
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0348
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1594
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1734
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0323
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0334
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0607
[0 th iter] Elapsed: 4.2911 min.
[1 th iter] Elapsed: 2.4282 min.
[2 th iter] Elapsed: 2.4978 min.
3 th iter
grad norm=0.0041783678676230555. num_batch_no_update =43
Head = F, base = 0.1349
Rule0: C --> F , C BEFORE F, weight=0.0541
Rule1: Not C --> F , Not C BEFORE F, weight=0.5492
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1197
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0872
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0393
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0432
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5674
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0696
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0230
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0520
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2875
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1484
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0746
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6623
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0487
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1363
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0936
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0391
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1711
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1725
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0463
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0270
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0848
[3 th iter] Elapsed: 2.5911 min.
Run 60 batches
grad norm 0.0029337018123054693 <= epsilon 0.003. OR, num_batch_no_update 58 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.108160521307239
Params  [tensor([0.1286], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.5474], dtype=torch.float64, requires_grad=True), tensor([0.1087], dtype=torch.float64, requires_grad=True), tensor([0.0789], dtype=torch.float64, requires_grad=True), tensor([0.0357], dtype=torch.float64, requires_grad=True), tensor([0.0387], dtype=torch.float64, requires_grad=True), tensor([0.5585], dtype=torch.float64, requires_grad=True), tensor([0.0636], dtype=torch.float64, requires_grad=True), tensor([0.0262], dtype=torch.float64, requires_grad=True), tensor([0.0510], dtype=torch.float64, requires_grad=True), tensor([0.2772], dtype=torch.float64, requires_grad=True), tensor([0.1336], dtype=torch.float64, requires_grad=True), tensor([0.0740], dtype=torch.float64, requires_grad=True), tensor([0.6682], dtype=torch.float64, requires_grad=True), tensor([0.0352], dtype=torch.float64, requires_grad=True), tensor([0.1338], dtype=torch.float64, requires_grad=True), tensor([0.0859], dtype=torch.float64, requires_grad=True), tensor([0.0293], dtype=torch.float64, requires_grad=True), tensor([0.1776], dtype=torch.float64, requires_grad=True), tensor([0.1810], dtype=torch.float64, requires_grad=True), tensor([0.0539], dtype=torch.float64, requires_grad=True), tensor([0.0339], dtype=torch.float64, requires_grad=True), tensor([0.0954], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 11.8097 min.
update Log-likelihood (torch)=  -5.108160521307239
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1313,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0500.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5475.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1138.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0846.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0373.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0407.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5613.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0653.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0236.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0493.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2824.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1416.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0740.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6646.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0405.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1349.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0895.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0343.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1743.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1767.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0496.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0304.
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0883.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 3.8662 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01396, std=0.74199, Rule = B ^ A ^ Not C --> F , B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01345, std=0.37973, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01203, std=0.51606, Rule = D ^ A ^ Not C --> F , D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01131, std=0.42009, Rule = D ^ A ^ Not C --> F , D EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00926, std=2.11915, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00501, std=0.42078, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00422, std=0.62185, Rule = E ^ A ^ Not C --> F , E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00338, std=1.08236, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00296, std=1.17734, Rule = E ^ A ^ Not C --> F , E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00265, std=0.45089, Rule = D ^ A ^ Not C --> F , D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00143, std=0.39374, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00035, std=1.10102, Rule = D ^ A ^ Not C --> F , D BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00084, std=0.54855, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00228, std=1.18113, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00320, std=2.13755, Rule = D ^ A ^ Not C --> F , D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00325, std=0.52526, Rule = E ^ A ^ Not C --> F , E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00460, std=0.45640, Rule = B ^ A ^ Not C --> F , B EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00530, std=0.57969, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00746, std=1.20609, Rule = B ^ A ^ Not C --> F , B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00766, std=0.44790, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00958, std=0.59951, Rule = Not E ^ A ^ Not C --> F , Not E EQUAL A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01074, std=1.04212, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01099, std=0.46249, Rule = B ^ A ^ Not C --> F , B EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01296, std=1.20376, Rule = E ^ A ^ Not C --> F , E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01405, std=1.14719, Rule = B ^ A ^ Not C --> F , B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01634, std=2.01908, Rule = B ^ A ^ Not C --> F , B BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01706, std=0.57748, Rule = E ^ A ^ Not C --> F , E EQUAL Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01860, std=0.73699, Rule = Not D ^ A ^ Not C --> F , Not D EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01944, std=2.09071, Rule = Not D ^ A ^ Not C --> F , Not D BEFORE F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02102, std=1.11664, Rule = D ^ A ^ Not C --> F , D BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02188, std=1.23364, Rule = Not E ^ A ^ Not C --> F , Not E BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02207, std=0.62336, Rule = Not B ^ A ^ Not C --> F , Not B EQUAL F ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02369, std=1.19367, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE A ^ A BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02855, std=1.20527, Rule = Not B ^ A ^ Not C --> F , Not B BEFORE Not C ^ A BEFORE F ^ Not C BEFORE F
-------------
best gain 0.013959991696681396 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: D ^ B --> F , D BEFORE B ^ B EQUAL F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 35 candidate rules.
[multiprocess log-grad] Elapsed: 4.1401 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02969, std=0.73708, Rule = C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02895, std=0.70545, Rule = Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02533, std=0.75829, Rule = Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02276, std=0.87212, Rule = A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02271, std=0.78550, Rule = Not A ^ D ^ B --> F , Not A BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02124, std=0.73796, Rule = Not A ^ D ^ B --> F , Not A BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01873, std=0.78191, Rule = A ^ D ^ B --> F , A BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01680, std=0.35447, Rule = Not C ^ D ^ B --> F , Not C BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01600, std=0.39718, Rule = C ^ D ^ B --> F , C BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01310, std=0.26687, Rule = C ^ D ^ B --> F , C EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01260, std=0.37211, Rule = Not E ^ D ^ B --> F , Not E BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00926, std=0.40685, Rule = E ^ D ^ B --> F , E BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00903, std=0.35892, Rule = A ^ D ^ B --> F , A EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00773, std=0.37497, Rule = Not A ^ D ^ B --> F , Not A BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00732, std=0.20875, Rule = Not E ^ D ^ B --> F , Not E EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00680, std=0.17013, Rule = Not A ^ D ^ B --> F , Not A EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00661, std=0.38653, Rule = A ^ D ^ B --> F , A BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00622, std=0.33518, Rule = Not C ^ D ^ B --> F , Not C EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00615, std=0.24818, Rule = Not E ^ D ^ B --> F , Not E EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00500, std=0.29659, Rule = A ^ D ^ B --> F , A EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00402, std=0.18172, Rule = C ^ D ^ B --> F , C EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00379, std=0.21600, Rule = A ^ D ^ B --> F , A EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00259, std=0.37523, Rule = Not C ^ D ^ B --> F , Not C EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00218, std=0.81840, Rule = Not E ^ D ^ B --> F , Not E BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00204, std=0.90107, Rule = E ^ D ^ B --> F , E BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00200, std=0.37798, Rule = C ^ D ^ B --> F , C EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00185, std=0.86120, Rule = E ^ D ^ B --> F , E BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00101, std=0.84940, Rule = Not E ^ D ^ B --> F , Not E BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00065, std=0.17926, Rule = Not C ^ D ^ B --> F , Not C EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00199, std=0.29827, Rule = E ^ D ^ B --> F , E EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00205, std=0.28014, Rule = Not A ^ D ^ B --> F , Not A EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00218, std=0.29532, Rule = E ^ D ^ B --> F , E EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00353, std=0.23910, Rule = Not A ^ D ^ B --> F , Not A EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00395, std=0.20484, Rule = Not E ^ D ^ B --> F , Not E EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00650, std=0.20301, Rule = E ^ D ^ B --> F , E EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
Best rule is: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.029688939268434578
new rule added.
Best rule is: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.028952063086968197
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1313
Rule0: C --> F , C BEFORE F, weight=0.0500
Rule1: Not C --> F , Not C BEFORE F, weight=0.5475
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1138
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0846
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0373
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0407
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5613
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0653
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0236
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0493
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2824
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1416
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0740
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6646
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0405
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1349
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0895
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0343
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1743
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1767
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0496
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0304
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0883
Rule23: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0100
Rule24: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 4.6620 min.
[1 th iter] Elapsed: 2.7143 min.
Run 30 batches
grad norm 0.002880828092367389 <= epsilon 0.003. OR, num_batch_no_update 28 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.139327584131208
Params  [tensor([0.1322], dtype=torch.float64, requires_grad=True), tensor([0.0413], dtype=torch.float64, requires_grad=True), tensor([0.5483], dtype=torch.float64, requires_grad=True), tensor([0.1124], dtype=torch.float64, requires_grad=True), tensor([0.0805], dtype=torch.float64, requires_grad=True), tensor([0.0273], dtype=torch.float64, requires_grad=True), tensor([0.0268], dtype=torch.float64, requires_grad=True), tensor([0.5616], dtype=torch.float64, requires_grad=True), tensor([0.0579], dtype=torch.float64, requires_grad=True), tensor([0.0238], dtype=torch.float64, requires_grad=True), tensor([0.0538], dtype=torch.float64, requires_grad=True), tensor([0.2769], dtype=torch.float64, requires_grad=True), tensor([0.1433], dtype=torch.float64, requires_grad=True), tensor([0.0637], dtype=torch.float64, requires_grad=True), tensor([0.6632], dtype=torch.float64, requires_grad=True), tensor([0.0381], dtype=torch.float64, requires_grad=True), tensor([0.1489], dtype=torch.float64, requires_grad=True), tensor([0.0970], dtype=torch.float64, requires_grad=True), tensor([0.0385], dtype=torch.float64, requires_grad=True), tensor([0.1696], dtype=torch.float64, requires_grad=True), tensor([0.1747], dtype=torch.float64, requires_grad=True), tensor([0.0468], dtype=torch.float64, requires_grad=True), tensor([0.0266], dtype=torch.float64, requires_grad=True), tensor([0.1062], dtype=torch.float64, requires_grad=True), tensor([0.0321], dtype=torch.float64, requires_grad=True), tensor([0.0204], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 7.3777 min.
Update Log-likelihood (torch)=  -5.139327584131208
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1335,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0465.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5545.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1195.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0920.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0344.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0327.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5638.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0594.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0264.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0545.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2746.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1419.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0621.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6581.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0393.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1534.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0959.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0388.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1679.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1722.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0436.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0247.
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1066.
Rule23: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0228.
Rule24: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0150.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 33 candidate rules.
[multiprocess log-grad] Elapsed: 3.5802 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02534, std=0.76033, Rule = Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02454, std=0.87043, Rule = A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02441, std=0.78550, Rule = Not A ^ D ^ B --> F , Not A BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02285, std=0.73766, Rule = Not A ^ D ^ B --> F , Not A BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.02023, std=0.78395, Rule = A ^ D ^ B --> F , A BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01693, std=0.35505, Rule = Not C ^ D ^ B --> F , Not C BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01610, std=0.39854, Rule = C ^ D ^ B --> F , C BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01330, std=0.37202, Rule = Not E ^ D ^ B --> F , Not E BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01327, std=0.26646, Rule = C ^ D ^ B --> F , C EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01004, std=0.40704, Rule = E ^ D ^ B --> F , E BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00946, std=0.35691, Rule = A ^ D ^ B --> F , A EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00836, std=0.37507, Rule = Not A ^ D ^ B --> F , Not A BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00766, std=0.20859, Rule = Not E ^ D ^ B --> F , Not E EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00731, std=0.38642, Rule = A ^ D ^ B --> F , A BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00693, std=0.33097, Rule = Not C ^ D ^ B --> F , Not C EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00692, std=0.17051, Rule = Not A ^ D ^ B --> F , Not A EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00662, std=0.24797, Rule = Not E ^ D ^ B --> F , Not E EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00515, std=0.29819, Rule = A ^ D ^ B --> F , A EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00464, std=0.90013, Rule = E ^ D ^ B --> F , E BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00423, std=0.81715, Rule = Not E ^ D ^ B --> F , Not E BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00422, std=0.18133, Rule = C ^ D ^ B --> F , C EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00420, std=0.86083, Rule = E ^ D ^ B --> F , E BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00394, std=0.21713, Rule = A ^ D ^ B --> F , A EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00343, std=0.37177, Rule = Not C ^ D ^ B --> F , Not C EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00320, std=0.84846, Rule = Not E ^ D ^ B --> F , Not E BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00285, std=0.37430, Rule = C ^ D ^ B --> F , C EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00086, std=0.18046, Rule = Not C ^ D ^ B --> F , Not C EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00173, std=0.27969, Rule = Not A ^ D ^ B --> F , Not A EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00179, std=0.29922, Rule = E ^ D ^ B --> F , E EQUAL B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00223, std=0.29721, Rule = E ^ D ^ B --> F , E EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00330, std=0.23871, Rule = Not A ^ D ^ B --> F , Not A EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00379, std=0.20513, Rule = Not E ^ D ^ B --> F , Not E EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= -0.00626, std=0.20393, Rule = E ^ D ^ B --> F , E EQUAL D ^ D BEFORE B ^ B EQUAL F
-------------
Best rule is: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.025336678860885396
new rule added.
Best rule is: A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F
Best log-likelihood-grad(all-data) = 0.024544943720460462
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1335
Rule0: C --> F , C BEFORE F, weight=0.0465
Rule1: Not C --> F , Not C BEFORE F, weight=0.5545
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1195
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0920
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0344
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0327
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5638
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0594
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0264
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0545
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2746
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1419
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0621
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6581
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0393
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1534
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0959
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0388
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1679
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1722
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0436
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0247
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1066
Rule23: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0228
Rule24: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0150
Rule25: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0100
Rule26: A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0100
[0 th iter] Elapsed: 4.7433 min.
[1 th iter] Elapsed: 1.1941 min.
Run 21 batches
grad norm 0.0021858095596493285 <= epsilon 0.003. OR, num_batch_no_update 20 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.160999838248853
Params  [tensor([0.1273], dtype=torch.float64, requires_grad=True), tensor([0.0435], dtype=torch.float64, requires_grad=True), tensor([0.5533], dtype=torch.float64, requires_grad=True), tensor([0.1210], dtype=torch.float64, requires_grad=True), tensor([0.0651], dtype=torch.float64, requires_grad=True), tensor([0.0347], dtype=torch.float64, requires_grad=True), tensor([0.0325], dtype=torch.float64, requires_grad=True), tensor([0.5703], dtype=torch.float64, requires_grad=True), tensor([0.0643], dtype=torch.float64, requires_grad=True), tensor([0.0142], dtype=torch.float64, requires_grad=True), tensor([0.0372], dtype=torch.float64, requires_grad=True), tensor([0.2879], dtype=torch.float64, requires_grad=True), tensor([0.1543], dtype=torch.float64, requires_grad=True), tensor([0.0444], dtype=torch.float64, requires_grad=True), tensor([0.6652], dtype=torch.float64, requires_grad=True), tensor([0.0463], dtype=torch.float64, requires_grad=True), tensor([0.1534], dtype=torch.float64, requires_grad=True), tensor([0.1016], dtype=torch.float64, requires_grad=True), tensor([0.0407], dtype=torch.float64, requires_grad=True), tensor([0.1608], dtype=torch.float64, requires_grad=True), tensor([0.1669], dtype=torch.float64, requires_grad=True), tensor([0.0410], dtype=torch.float64, requires_grad=True), tensor([0.0228], dtype=torch.float64, requires_grad=True), tensor([0.1091], dtype=torch.float64, requires_grad=True), tensor([0.0498], dtype=torch.float64, requires_grad=True), tensor([0.0169], dtype=torch.float64, requires_grad=True), tensor([0.0119], dtype=torch.float64, requires_grad=True), tensor([0.0080], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 5.9387 min.
Update Log-likelihood (torch)=  -5.160999838248853
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1291,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0431.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5524.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1238.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0753.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0341.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0320.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5708.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0623.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0133.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0377.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2787.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1456.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0516.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6652.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0472.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1562.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0938.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0335.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1616.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1684.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0417.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0243.
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1059.
Rule23: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0453.
Rule24: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0159.
Rule25: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0124.
Rule26: A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0110.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 8 candidate rules.
[multiprocess log-grad] Elapsed: 1.3012 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01814, std=0.80051, Rule = Not A ^ D ^ B --> F , Not A BEFORE F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01693, std=0.75069, Rule = Not A ^ D ^ B --> F , Not A BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01499, std=0.35934, Rule = Not C ^ D ^ B --> F , Not C BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01395, std=0.40390, Rule = C ^ D ^ B --> F , C BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01369, std=0.80100, Rule = A ^ D ^ B --> F , A BEFORE B ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01271, std=0.26773, Rule = C ^ D ^ B --> F , C EQUAL F ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.01120, std=0.37542, Rule = Not E ^ D ^ B --> F , Not E BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
log-likelihood-grad(all-data) mean= 0.00781, std=0.41026, Rule = E ^ D ^ B --> F , E BEFORE D ^ D BEFORE B ^ B EQUAL F
-------------
best gain 0.018135308492340994 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.8005 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02043, std=2.19004, Rule = D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01699, std=0.69745, Rule = B ^ Not A ^ C --> F , B EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01385, std=0.51325, Rule = D ^ Not A ^ C --> F , D EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01335, std=0.41599, Rule = B ^ Not A ^ C --> F , B EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01156, std=0.48503, Rule = E ^ Not A ^ C --> F , E EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01049, std=0.40272, Rule = D ^ Not A ^ C --> F , D EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00996, std=0.52315, Rule = D ^ Not A ^ C --> F , D EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00904, std=0.44065, Rule = Not B ^ Not A ^ C --> F , Not B EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00867, std=1.07334, Rule = D ^ Not A ^ C --> F , D BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00652, std=1.02028, Rule = Not D ^ Not A ^ C --> F , Not D BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00611, std=0.37861, Rule = Not D ^ Not A ^ C --> F , Not D EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00464, std=2.36137, Rule = E ^ Not A ^ C --> F , E BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00418, std=2.39436, Rule = Not E ^ Not A ^ C --> F , Not E BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00331, std=2.03055, Rule = Not B ^ Not A ^ C --> F , Not B BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00081, std=0.68018, Rule = E ^ Not A ^ C --> F , E EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00038, std=2.18485, Rule = Not D ^ Not A ^ C --> F , Not D BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00203, std=0.59365, Rule = Not D ^ Not A ^ C --> F , Not D EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00210, std=0.47147, Rule = B ^ Not A ^ C --> F , B EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00253, std=0.57841, Rule = Not E ^ Not A ^ C --> F , Not E EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00632, std=0.57699, Rule = E ^ Not A ^ C --> F , E EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00677, std=0.60891, Rule = Not E ^ Not A ^ C --> F , Not E EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01257, std=1.11033, Rule = D ^ Not A ^ C --> F , D BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01299, std=1.18290, Rule = E ^ Not A ^ C --> F , E BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01379, std=0.61969, Rule = Not E ^ Not A ^ C --> F , Not E EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01581, std=1.06754, Rule = Not D ^ Not A ^ C --> F , Not D BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01583, std=1.19071, Rule = Not E ^ Not A ^ C --> F , Not E BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01684, std=0.43801, Rule = Not B ^ Not A ^ C --> F , Not B EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01791, std=1.20119, Rule = Not E ^ Not A ^ C --> F , Not E BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01920, std=0.70690, Rule = Not D ^ Not A ^ C --> F , Not D EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01924, std=1.13620, Rule = B ^ Not A ^ C --> F , B BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01935, std=2.01941, Rule = B ^ Not A ^ C --> F , B BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02002, std=1.26753, Rule = E ^ Not A ^ C --> F , E BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02008, std=0.62185, Rule = Not B ^ Not A ^ C --> F , Not B EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02422, std=1.09462, Rule = B ^ Not A ^ C --> F , B BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02841, std=1.12709, Rule = Not B ^ Not A ^ C --> F , Not B BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04226, std=1.13914, Rule = Not B ^ Not A ^ C --> F , Not B BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
Best rule is: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.020429332189014226
new rule added.
best gain 0.016990724277369574 does not meet thershold 0.02.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1291
Rule0: C --> F , C BEFORE F, weight=0.0431
Rule1: Not C --> F , Not C BEFORE F, weight=0.5524
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1238
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0753
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0341
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0320
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5708
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0623
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0133
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0377
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2787
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1456
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0516
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6652
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0472
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1562
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0938
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0335
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1616
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1684
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0417
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0243
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1059
Rule23: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0453
Rule24: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0159
Rule25: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0124
Rule26: A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0110
Rule27: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 3.9609 min.
[1 th iter] Elapsed: 2.8589 min.
[2 th iter] Elapsed: 33.4280 sec.
Run 33 batches
grad norm 0.002991041653492399 <= epsilon 0.003. OR, num_batch_no_update 31 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.091322523640619
Params  [tensor([0.1263], dtype=torch.float64, requires_grad=True), tensor([0.0481], dtype=torch.float64, requires_grad=True), tensor([0.5639], dtype=torch.float64, requires_grad=True), tensor([0.1176], dtype=torch.float64, requires_grad=True), tensor([0.0501], dtype=torch.float64, requires_grad=True), tensor([0.0309], dtype=torch.float64, requires_grad=True), tensor([0.0338], dtype=torch.float64, requires_grad=True), tensor([0.5745], dtype=torch.float64, requires_grad=True), tensor([0.0649], dtype=torch.float64, requires_grad=True), tensor([0.0242], dtype=torch.float64, requires_grad=True), tensor([0.0577], dtype=torch.float64, requires_grad=True), tensor([0.2815], dtype=torch.float64, requires_grad=True), tensor([0.1421], dtype=torch.float64, requires_grad=True), tensor([0.0346], dtype=torch.float64, requires_grad=True), tensor([0.6788], dtype=torch.float64, requires_grad=True), tensor([0.0488], dtype=torch.float64, requires_grad=True), tensor([0.1423], dtype=torch.float64, requires_grad=True), tensor([0.0944], dtype=torch.float64, requires_grad=True), tensor([0.0302], dtype=torch.float64, requires_grad=True), tensor([0.1551], dtype=torch.float64, requires_grad=True), tensor([0.1557], dtype=torch.float64, requires_grad=True), tensor([0.0371], dtype=torch.float64, requires_grad=True), tensor([0.0106], dtype=torch.float64, requires_grad=True), tensor([0.1140], dtype=torch.float64, requires_grad=True), tensor([0.0555], dtype=torch.float64, requires_grad=True), tensor([0.0531], dtype=torch.float64, requires_grad=True), tensor([0.0441], dtype=torch.float64, requires_grad=True), tensor([0.0082], dtype=torch.float64, requires_grad=True), tensor([0.0133], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 7.3782 min.
Update Log-likelihood (torch)=  -5.091322523640619
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1306,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0433.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5609.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.1186.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0481.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0264.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0299.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5713.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0633.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0172.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0557.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2908.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1531.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0347.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6745.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0441.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1387.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0989.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0361.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1535.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1533.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0353.
Rule21: Not D ^ B ^ C --> F , Not D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0095.
Rule22: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1051.
Rule23: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0492.
Rule24: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0497.
Rule25: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0423.
Rule26: A ^ D ^ B --> F , A BEFORE F ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0038.
Rule27: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0133.
delete these rules: [21, 26]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1306
Rule0: C --> F , C BEFORE F, weight=0.0433
Rule1: Not C --> F , Not C BEFORE F, weight=0.5609
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.1186
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0481
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0264
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0299
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5713
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0633
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0172
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0557
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2908
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1531
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0347
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6745
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0441
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1387
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.0989
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0361
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1535
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1533
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0353
Rule21: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1051
Rule22: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0492
Rule23: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0497
Rule24: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0423
Rule25: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight=0.0133
[0 th iter] Elapsed: 2.7297 min.
[1 th iter] Elapsed: 2.9948 min.
[2 th iter] Elapsed: 2.7831 min.
3 th iter
grad norm=0.003221794053937807. num_batch_no_update =34
Head = F, base = 0.1341
Rule0: C --> F , C BEFORE F, weight=0.0458
Rule1: Not C --> F , Not C BEFORE F, weight=0.5576
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0984
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0364
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0338
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0390
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5706
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0604
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0280
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0576
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2783
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1379
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0353
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6566
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0554
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1171
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.1060
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0279
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1476
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1581
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0329
Rule21: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1308
Rule22: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0689
Rule23: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0734
Rule24: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0448
Rule25: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight=0.0110
[3 th iter] Elapsed: 46.8483 sec.
Run 49 batches
grad norm 0.0021940106217113444 <= epsilon 0.003. OR, num_batch_no_update 2 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.059868068263658
Params  [tensor([0.1355], dtype=torch.float64, requires_grad=True), tensor([0.0489], dtype=torch.float64, requires_grad=True), tensor([0.5612], dtype=torch.float64, requires_grad=True), tensor([0.1023], dtype=torch.float64, requires_grad=True), tensor([0.0378], dtype=torch.float64, requires_grad=True), tensor([0.0367], dtype=torch.float64, requires_grad=True), tensor([0.0425], dtype=torch.float64, requires_grad=True), tensor([0.5758], dtype=torch.float64, requires_grad=True), tensor([0.0643], dtype=torch.float64, requires_grad=True), tensor([0.0311], dtype=torch.float64, requires_grad=True), tensor([0.0600], dtype=torch.float64, requires_grad=True), tensor([0.2724], dtype=torch.float64, requires_grad=True), tensor([0.1318], dtype=torch.float64, requires_grad=True), tensor([0.0330], dtype=torch.float64, requires_grad=True), tensor([0.6575], dtype=torch.float64, requires_grad=True), tensor([0.0589], dtype=torch.float64, requires_grad=True), tensor([0.1233], dtype=torch.float64, requires_grad=True), tensor([0.0970], dtype=torch.float64, requires_grad=True), tensor([0.0192], dtype=torch.float64, requires_grad=True), tensor([0.1468], dtype=torch.float64, requires_grad=True), tensor([0.1597], dtype=torch.float64, requires_grad=True), tensor([0.0327], dtype=torch.float64, requires_grad=True), tensor([0.1336], dtype=torch.float64, requires_grad=True), tensor([0.0708], dtype=torch.float64, requires_grad=True), tensor([0.0740], dtype=torch.float64, requires_grad=True), tensor([0.0448], dtype=torch.float64, requires_grad=True), tensor([0.0143], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 9.2906 min.
update Log-likelihood (torch)=  -5.059868068263658
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1375,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0450.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5553.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0993.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0329.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0324.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0369.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5711.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0607.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0276.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0572.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2839.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1437.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0381.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6590.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0568.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1156.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.1098.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0328.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1494.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1581.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0341.
Rule21: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1250.
Rule22: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0669.
Rule23: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0734.
Rule24: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0456.
Rule25: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0096.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 35 candidate rules.
[multiprocess log-grad] Elapsed: 3.9441 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01074, std=0.51706, Rule = D ^ Not A ^ C --> F , D EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00996, std=0.70892, Rule = B ^ Not A ^ C --> F , B EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00927, std=0.42327, Rule = B ^ Not A ^ C --> F , B EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00720, std=0.44320, Rule = Not B ^ Not A ^ C --> F , Not B EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00531, std=0.50279, Rule = E ^ Not A ^ C --> F , E EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00502, std=0.41050, Rule = D ^ Not A ^ C --> F , D EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00385, std=0.53892, Rule = D ^ Not A ^ C --> F , D EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00223, std=0.38405, Rule = Not D ^ Not A ^ C --> F , Not D EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00676, std=0.58304, Rule = Not E ^ Not A ^ C --> F , Not E EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00682, std=0.47685, Rule = B ^ Not A ^ C --> F , B EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00754, std=0.61530, Rule = Not D ^ Not A ^ C --> F , Not D EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00967, std=0.69907, Rule = E ^ Not A ^ C --> F , E EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01179, std=1.10102, Rule = D ^ Not A ^ C --> F , D BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01234, std=0.60656, Rule = E ^ Not A ^ C --> F , E EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01284, std=1.04569, Rule = Not D ^ Not A ^ C --> F , Not D BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01368, std=0.64051, Rule = Not E ^ Not A ^ C --> F , Not E EQUAL C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02074, std=0.65077, Rule = Not E ^ Not A ^ C --> F , Not E EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02257, std=0.45078, Rule = Not B ^ Not A ^ C --> F , Not B EQUAL Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02286, std=0.62397, Rule = Not B ^ Not A ^ C --> F , Not B EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02391, std=0.71506, Rule = Not D ^ Not A ^ C --> F , Not D EQUAL F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03230, std=1.13635, Rule = D ^ Not A ^ C --> F , D BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03395, std=1.22566, Rule = E ^ Not A ^ C --> F , E BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03468, std=1.08957, Rule = Not D ^ Not A ^ C --> F , Not D BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03837, std=1.24937, Rule = Not E ^ Not A ^ C --> F , Not E BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03863, std=1.24432, Rule = Not E ^ Not A ^ C --> F , Not E BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03889, std=2.24587, Rule = Not D ^ Not A ^ C --> F , Not D BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04002, std=1.16855, Rule = B ^ Not A ^ C --> F , B BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04130, std=2.08485, Rule = Not B ^ Not A ^ C --> F , Not B BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04205, std=2.46355, Rule = E ^ Not A ^ C --> F , E BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04345, std=1.32521, Rule = E ^ Not A ^ C --> F , E BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04423, std=2.50224, Rule = Not E ^ Not A ^ C --> F , Not E BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04695, std=1.13125, Rule = B ^ Not A ^ C --> F , B BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04857, std=1.15662, Rule = Not B ^ Not A ^ C --> F , Not B BEFORE Not A ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.06078, std=2.06561, Rule = B ^ Not A ^ C --> F , B BEFORE F ^ Not A BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.06578, std=1.18331, Rule = Not B ^ Not A ^ C --> F , Not B BEFORE C ^ Not A BEFORE F ^ C BEFORE F
-------------
best gain 0.010735030908798685 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: E ^ C --> F , E EQUAL F ^ C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 4.0527 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01392, std=0.25954, Rule = B ^ E ^ C --> F , B EQUAL E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01220, std=0.21997, Rule = Not A ^ E ^ C --> F , Not A EQUAL F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01135, std=0.24926, Rule = B ^ E ^ C --> F , B EQUAL F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00949, std=0.36317, Rule = D ^ E ^ C --> F , D BEFORE C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00937, std=0.26846, Rule = Not A ^ E ^ C --> F , Not A EQUAL E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00769, std=0.67675, Rule = Not D ^ E ^ C --> F , Not D BEFORE E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00767, std=0.14093, Rule = B ^ E ^ C --> F , B EQUAL C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00699, std=0.68983, Rule = Not D ^ E ^ C --> F , Not D BEFORE F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00479, std=0.22340, Rule = D ^ E ^ C --> F , D EQUAL F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00434, std=0.16264, Rule = Not B ^ E ^ C --> F , Not B EQUAL C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00415, std=0.20633, Rule = Not D ^ E ^ C --> F , Not D EQUAL C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00392, std=0.34997, Rule = Not D ^ E ^ C --> F , Not D BEFORE C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00364, std=0.66049, Rule = A ^ E ^ C --> F , A BEFORE F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00326, std=0.25166, Rule = D ^ E ^ C --> F , D EQUAL E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00278, std=0.32645, Rule = A ^ E ^ C --> F , A EQUAL E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00252, std=0.38339, Rule = Not A ^ E ^ C --> F , Not A BEFORE C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00086, std=0.18591, Rule = A ^ E ^ C --> F , A EQUAL C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00075, std=0.15348, Rule = Not A ^ E ^ C --> F , Not A EQUAL C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00029, std=0.72246, Rule = D ^ E ^ C --> F , D BEFORE E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00074, std=0.37480, Rule = A ^ E ^ C --> F , A BEFORE C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00123, std=0.74616, Rule = D ^ E ^ C --> F , D BEFORE F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00342, std=0.23074, Rule = Not B ^ E ^ C --> F , Not B EQUAL E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00364, std=0.61907, Rule = A ^ E ^ C --> F , A BEFORE E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00445, std=0.28094, Rule = Not D ^ E ^ C --> F , Not D EQUAL F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00449, std=0.32385, Rule = B ^ E ^ C --> F , B BEFORE C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00450, std=0.28146, Rule = A ^ E ^ C --> F , A EQUAL F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00454, std=0.28916, Rule = Not B ^ E ^ C --> F , Not B BEFORE C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00514, std=0.29340, Rule = Not D ^ E ^ C --> F , Not D EQUAL E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00616, std=0.18827, Rule = D ^ E ^ C --> F , D EQUAL C ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00684, std=0.66588, Rule = Not A ^ E ^ C --> F , Not A BEFORE E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00908, std=0.61279, Rule = Not B ^ E ^ C --> F , Not B BEFORE F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00967, std=0.69907, Rule = Not A ^ E ^ C --> F , Not A BEFORE F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00978, std=0.21719, Rule = Not B ^ E ^ C --> F , Not B EQUAL F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01337, std=0.61176, Rule = B ^ E ^ C --> F , B BEFORE F ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01544, std=0.59642, Rule = Not B ^ E ^ C --> F , Not B BEFORE E ^ E EQUAL F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01595, std=0.60121, Rule = B ^ E ^ C --> F , B BEFORE E ^ E EQUAL F ^ C BEFORE F
-------------
best gain 0.013923352897576978 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 4.0482 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01375, std=1.05102, Rule = Not A ^ E ^ Not C --> F , Not A BEFORE E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01224, std=0.48695, Rule = Not D ^ E ^ Not C --> F , Not D EQUAL Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00720, std=1.05967, Rule = A ^ E ^ Not C --> F , A BEFORE E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00297, std=0.63650, Rule = A ^ E ^ Not C --> F , A EQUAL F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00064, std=0.62476, Rule = D ^ E ^ Not C --> F , D EQUAL F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00115, std=0.65803, Rule = Not A ^ E ^ Not C --> F , Not A EQUAL F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00217, std=0.51109, Rule = Not A ^ E ^ Not C --> F , Not A EQUAL E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00251, std=0.48631, Rule = D ^ E ^ Not C --> F , D EQUAL Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00529, std=1.12967, Rule = A ^ E ^ Not C --> F , A BEFORE Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00618, std=1.16790, Rule = Not B ^ E ^ Not C --> F , Not B BEFORE E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00920, std=1.13375, Rule = Not A ^ E ^ Not C --> F , Not A BEFORE Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00943, std=0.43824, Rule = Not D ^ E ^ Not C --> F , Not D EQUAL E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01083, std=0.47119, Rule = D ^ E ^ Not C --> F , D EQUAL E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01335, std=2.29765, Rule = Not A ^ E ^ Not C --> F , Not A BEFORE F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01367, std=0.41979, Rule = Not B ^ E ^ Not C --> F , Not B EQUAL E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01395, std=0.50251, Rule = B ^ E ^ Not C --> F , B EQUAL E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01521, std=0.62893, Rule = Not A ^ E ^ Not C --> F , Not A EQUAL Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01583, std=1.09631, Rule = D ^ E ^ Not C --> F , D BEFORE E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01604, std=1.16918, Rule = B ^ E ^ Not C --> F , B BEFORE E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01623, std=0.79776, Rule = B ^ E ^ Not C --> F , B EQUAL F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01633, std=0.55361, Rule = A ^ E ^ Not C --> F , A EQUAL E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01876, std=0.66628, Rule = Not D ^ E ^ Not C --> F , Not D EQUAL F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01953, std=1.07159, Rule = Not D ^ E ^ Not C --> F , Not D BEFORE E ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02016, std=2.26931, Rule = Not B ^ E ^ Not C --> F , Not B BEFORE F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02192, std=0.60278, Rule = A ^ E ^ Not C --> F , A EQUAL Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02262, std=2.42187, Rule = A ^ E ^ Not C --> F , A BEFORE F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02286, std=0.56809, Rule = Not B ^ E ^ Not C --> F , Not B EQUAL Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02307, std=0.49400, Rule = B ^ E ^ Not C --> F , B EQUAL Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03102, std=1.16235, Rule = D ^ E ^ Not C --> F , D BEFORE Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03571, std=1.28260, Rule = Not B ^ E ^ Not C --> F , Not B BEFORE Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03662, std=1.24230, Rule = B ^ E ^ Not C --> F , B BEFORE Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03712, std=1.10577, Rule = Not D ^ E ^ Not C --> F , Not D BEFORE Not C ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03943, std=0.72197, Rule = Not B ^ E ^ Not C --> F , Not B EQUAL F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03960, std=2.11755, Rule = D ^ E ^ Not C --> F , D BEFORE F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04407, std=2.12495, Rule = Not D ^ E ^ Not C --> F , Not D BEFORE F ^ E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.05169, std=2.26102, Rule = B ^ E ^ Not C --> F , B BEFORE F ^ E BEFORE F ^ Not C BEFORE F
-------------
best gain 0.013747038226660145 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.8249 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01811, std=1.01315, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00988, std=0.62055, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00952, std=0.44339, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00945, std=1.05992, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00918, std=1.03310, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00755, std=0.59082, Rule = D ^ Not E ^ Not C --> F , D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00127, std=0.63909, Rule = A ^ Not E ^ Not C --> F , A EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00231, std=1.09794, Rule = A ^ Not E ^ Not C --> F , A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00318, std=1.04427, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00697, std=0.50871, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00704, std=0.44048, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00816, std=0.45778, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01157, std=0.47851, Rule = D ^ Not E ^ Not C --> F , D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01215, std=2.04854, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01471, std=0.64605, Rule = A ^ Not E ^ Not C --> F , A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01488, std=2.06671, Rule = D ^ Not E ^ Not C --> F , D BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01554, std=1.14308, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01585, std=0.67132, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01708, std=0.44448, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01775, std=0.57311, Rule = Not A ^ Not E ^ Not C --> F , Not A EQUAL Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01784, std=0.76906, Rule = B ^ Not E ^ Not C --> F , B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01791, std=0.46823, Rule = B ^ Not E ^ Not C --> F , B EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01936, std=2.31595, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02011, std=0.66414, Rule = Not D ^ Not E ^ Not C --> F , Not D EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02076, std=1.13240, Rule = D ^ Not E ^ Not C --> F , D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02130, std=1.08651, Rule = Not D ^ Not E ^ Not C --> F , Not D BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02415, std=0.65246, Rule = A ^ Not E ^ Not C --> F , A EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02660, std=0.59518, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02951, std=2.48448, Rule = A ^ Not E ^ Not C --> F , A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03215, std=1.22706, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03924, std=1.26062, Rule = B ^ Not E ^ Not C --> F , B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03994, std=1.29416, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not C ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04255, std=0.73598, Rule = Not B ^ Not E ^ Not C --> F , Not B EQUAL F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04278, std=1.25386, Rule = Not B ^ Not E ^ Not C --> F , Not B BEFORE Not E ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04352, std=2.40869, Rule = Not A ^ Not E ^ Not C --> F , Not A BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.05981, std=2.31182, Rule = B ^ Not E ^ Not C --> F , B BEFORE F ^ Not E BEFORE F ^ Not C BEFORE F
-------------
best gain 0.018110875291076835 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
start to extend this rule: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 36 candidate rules.
[multiprocess log-grad] Elapsed: 3.8980 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.02789, std=0.99512, Rule = Not E ^ Not B ^ C --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.02036, std=0.94613, Rule = Not A ^ Not B ^ C --> F , Not A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01509, std=0.97812, Rule = A ^ Not B ^ C --> F , A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00382, std=0.49899, Rule = Not D ^ Not B ^ C --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00380, std=1.07516, Rule = D ^ Not B ^ C --> F , D BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00367, std=0.42657, Rule = D ^ Not B ^ C --> F , D EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00315, std=0.43462, Rule = A ^ Not B ^ C --> F , A EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00282, std=0.43630, Rule = D ^ Not B ^ C --> F , D EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00199, std=0.57860, Rule = D ^ Not B ^ C --> F , D EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00149, std=0.64696, Rule = Not D ^ Not B ^ C --> F , Not D EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00106, std=2.08257, Rule = D ^ Not B ^ C --> F , D BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00104, std=0.58295, Rule = A ^ Not B ^ C --> F , A EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00379, std=0.48027, Rule = E ^ Not B ^ C --> F , E EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00404, std=1.06822, Rule = E ^ Not B ^ C --> F , E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00422, std=0.45065, Rule = Not A ^ Not B ^ C --> F , Not A EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00574, std=0.57708, Rule = Not E ^ Not B ^ C --> F , Not E EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00613, std=0.63128, Rule = Not A ^ Not B ^ C --> F , Not A EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00653, std=0.43245, Rule = Not A ^ Not B ^ C --> F , Not A EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00741, std=0.50917, Rule = A ^ Not B ^ C --> F , A EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00832, std=0.44904, Rule = Not D ^ Not B ^ C --> F , Not D EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00840, std=0.45554, Rule = Not E ^ Not B ^ C --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00908, std=0.61279, Rule = E ^ Not B ^ C --> F , E EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01045, std=1.02036, Rule = Not D ^ Not B ^ C --> F , Not D BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01079, std=0.43410, Rule = E ^ Not B ^ C --> F , E EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01347, std=1.09661, Rule = D ^ Not B ^ C --> F , D BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01402, std=1.01977, Rule = Not A ^ Not B ^ C --> F , Not A BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01440, std=1.02952, Rule = Not D ^ Not B ^ C --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01719, std=0.52441, Rule = Not E ^ Not B ^ C --> F , Not E EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01898, std=1.08318, Rule = A ^ Not B ^ C --> F , A BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02047, std=1.12662, Rule = Not E ^ Not B ^ C --> F , Not E BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02553, std=2.21638, Rule = A ^ Not B ^ C --> F , A BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02781, std=2.26410, Rule = Not E ^ Not B ^ C --> F , Not E BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03080, std=2.09733, Rule = Not D ^ Not B ^ C --> F , Not D BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03988, std=2.25376, Rule = E ^ Not B ^ C --> F , E BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04087, std=1.16960, Rule = E ^ Not B ^ C --> F , E BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.04130, std=2.08485, Rule = Not A ^ Not B ^ C --> F , Not A BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
Best rule is: Not E ^ Not B ^ C --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.027888796089251044
new rule added.
Best rule is: Not A ^ Not B ^ C --> F , Not A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
Best log-likelihood-grad(all-data) = 0.02036273082768327
new rule added.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1375
Rule0: C --> F , C BEFORE F, weight=0.0450
Rule1: Not C --> F , Not C BEFORE F, weight=0.5553
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0993
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0329
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0324
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0369
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5711
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0607
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0276
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0572
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2839
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1437
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0381
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6590
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0568
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1156
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.1098
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0328
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1494
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1581
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0341
Rule21: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1250
Rule22: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0669
Rule23: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0734
Rule24: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0456
Rule25: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight=0.0096
Rule26: Not E ^ Not B ^ C --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F, weight=0.0100
Rule27: Not A ^ Not B ^ C --> F , Not A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F, weight=0.0100
[0 th iter] Elapsed: 7.7537 min.
[1 th iter] Elapsed: 5.3631 min.
[2 th iter] Elapsed: 1.3398 min.
Run 34 batches
grad norm 0.002853255972372358 <= epsilon 0.003. OR, num_batch_no_update 32 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.12963728487562
Params  [tensor([0.1285], dtype=torch.float64, requires_grad=True), tensor([0.0490], dtype=torch.float64, requires_grad=True), tensor([0.5599], dtype=torch.float64, requires_grad=True), tensor([0.0886], dtype=torch.float64, requires_grad=True), tensor([0.0158], dtype=torch.float64, requires_grad=True), tensor([0.0308], dtype=torch.float64, requires_grad=True), tensor([0.0364], dtype=torch.float64, requires_grad=True), tensor([0.5742], dtype=torch.float64, requires_grad=True), tensor([0.0547], dtype=torch.float64, requires_grad=True), tensor([0.0255], dtype=torch.float64, requires_grad=True), tensor([0.0629], dtype=torch.float64, requires_grad=True), tensor([0.2813], dtype=torch.float64, requires_grad=True), tensor([0.1396], dtype=torch.float64, requires_grad=True), tensor([0.0339], dtype=torch.float64, requires_grad=True), tensor([0.6677], dtype=torch.float64, requires_grad=True), tensor([0.0565], dtype=torch.float64, requires_grad=True), tensor([0.1163], dtype=torch.float64, requires_grad=True), tensor([0.1054], dtype=torch.float64, requires_grad=True), tensor([0.0283], dtype=torch.float64, requires_grad=True), tensor([0.1401], dtype=torch.float64, requires_grad=True), tensor([0.1495], dtype=torch.float64, requires_grad=True), tensor([0.0276], dtype=torch.float64, requires_grad=True), tensor([0.1625], dtype=torch.float64, requires_grad=True), tensor([0.0793], dtype=torch.float64, requires_grad=True), tensor([0.0779], dtype=torch.float64, requires_grad=True), tensor([0.0443], dtype=torch.float64, requires_grad=True), tensor([0.0196], dtype=torch.float64, requires_grad=True), tensor([0.0337], dtype=torch.float64, requires_grad=True), tensor([0.0263], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 14.4579 min.
Update Log-likelihood (torch)=  -5.12963728487562
Added rule and re-fitted weights. Current rule set is:
Head = F, base(torch) = 0.1305,
Rule0: C --> F , C BEFORE F, weight(torch)=0.0463.
Rule1: Not C --> F , Not C BEFORE F, weight(torch)=0.5561.
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight(torch)=0.0837.
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.0135.
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0296.
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight(torch)=0.0332.
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.5681.
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0513.
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0267.
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight(torch)=0.0650.
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2810.
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1404.
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight(torch)=0.0335.
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.6577.
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.0523.
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.1153.
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.1017.
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.0258.
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1375.
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.1467.
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.0248.
Rule21: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.1532.
Rule22: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0719.
Rule23: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0731.
Rule24: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight(torch)=0.0415.
Rule25: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight(torch)=0.0197.
Rule26: Not E ^ Not B ^ C --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0261.
Rule27: Not A ^ Not B ^ C --> F , Not A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F, weight(torch)=0.0191.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
----- start add_one_predicate_to_existing_rule -----
start enumerating candidate rules.
----- start select_and_add_new_rule -----
-------start multiprocess------
cpu num = 48, use 16 workers, process 34 candidate rules.
[multiprocess log-grad] Elapsed: 5.7785 min.
-------end multiprocess------
------Select N best rule-------
log-likelihood-grad(all-data) mean= 0.01816, std=0.96671, Rule = A ^ Not B ^ C --> F , A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.01309, std=2.04889, Rule = D ^ Not B ^ C --> F , D BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00598, std=1.05692, Rule = D ^ Not B ^ C --> F , D BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00587, std=0.42256, Rule = A ^ Not B ^ C --> F , A EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00498, std=0.48494, Rule = Not D ^ Not B ^ C --> F , Not D EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00451, std=0.42266, Rule = D ^ Not B ^ C --> F , D EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00344, std=0.43247, Rule = D ^ Not B ^ C --> F , D EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00323, std=0.63616, Rule = Not D ^ Not B ^ C --> F , Not D EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00322, std=0.57600, Rule = D ^ Not B ^ C --> F , D EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00170, std=2.13820, Rule = A ^ Not B ^ C --> F , A BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= 0.00122, std=0.58046, Rule = A ^ Not B ^ C --> F , A EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00147, std=0.46854, Rule = E ^ Not B ^ C --> F , E EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00234, std=0.44176, Rule = Not A ^ Not B ^ C --> F , Not A EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00346, std=0.62385, Rule = Not A ^ Not B ^ C --> F , Not A EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00360, std=0.48591, Rule = A ^ Not B ^ C --> F , A EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00392, std=1.06185, Rule = E ^ Not B ^ C --> F , E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00414, std=0.57370, Rule = Not E ^ Not B ^ C --> F , Not E EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00426, std=0.42111, Rule = Not A ^ Not B ^ C --> F , Not A EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00642, std=0.44771, Rule = Not E ^ Not B ^ C --> F , Not E EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00692, std=0.44237, Rule = Not D ^ Not B ^ C --> F , Not D EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00730, std=1.00667, Rule = Not D ^ Not B ^ C --> F , Not D BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00877, std=1.07564, Rule = D ^ Not B ^ C --> F , D BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00905, std=0.42344, Rule = E ^ Not B ^ C --> F , E EQUAL Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00958, std=0.99810, Rule = Not A ^ Not B ^ C --> F , Not A BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.00991, std=0.61064, Rule = E ^ Not B ^ C --> F , E EQUAL F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01225, std=1.05705, Rule = A ^ Not B ^ C --> F , A BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01299, std=1.01550, Rule = Not D ^ Not B ^ C --> F , Not D BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01359, std=2.21289, Rule = Not E ^ Not B ^ C --> F , Not E BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01457, std=0.50439, Rule = Not E ^ Not B ^ C --> F , Not E EQUAL C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01826, std=1.11194, Rule = Not E ^ Not B ^ C --> F , Not E BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.01877, std=2.06130, Rule = Not D ^ Not B ^ C --> F , Not D BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02394, std=2.19942, Rule = E ^ Not B ^ C --> F , E BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.02446, std=2.03279, Rule = Not A ^ Not B ^ C --> F , Not A BEFORE F ^ Not B BEFORE F ^ C BEFORE F
-------------
log-likelihood-grad(all-data) mean= -0.03631, std=1.14407, Rule = E ^ Not B ^ C --> F , E BEFORE C ^ Not B BEFORE F ^ C BEFORE F
-------------
best gain 0.018155718798585595 does not meet thershold 0.02.
----- exit select_and_add_new_rule -----
----- exit add_one_predicate_to_existing_rule -----
Train finished, rule set is:
Head = F, base = 0.1305
Rule0: C --> F , C BEFORE F, weight=0.0463
Rule1: Not C --> F , Not C BEFORE F, weight=0.5561
Rule2: A ^ Not C --> F , A BEFORE F ^ Not C BEFORE F, weight=0.0837
Rule3: Not D ^ Not C --> F , Not D EQUAL Not C ^ Not C BEFORE F, weight=0.0135
Rule4: Not E ^ Not C --> F , Not E BEFORE F ^ Not C BEFORE F, weight=0.0296
Rule5: E ^ Not C --> F , E BEFORE F ^ Not C BEFORE F, weight=0.0332
Rule6: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5681
Rule7: Not A ^ C --> F , Not A BEFORE F ^ C BEFORE F, weight=0.0513
Rule8: Not B ^ C --> F , Not B BEFORE F ^ C BEFORE F, weight=0.0267
Rule9: E ^ C --> F , E EQUAL F ^ C BEFORE F, weight=0.0650
Rule10: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2810
Rule11: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1404
Rule12: D ^ B --> F , D BEFORE B ^ B EQUAL F, weight=0.0335
Rule13: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6577
Rule14: Not E ^ A ^ C --> F , Not E BEFORE F ^ A BEFORE F ^ C BEFORE F, weight=0.0523
Rule15: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1153
Rule16: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.1017
Rule17: B ^ D ^ C --> F , B BEFORE C ^ D BEFORE F ^ C EQUAL F, weight=0.0258
Rule18: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1375
Rule19: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1467
Rule20: D ^ B ^ C --> F , D BEFORE B ^ B EQUAL F ^ C BEFORE F, weight=0.0248
Rule21: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1532
Rule22: C ^ D ^ B --> F , C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0719
Rule23: Not C ^ D ^ B --> F , Not C BEFORE B ^ D BEFORE B ^ B EQUAL F, weight=0.0731
Rule24: Not C ^ D ^ B --> F , Not C BEFORE F ^ D BEFORE B ^ B EQUAL F, weight=0.0415
Rule25: D ^ Not A ^ C --> F , D BEFORE F ^ Not A BEFORE F ^ C BEFORE F, weight=0.0197
Rule26: Not E ^ Not B ^ C --> F , Not E BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F, weight=0.0261
Rule27: Not A ^ Not B ^ C --> F , Not A BEFORE Not B ^ Not B BEFORE F ^ C BEFORE F, weight=0.0191
delete these rules: [0, 2, 3, 4, 5, 7, 8, 9, 12, 14, 17, 20, 22, 23, 24, 25, 26, 27]
start re-fit weights
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1305
Rule0: Not C --> F , Not C BEFORE F, weight=0.5561
Rule1: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.5681
Rule2: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2810
Rule3: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1404
Rule4: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.6577
Rule5: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.1153
Rule6: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.1017
Rule7: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1375
Rule8: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.1467
Rule9: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.1532
[0 th iter] Elapsed: 2.2404 min.
[1 th iter] Elapsed: 2.3738 min.
[2 th iter] Elapsed: 2.1806 min.
3 th iter
grad norm=0.015099142821873766. num_batch_no_update =0
Head = F, base = 0.1135
Rule0: Not C --> F , Not C BEFORE F, weight=0.7023
Rule1: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.7163
Rule2: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.3065
Rule3: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1631
Rule4: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.7442
Rule5: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.2435
Rule6: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.1287
Rule7: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.2344
Rule8: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.2487
Rule9: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.2793
[3 th iter] Elapsed: 1.2779 min.
[4 th iter] Elapsed: 1.4520 min.
Run 75 batches
reach max iter num.
grad norm=0.007924471512274947. num_batch_no_update =24
Finish optimize_log_likelihood, the log likelihood is -5.132933335386078
Params  [tensor([0.1199], dtype=torch.float64, requires_grad=True), tensor([0.7102], dtype=torch.float64, requires_grad=True), tensor([0.7256], dtype=torch.float64, requires_grad=True), tensor([0.2890], dtype=torch.float64, requires_grad=True), tensor([0.1460], dtype=torch.float64, requires_grad=True), tensor([0.7312], dtype=torch.float64, requires_grad=True), tensor([0.2336], dtype=torch.float64, requires_grad=True), tensor([0.1124], dtype=torch.float64, requires_grad=True), tensor([0.2344], dtype=torch.float64, requires_grad=True), tensor([0.2492], dtype=torch.float64, requires_grad=True), tensor([0.2755], dtype=torch.float64, requires_grad=True)]
--------
[optimize log-likelihood] Elapsed: 9.5261 min.
update Log-likelihood (torch)=  -5.132933335386078
Deleted some rules and refited weights, Current rule set is:
Head = F, base(torch) = 0.1246,
Rule0: Not C --> F , Not C BEFORE F, weight(torch)=0.7117.
Rule1: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight(torch)=0.7256.
Rule2: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight(torch)=0.2881.
Rule3: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight(torch)=0.1447.
Rule4: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.7360.
Rule5: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight(torch)=0.2390.
Rule6: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight(torch)=0.1122.
Rule7: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.2374.
Rule8: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight(torch)=0.2516.
Rule9: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight(torch)=0.2766.
---- start optimize_log_likelihood ----
Rule set is:
Head = F, base = 0.1246
Rule0: Not C --> F , Not C BEFORE F, weight=0.7117
Rule1: A ^ C --> F , A BEFORE F ^ C BEFORE F, weight=0.7256
Rule2: D ^ C --> F , D BEFORE F ^ C EQUAL F, weight=0.2881
Rule3: D ^ C --> F , D BEFORE C ^ C EQUAL F, weight=0.1447
Rule4: B ^ A ^ C --> F , B EQUAL F ^ A BEFORE F ^ C BEFORE F, weight=0.7360
Rule5: Not B ^ A ^ C --> F , Not B EQUAL C ^ A BEFORE F ^ C BEFORE F, weight=0.2390
Rule6: B ^ D ^ C --> F , B BEFORE F ^ D BEFORE F ^ C EQUAL F, weight=0.1122
Rule7: D ^ B ^ C --> F , D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.2374
Rule8: Not D ^ B ^ C --> F , Not D BEFORE F ^ B EQUAL F ^ C BEFORE F, weight=0.2516
Rule9: Not A ^ Not D ^ Not C --> F , Not A BEFORE F ^ Not D EQUAL Not C ^ Not C BEFORE F, weight=0.2766
[0 th iter] Elapsed: 1.2716 min.
[1 th iter] Elapsed: 1.2543 min.
[2 th iter] Elapsed: 20.0347 sec.
Run 34 batches
grad norm 0.002915549754496178 <= epsilon 0.003. OR, num_batch_no_update 12 >= num_batch_no_update_limit_opt 300
Finish optimize_log_likelihood, the log likelihood is -5.129321162606038
Params  [tensor([0.1219], dtype=torch.float64, requires_grad=True), tensor([0.7153], dtype=torch.float64, requires_grad=True), tensor([0.7321], dtype=torch.float64, requires_grad=True), tensor([0.2837], dtype=torch.float64, requires_grad=True), tensor([0.1365], dtype=torch.float64, requires_grad=True), tensor([0.7149], dtype=torch.float64, requires_grad=True), tensor([0.2141], dtype=torch.float64, requires_grad=True), tensor([0.1157], dtype=torch.float64, requires_grad=True), tensor([0.2242], dtype=torch.float64, requires_grad=True), tensor([0.2386], dtype=torch.float64, requires_grad=True), tensor([0.2531], dtype=torch.float64, requires_grad=True)]
--------
----- exit search_algorithm -----
[search_algorithm] Elapsed: 9.7872 hour.
Finish time is 2021-03-02 02:23:30.454241
